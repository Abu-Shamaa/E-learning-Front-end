[{"/home/shama/elearning/elearnf/src/index.tsx":"1","/home/shama/elearning/elearnf/src/reportWebVitals.ts":"2","/home/shama/elearning/elearnf/src/serviceWorkerRegistration.ts":"3","/home/shama/elearning/elearnf/src/App.tsx":"4","/home/shama/elearning/elearnf/src/pages/Login.tsx":"5","/home/shama/elearning/elearnf/src/pages/SignUp.tsx":"6","/home/shama/elearning/elearnf/src/pages/Dashboard.tsx":"7","/home/shama/elearning/elearnf/src/components/Nav.tsx":"8","/home/shama/elearning/elearnf/src/pages/user/blog/ViewBlog.tsx":"9","/home/shama/elearning/elearnf/src/pages/ChangePassword.tsx":"10","/home/shama/elearning/elearnf/src/pages/Urls.tsx":"11","/home/shama/elearning/elearnf/src/components/HeaderButton.tsx":"12","/home/shama/elearning/elearnf/src/pages/teacher/CourseList.tsx":"13","/home/shama/elearning/elearnf/src/pages/teacher/MyCourse.tsx":"14","/home/shama/elearning/elearnf/src/pages/teacher/ViewCourseLayout.tsx":"15","/home/shama/elearning/elearnf/src/pages/admin/Group.tsx":"16","/home/shama/elearning/elearnf/src/pages/admin/Category.tsx":"17","/home/shama/elearning/elearnf/src/pages/user/blog/Blog.tsx":"18","/home/shama/elearning/elearnf/src/pages/user/blog/CategoryBlog.tsx":"19","/home/shama/elearning/elearnf/src/pages/user/blog/Categories.tsx":"20","/home/shama/elearning/elearnf/src/pages/user/ucourse/PendingCourseEnrole.tsx":"21","/home/shama/elearning/elearnf/src/pages/user/ucourse/UserCourse.tsx":"22","/home/shama/elearning/elearnf/src/pages/user/ucourse/MyQuizResult.tsx":"23","/home/shama/elearning/elearnf/src/pages/admin/articles/TrashArticle.tsx":"24","/home/shama/elearning/elearnf/src/pages/admin/media/Media.tsx":"25","/home/shama/elearning/elearnf/src/pages/admin/quiz/Course.tsx":"26","/home/shama/elearning/elearnf/src/pages/admin/quiz/Topic.tsx":"27","/home/shama/elearning/elearnf/src/pages/admin/articles/Articles.tsx":"28","/home/shama/elearning/elearnf/src/pages/admin/quiz/Level.tsx":"29","/home/shama/elearning/elearnf/src/pages/admin/quiz/Quiz.tsx":"30","/home/shama/elearning/elearnf/src/pages/admin/quiz/Question.tsx":"31","/home/shama/elearning/elearnf/src/pages/admin/quiz/Instructor.tsx":"32","/home/shama/elearning/elearnf/src/pages/admin/quiz/PendingEnrole.tsx":"33","/home/shama/elearning/elearnf/src/pages/teacher/TchrTopic.tsx":"34","/home/shama/elearning/elearnf/src/pages/teacher/TchrQuiz.tsx":"35","/home/shama/elearning/elearnf/src/pages/teacher/TchrLevel.tsx":"36","/home/shama/elearning/elearnf/src/pages/teacher/TchrQuestion.tsx":"37","/home/shama/elearning/elearnf/src/pages/teacher/ViewTopic.tsx":"38","/home/shama/elearning/elearnf/src/pages/teacher/QuizAttemptedList.tsx":"39","/home/shama/elearning/elearnf/src/pages/user/ucourse/ViewUserCourse.tsx":"40","/home/shama/elearning/elearnf/src/pages/user/ucourse/ViewTopicArticle.tsx":"41","/home/shama/elearning/elearnf/src/pages/user/ucourse/QuizResult.tsx":"42","/home/shama/elearning/elearnf/src/pages/user/ucourse/QuizQuestion.tsx":"43","/home/shama/elearning/elearnf/src/pages/teacher/TopicArticle.tsx":"44","/home/shama/elearning/elearnf/src/pages/teacher/AddQuestion.tsx":"45"},{"size":899,"mtime":1683866486000,"results":"46","hashOfConfig":"47"},{"size":425,"mtime":1683866486000,"results":"48","hashOfConfig":"47"},{"size":5256,"mtime":1683866486000,"results":"49","hashOfConfig":"47"},{"size":2378,"mtime":1688636499889,"results":"50","hashOfConfig":"47"},{"size":4457,"mtime":1683866486000,"results":"51","hashOfConfig":"47"},{"size":5604,"mtime":1683866486000,"results":"52","hashOfConfig":"47"},{"size":17954,"mtime":1688610237006,"results":"53","hashOfConfig":"47"},{"size":1515,"mtime":1688634055774,"results":"54","hashOfConfig":"47"},{"size":4837,"mtime":1688532001350,"results":"55","hashOfConfig":"47"},{"size":3650,"mtime":1683866486000,"results":"56","hashOfConfig":"47"},{"size":4351,"mtime":1688443152773,"results":"57","hashOfConfig":"47"},{"size":2006,"mtime":1683866486000,"results":"58","hashOfConfig":"47"},{"size":4238,"mtime":1683866486000,"results":"59","hashOfConfig":"47"},{"size":5382,"mtime":1683866486000,"results":"60","hashOfConfig":"47"},{"size":6924,"mtime":1683866486000,"results":"61","hashOfConfig":"47"},{"size":9691,"mtime":1683866486000,"results":"62","hashOfConfig":"47"},{"size":12954,"mtime":1684745777000,"results":"63","hashOfConfig":"47"},{"size":9585,"mtime":1688635899201,"results":"64","hashOfConfig":"47"},{"size":9491,"mtime":1688552150366,"results":"65","hashOfConfig":"47"},{"size":1772,"mtime":1688634001843,"results":"66","hashOfConfig":"47"},{"size":4008,"mtime":1683866486000,"results":"67","hashOfConfig":"47"},{"size":2249,"mtime":1683866486000,"results":"68","hashOfConfig":"47"},{"size":2121,"mtime":1683866486000,"results":"69","hashOfConfig":"47"},{"size":6053,"mtime":1683866486000,"results":"70","hashOfConfig":"47"},{"size":11231,"mtime":1688698350305,"results":"71","hashOfConfig":"47"},{"size":15242,"mtime":1683866486000,"results":"72","hashOfConfig":"47"},{"size":7772,"mtime":1683866486000,"results":"73","hashOfConfig":"47"},{"size":36195,"mtime":1688697820973,"results":"74","hashOfConfig":"47"},{"size":13871,"mtime":1683866486000,"results":"75","hashOfConfig":"47"},{"size":26471,"mtime":1683866486000,"results":"76","hashOfConfig":"47"},{"size":21474,"mtime":1683866486000,"results":"77","hashOfConfig":"47"},{"size":11376,"mtime":1683866486000,"results":"78","hashOfConfig":"47"},{"size":5628,"mtime":1683866486000,"results":"79","hashOfConfig":"47"},{"size":7079,"mtime":1683866486000,"results":"80","hashOfConfig":"47"},{"size":27327,"mtime":1683866486000,"results":"81","hashOfConfig":"47"},{"size":15473,"mtime":1683866486000,"results":"82","hashOfConfig":"47"},{"size":20677,"mtime":1683866486000,"results":"83","hashOfConfig":"47"},{"size":12290,"mtime":1683866486000,"results":"84","hashOfConfig":"47"},{"size":3924,"mtime":1683866486000,"results":"85","hashOfConfig":"47"},{"size":10106,"mtime":1683866486000,"results":"86","hashOfConfig":"47"},{"size":2272,"mtime":1683866486000,"results":"87","hashOfConfig":"47"},{"size":2596,"mtime":1683866486000,"results":"88","hashOfConfig":"47"},{"size":10194,"mtime":1683866486000,"results":"89","hashOfConfig":"47"},{"size":19956,"mtime":1683866486000,"results":"90","hashOfConfig":"47"},{"size":17630,"mtime":1683866486000,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4mnmug",{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},"/home/shama/elearning/elearnf/src/index.tsx",[],[],"/home/shama/elearning/elearnf/src/reportWebVitals.ts",[],[],"/home/shama/elearning/elearnf/src/serviceWorkerRegistration.ts",[],[],"/home/shama/elearning/elearnf/src/App.tsx",[],[],"/home/shama/elearning/elearnf/src/pages/Login.tsx",["257","258","259"],[],"import {\n    IonCard,\n    IonCardContent,\n    IonCardHeader,\n    IonButton,\n    IonToolbar,\n    IonTitle,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonHeader,\n    IonContent,\n    IonNote\n} from \"@ionic/react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link, Redirect } from 'react-router-dom';\nimport { useHistory } from \"react-router\";\nimport './Style.css';\nimport baseUrl, { api } from \"./Urls\";\n\nconst Login: React.FC<{\n    onLogin: () => void;\n}> = (props) => {\n    const history = useHistory();\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [loginState, setLogin] = useState(false);\n    const [invalidState, setValidState] = useState(false);\n    useEffect(() => {\n        const token = localStorage.getItem(\"token\");\n        token !== null && history.replace(\"/dashboard\");\n    }, []);\n\n\n    const login = () => {\n        setLogin(true);\n        let data = {\n            email: email,\n            password: password,\n        };\n        fetch(`${baseUrl}${api.login}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify(data),\n        })\n\n            .then((response) => {\n                // Fail Login\n                if (response.status !== 200) {\n                    setLogin(false);\n                    setValidState(true);\n                    throw new Error(\"Status code: \" + response.status);\n                }\n                return response.json();\n            })\n            .then(result => {\n                localStorage.setItem('token', result.token);\n                localStorage.setItem('role', result.role);\n                localStorage.setItem('username', result.username);\n                props.onLogin();\n                history.replace(\"/dashboard\");\n\n            })\n\n\n            .catch(error => {\n                console.log('error', error)\n\n            });\n\n    }\n\n\n    const keyDownHandler = (event: any) => {\n\n\n        if (event.key === 'Enter') {\n\n            login();\n\n        }\n    };\n\n\n    return (\n        <IonContent>\n            <div className=\"contain\">\n                <IonCard>\n                    <IonCardHeader>\n                        <IonHeader>\n                            <IonToolbar>\n                                <IonTitle>Login</IonTitle>\n                            </IonToolbar>\n                        </IonHeader>\n                    </IonCardHeader>\n\n                    <IonCardContent>\n\n                        <IonItem\n                            className={`${invalidState && \"ion-invalid\"}`}>\n                            <IonLabel position=\"stacked\">Email</IonLabel>\n                            <IonInput type=\"text\"\n                                name=\"email\"\n                                value={email}\n                                placeholder=\"enter email\"\n                                required\n                                clearInput\n                                onIonChange={(e: any) => setEmail(e.target.value)}\n                                onKeyDown={(event) => keyDownHandler(event)}\n                            >\n                            </IonInput>\n                            <IonNote slot=\"error\">Invalid username or password</IonNote>\n                        </IonItem>\n                        <IonItem>\n                            <IonLabel position=\"stacked\">Password</IonLabel>\n                            <IonInput type=\"password\"\n                                name=\"password\"\n                                value={password}\n                                placeholder=\"password\"\n                                required\n                                clearInput\n                                onIonChange={(e: any) => setPassword(e.target.value)}\n                                onKeyDown={keyDownHandler}\n                            >\n                            </IonInput>\n                        </IonItem>\n                        <div style={{ marginTop: \"3%\" }}>\n                            <IonButton color=\"primary\" onClick={login}>Login</IonButton>\n                            <Link to='/signup' ><p className=\"text-end\">Create Account</p></Link>\n\n                        </div>\n\n                    </IonCardContent>\n                </IonCard>\n            </div>\n        </IonContent>\n    );\n};\n\nexport default Login;","/home/shama/elearning/elearnf/src/pages/SignUp.tsx",["260","261","262","263","264"],[],"import {\n    IonCard,\n    IonCardContent,\n    IonCardHeader,\n    IonButton,\n    IonToolbar,\n    IonTitle,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonHeader,\n    IonContent,\n\n} from \"@ionic/react\";\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport './Style.css';\nimport baseUrl, { api } from \"./Urls\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport swal from 'sweetalert';\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nconst schema = yup.object().shape({\n    email: yup.string()\n        .required('Email is required'),\n\n    name: yup.string()\n        .required('Name is required'),\n    password: yup.string()\n        .required('Password is required')\n})\nconst SignUp: React.FC = () => {\n    const history = useHistory();\n    const [error, setError] = useState('');\n    const {\n        handleSubmit,\n        register,\n        formState: { errors },\n        reset,\n        watch\n    } = useForm({\n        defaultValues: {\n            email: '',\n            name: '',\n            password: '',\n\n\n        },\n        resolver: yupResolver(schema),\n    });\n\n    const handleChange = (e: any) => {\n\n        const eml = e.target.value;\n\n        if (eml) {\n            fetch(`${baseUrl}${api.checkUser}${eml}`, {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n\n                },\n            })\n                .then(resp => resp.json())\n                .then(res => {\n                    if (Object.keys(res).length != 0) {\n                        setError('Email already exists')\n                    }\n                })\n        }\n\n    }\n    //console.log(error)\n    const signUp = (e: any) => {\n\n\n        fetch(`${baseUrl}${api.signUp}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify(e),\n        })\n\n            .then((response) => {\n\n                if (response.status == 200) {\n                    history.replace(\"/login\");\n                    setError('');\n                    reset({\n                        email: '',\n                        name: '',\n                        password: '',\n\n                    })\n                    swal({\n                        title: \"Success!\",\n                        text: \"SignUp successfull\",\n                        icon: \"success\",\n                    });\n                }\n\n            })\n\n\n\n            .catch(error => {\n                console.log('error', error)\n\n            });\n\n    }\n\n\n\n    return (\n        <IonContent>\n            <div className=\"contain\">\n                <IonCard>\n                    <IonCardHeader>\n                        <IonHeader>\n                            <IonToolbar>\n                                <IonTitle>Create Account</IonTitle>\n                            </IonToolbar>\n                        </IonHeader>\n                    </IonCardHeader>\n\n                    <IonCardContent>\n                        <form onSubmit={handleSubmit(signUp)}>\n                            <IonItem>\n                                <IonLabel position=\"stacked\">Name</IonLabel>\n                                <IonInput type=\"text\"\n\n                                    placeholder=\"enter your full name\"\n\n                                    {...register(\"name\")}\n\n                                >\n                                </IonInput>\n\n                            </IonItem>\n                            <p style={{ color: \"red\" }}>\n                                <ErrorMessage errors={errors} name=\"name\" />\n                            </p>\n\n                            <IonItem>\n                                <IonLabel position=\"stacked\">Email</IonLabel>\n                                <IonInput type=\"email\"\n                                    placeholder=\"enter email\"\n                                    {...register(\"email\")}\n                                    onIonChange={(e: any) => handleChange(e)}\n                                >\n                                </IonInput>\n\n                            </IonItem>\n                            <p style={{ color: \"red\" }}>\n                                <ErrorMessage errors={errors} name=\"email\" />\n                            </p>\n                            <p style={{ color: \"red\" }}>\n                                {error ? error : ''}\n                            </p>\n\n                            <IonItem>\n                                <IonLabel position=\"stacked\">Password</IonLabel>\n                                <IonInput type=\"password\"\n                                    placeholder=\"password\"\n                                    {...register(\"password\")}\n\n                                >\n                                </IonInput>\n                            </IonItem>\n                            <p style={{ color: \"red\" }}>\n                                <ErrorMessage errors={errors} name=\"password\" />\n                            </p>\n                            <div style={{ marginTop: \"3%\" }}>\n                                <IonButton color=\"primary\" type='submit'>Sign Up</IonButton>\n\n\n                            </div>\n                        </form>\n                    </IonCardContent>\n                </IonCard>\n            </div>\n        </IonContent>\n    );\n};\n\nexport default SignUp;","/home/shama/elearning/elearnf/src/pages/Dashboard.tsx",["265","266","267","268","269","270","271","272","273","274"],[],"/home/shama/elearning/elearnf/src/components/Nav.tsx",[],[],"/home/shama/elearning/elearnf/src/pages/user/blog/ViewBlog.tsx",["275","276","277","278","279","280","281"],[],"/home/shama/elearning/elearnf/src/pages/ChangePassword.tsx",["282","283"],[],"import {\n    IonCard,\n    IonCardContent,\n    IonCardHeader,\n    IonButton,\n    IonToolbar,\n    IonTitle,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonHeader,\n    IonContent,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport './Style.css';\nimport baseUrl, { api } from \"./Urls\";\nimport swal from 'sweetalert';\nconst ChangePassword: React.FC = () => {\n    const [password, setPassword] = useState('');\n    const [email, setEmail] = useState('');\n    const [error, setError] = useState(\"\");\n\n    const update = () => {\n        let data = {\n            'password': password,\n            'email': email,\n            'token': localStorage.getItem(\"token\"),\n        }\n        fetch(`${baseUrl}${api.changePassword}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(data),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    swal({\n                        title: \"Success!\",\n                        text: \"Password Changed Successfully\",\n                        icon: \"success\",\n                    });\n                    window.location.href = '/login';\n                    localStorage.removeItem(\"token\");\n\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText +\n                            \" - Password not Changed\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    return (\n        <IonContent>\n\n            <IonCard>\n                <IonCardHeader>\n                    <IonHeader>\n                        <IonToolbar>\n                            <div className=\"text-center\">\n                                <IonTitle>Change Password</IonTitle>\n                            </div>\n\n                        </IonToolbar>\n                    </IonHeader>\n                </IonCardHeader>\n\n                <IonCardContent>\n\n                    <IonItem\n                    >\n                        <IonLabel position=\"stacked\">Email</IonLabel>\n                        <IonInput type=\"text\"\n                            name=\"email\"\n                            value={email}\n                            placeholder=\"enter email\"\n                            required\n                            clearInput\n                            onIonChange={(e: any) => setEmail(e.target.value)}\n\n                        >\n                        </IonInput>\n\n                    </IonItem>\n                    <IonItem>\n                        <IonLabel position=\"stacked\">New Password</IonLabel>\n                        <IonInput type=\"password\"\n                            name=\"password\"\n                            value={password}\n                            placeholder=\"password\"\n                            required\n                            clearInput\n                            onIonChange={(e: any) => setPassword(e.target.value)}\n\n                        >\n                        </IonInput>\n                    </IonItem>\n                    <div style={{ marginTop: \"3%\" }} className='text-center'>\n                        <IonButton color=\"primary\" onClick={update}>Save</IonButton>\n                    </div>\n\n                </IonCardContent>\n            </IonCard>\n\n        </IonContent>\n    );\n}\nexport default ChangePassword;","/home/shama/elearning/elearnf/src/pages/Urls.tsx",[],[],"/home/shama/elearning/elearnf/src/components/HeaderButton.tsx",[],[],"/home/shama/elearning/elearnf/src/pages/teacher/CourseList.tsx",["284"],[],"import React, { FC, useMemo, useState, useEffect } from 'react';\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    IconButton,\n    Tooltip,\n} from '@mui/material';\nimport { Input } from '@mui/icons-material';\nimport baseUrl, { api } from '../../pages/Urls';\nimport { IonContent } from '@ionic/react';\nimport swal from 'sweetalert';\ntype CourseData = {\n    id: string;\n    course_name: string;\n    description: string;\n\n};\n\n\nconst CourseList: FC = () => {\n    const [course, setCourse] = useState([]);\n\n    const fetchCourse = () => {\n        fetch(`${baseUrl}${api.allCourse}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setCourse(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchCourse();\n\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<CourseData>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'course_name',\n                header: 'Course Name',\n\n            },\n            {\n                accessorKey: 'description',\n                header: 'Description',\n\n            },\n\n        ],\n        [],\n    );\n\n    const enroleCourse = (id: any) => {\n        if (window.confirm('Want to enrole this course?')) {\n\n            let data = {\n                'course_id': id,\n            }\n            fetch(`${baseUrl}${api.courseEnrole}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(data),\n\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n                        fetchCourse();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Please wait for aproval\",\n                            icon: \"success\",\n                        });\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: response.status + ' ' + response.statusText +\n                                \" - Course not enroled\",\n                            icon: \"error\",\n                        });\n                    }\n                })\n\n                .catch(error => console.log('error', error));\n\n        }\n\n    }\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n                <h1 className='text-center mb-2'>List of Courses</h1>\n                {localStorage.getItem(\"role\") == 'ar_instructor' ?\n                    <MaterialReactTable\n                        columns={columns}\n                        data={course}\n                        getRowId={(row => `${row.id}`)}\n                        enableRowNumbers\n                        enableColumnOrdering\n\n                    />\n                    :\n                    <MaterialReactTable\n                        columns={columns}\n                        data={course}\n                        getRowId={(row => `${row.id}`)}\n                        enableRowActions\n                        enableRowNumbers\n                        enableColumnOrdering\n                        renderRowActions={({ row, table }) => (\n                            <Box sx={{ display: 'flex', gap: '1rem' }}>\n\n                                <Tooltip arrow placement=\"right\" title=\"Enrole-course\">\n                                    <IconButton style={{ color: \"green\" }} onClick={() => enroleCourse(row.id)}>\n                                        <Input />\n                                    </IconButton>\n                                </Tooltip>\n\n                            </Box>\n                        )}\n\n                    />\n                }\n\n\n            </div>\n        </IonContent>\n\n    );\n\n};\n\nexport default CourseList;","/home/shama/elearning/elearnf/src/pages/teacher/MyCourse.tsx",["285","286","287","288","289","290","291","292","293","294"],[],"import {\n    IonContent, IonCard, IonCardContent, IonCardHeader, IonCardTitle, IonNote,\n} from \"@ionic/react\";\nimport React, { useState, useEffect } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport TextField from '@mui/material/TextField';\nimport SearchIcon from '@mui/icons-material/Search';\nimport TablePagination from '@mui/material/TablePagination';\nimport baseUrl, { api } from '../../pages/Urls';\nimport { Link } from 'react-router-dom';\nimport ReactPaginate from \"react-paginate\";\n\nconst MyCourse: React.FC = () => {\n\n    const [mycourse, setMyCourse] = useState([]);\n    const [pageNumber, setPageNumber] = useState(0);\n    const mycoursePerPage = 10;\n    const pagesVisited = pageNumber * mycoursePerPage;\n    const pageCount = Math.ceil(mycourse.length / mycoursePerPage);\n    const changePage = ({ selected }: any) => {\n        setPageNumber(selected);\n    };\n\n    const fetchMycourse = () => {\n        fetch(`${baseUrl}${api.myCourse}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setMyCourse(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchMycourse();\n    }, []);\n\n    const search = (text: any) => {\n        if (text) {\n            let matches = mycourse.filter((item: any) => {\n                const regex = new RegExp(`${text}`, \"gi\");\n                return item.course_name.match(regex);\n            })\n            setMyCourse(matches);\n        } else {\n            fetchMycourse();\n        }\n\n    };\n\n\n    return (\n        <IonContent>\n            <div className=\"container mt-5 mb-5\">\n                <p className=\"h1 text-center\">My Courses</p>\n                <Box sx={{ display: 'flex', justifyContent: \"flex-end\", mx: 1 }}>\n                    <TextField\n                        id=\"input-with-icon-textfield\"\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <SearchIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                        variant=\"standard\"\n                        onChange={(e: any) => search(e.target.value)}\n                    />\n                </Box>\n                {\n                    mycourse.length != 0 ?\n                        <Box sx={{ width: '100%', mb: 2, mt: 3 }}>\n\n\n                            {(mycoursePerPage > 0\n                                ? mycourse.slice(pagesVisited, pagesVisited + mycoursePerPage)\n                                : mycourse\n                            ).map((item: any, i: any) => (\n\n                                <IonCard key={i.toString()}>\n                                    <IonCardHeader>\n\n                                        <IonCardTitle>\n                                            <Link className='text-decoration-none' to={`/dashboard/mycourse/${item.course_id}`}> {item.course_name}</Link>\n                                        </IonCardTitle>\n\n                                    </IonCardHeader>\n\n                                    <IonCardContent>\n                                        {item.description}\n                                    </IonCardContent>\n\n                                </IonCard>\n\n\n                            ))}\n\n\n                        </Box>\n                        :\n                        <div className='text-center mt-5'>\n                            <IonNote color=\"danger\">**No match data**</IonNote>\n                        </div>\n\n                }\n\n\n            </div>\n            {\n                mycourse.length != 0 && mycourse.length > mycoursePerPage ?\n                    <ReactPaginate\n                        nextLabel=\" >\"\n                        onPageChange={changePage}\n                        pageRangeDisplayed={3}\n                        marginPagesDisplayed={2}\n                        pageCount={pageCount}\n                        previousLabel=\"< \"\n                        pageClassName=\"page-item\"\n                        pageLinkClassName=\"page-link\"\n                        previousClassName=\"page-item\"\n                        previousLinkClassName=\"page-link\"\n                        nextClassName=\"page-item\"\n                        nextLinkClassName=\"page-link\"\n                        breakLabel=\"...\"\n                        breakClassName=\"page-item\"\n                        breakLinkClassName=\"page-link\"\n                        containerClassName=\"pagination\"\n                        activeClassName=\"active\"\n                        renderOnZeroPageCount={null || undefined}\n                    /> : ''\n            }\n        </IonContent >\n    );\n\n}\n\nexport default MyCourse;\n\n","/home/shama/elearning/elearnf/src/pages/teacher/ViewCourseLayout.tsx",["295","296","297","298"],[],"import {\n    IonContent,\n    IonItem,\n    IonLabel,\n    IonRouterOutlet,\n    IonCard,\n    IonAccordion,\n    IonAccordionGroup,\n\n} from '@ionic/react';\n\nimport { Grid, Box, Tabs, Tab, Typography } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport baseUrl, { api } from '../../pages/Urls';\nimport { useHistory, useParams, useLocation } from \"react-router\";\nimport TchrTopic from './TchrTopic';\nimport TchrLevel from './TchrLevel';\nimport TchrQuiz from './TchrQuiz';\nimport TchrQuestion from './TchrQuestion';\nimport QuizAttemptedList from './QuizAttemptedList';\nimport { Route } from 'react-router-dom';\nimport ViewTopic from './ViewTopic';\n\n\nconst ViewCourseLayout: React.FC = () => {\n    type ViewCourse = {\n        id: string;\n    };\n    const history = useHistory()\n    const { id } = useParams<ViewCourse>();\n    const [course_name, setCourse_name] = useState('');\n    const [courseId, setCourseId] = useState('');\n    const [quiz, setQuiz] = useState([]);\n    const [topic, setTopic] = useState([]);\n    const [level, setLevel] = useState([]);\n    const [question, setQuestion] = useState([]);\n    const fetchShowCourse = () => {\n        fetch(`${baseUrl}${api.showCourse}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(result => {\n                setCourse_name(result.course.course_name)\n                setCourseId(result.course.id)\n                setQuiz(result.course.quiz)\n                setTopic(result.course.topic)\n                setLevel(result.course.level)\n                setQuestion(result.course.question)\n            })\n    }\n    useEffect(() => {\n        fetchShowCourse()\n\n    }, []);\n\n    return (\n        <IonContent>\n\n            <IonRouterOutlet >\n                <Route exact path=\"/dashboard/mycourse/:id\">\n\n                    <CourseTab\n                        quiz={quiz} topic={topic}\n                        course_name={course_name} courseId={courseId}\n                        level={level} question={question} fetchShowCourse={() => fetchShowCourse()}\n                    />\n\n                </Route >\n                <Route exact path=\"/dashboard/mycourse/:id/topic/:id\">\n                    <ViewTopic courseId={courseId} />\n                </Route >\n            </IonRouterOutlet>\n        </IonContent>\n    );\n};\n\nconst CourseTab: React.FC<{\n    quiz: any[],\n    topic: any[],\n    level: any[],\n    question: any[],\n    course_name: string,\n    courseId: string,\n    fetchShowCourse: () => void;\n}> = (props) => {\n    // Tab State\n    const [view, setView] = useState<number>(0);\n    const [activateTab, setActivateTab] = useState(false);\n    const location = useLocation();\n    useEffect(() => {\n        setActivateTab(true);\n    }, []);\n\n\n    return (\n        <IonContent>\n            <Grid p={2} container spacing={2}>\n\n                <Grid item xs={true}>\n                    <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n                        {activateTab && (\n                            <Tabs value={view} onChange={(e, f) => setView(f)} variant=\"scrollable\"\n                                scrollButtons=\"auto\" aria-label=\"scrollable auto tabs example\" >\n                                <Tab value={0} label=\"Course\" />\n                                <Tab value={1} label=\"Topic\" />\n                                <Tab value={2} label=\"Level\" />\n                                <Tab value={3} label=\"Question\" />\n                                <Tab value={4} label=\"Quiz\" />\n                                <Tab value={5} label=\"Attempt-List\" />\n                            </Tabs>\n                        )}\n                    </Box>\n                    {activateTab && view === 0 && <List quiz={props.quiz} topic={props.topic} course_name={props.course_name} />}\n                    {view === 1 && <TchrTopic topic={props.topic} course_name={props.course_name} fetchShowCourse={() => props.fetchShowCourse()} courseId={props.courseId} />}\n                    {view === 2 && <TchrLevel topic={props.topic} course_name={props.course_name} level={props.level} fetchShowCourse={() => props.fetchShowCourse()} />}\n                    {view === 3 && <TchrQuestion question={props.question} course_name={props.course_name} level={props.level} fetchShowCourse={() => props.fetchShowCourse()} />}\n                    {view === 4 && <TchrQuiz quiz={props.quiz} course_name={props.course_name} level={props.level} fetchShowCourse={() => props.fetchShowCourse()} />}\n\n                    {view === 5 && <QuizAttemptedList courseId={props.courseId} course_name={props.course_name} />}\n\n\n                </Grid>\n            </Grid>\n        </IonContent>\n    );\n};\nconst List: React.FC<{\n    quiz: any[],\n    topic: any[]\n    course_name: string,\n}> = (props) => {\n\n    return (\n\n        <div className='mt-2'>\n\n            <IonItem>\n                <IonLabel color=\"primary\">\n                    <h1>{props.course_name}</h1>\n                </IonLabel>\n            </IonItem>\n\n            <IonCard >\n\n                <IonAccordionGroup>\n                    <IonAccordion value=\"first\">\n                        <IonItem slot=\"header\" color=\"light\">\n                            <IonLabel>Quiz</IonLabel>\n                        </IonItem>\n                        <IonItem slot=\"header\" color=\"light\">\n                            <IonLabel>Totaal Quiz : {props.quiz.length}</IonLabel>\n                        </IonItem>\n                        <div className=\"ion-padding\" slot=\"content\">\n                            {props.quiz.map((item: any, i: any) =>\n                                <p key={i.toString()}>{i + 1}. {item.quiz_name}</p>\n                            )}\n                        </div>\n                    </IonAccordion>\n                </IonAccordionGroup>\n\n            </IonCard>\n            <IonCard >\n\n                <IonAccordionGroup>\n                    <IonAccordion value=\"first\">\n                        <IonItem slot=\"header\" color=\"light\">\n                            <IonLabel>Topic</IonLabel>\n                        </IonItem>\n                        <IonItem slot=\"header\" color=\"light\">\n\n                            <IonLabel>Totaal Topic : {props.topic.length}</IonLabel>\n                        </IonItem>\n                        <div className=\"ion-padding\" slot=\"content\">\n                            {props.topic.map((item: any, i: any) =>\n                                <p key={i.toString()}>{i + 1}. {item.topic_name}</p>\n                            )}\n                        </div>\n                    </IonAccordion>\n                </IonAccordionGroup>\n\n            </IonCard>\n\n        </div>\n\n\n    );\n};\nexport default ViewCourseLayout;","/home/shama/elearning/elearnf/src/pages/admin/Group.tsx",["299","300","301","302"],[],"import React, { FC, useMemo, useState, useEffect, useRef } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    TextField,\n    Tooltip,\n} from '@mui/material';\nimport { Delete, Edit, Add } from '@mui/icons-material';\nimport baseUrl, { api } from '../Urls';\nimport { IonContent } from '@ionic/react';\nimport { ErrorMessage } from '@hookform/error-message';\nimport swal from 'sweetalert';\ntype GroupTable = {\n    id: string;\n    name: string;\n\n};\n\n\n\nconst GroupComponent: FC = () => {\n    const [group, setGroup] = useState([]);\n    const [groupData, setGroupData] = useState({});\n    const [modalOpen, setModalOpen] = useState(false);\n    const fetchGroup = () => {\n        fetch(`${baseUrl}${api.allGroup}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setGroup(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchGroup();\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<GroupTable>[]>(\n        () => [\n\n            {\n                accessorKey: 'name',\n                header: 'Name',\n\n            },\n\n        ],\n        [],\n    );\n\n    const deleteGroup = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteGroup}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n\n                .then(res => {\n                    if (res.status === 200) {\n                        fetchGroup();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Group deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Group not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n                <h1 className='text-center mb-2'>List of Groups</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={group}\n                    getRowId={(row => `${row.id}`)}\n                    enableRowActions\n                    positionActionsColumn=\"last\"\n                    enableRowNumbers\n                    renderRowActions={({ row, table }) => (\n                        <Box sx={{ display: 'flex', gap: '1rem' }}>\n                            <Tooltip arrow placement=\"left\" title=\"Edit\">\n                                <IconButton onClick={() => {\n                                    setGroupData(row.original)\n                                    setModalOpen(true);\n\n                                }}>\n                                    <Edit />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"right\" title=\"Delete\">\n                                <IconButton color=\"error\" onClick={() => deleteGroup(row.id)}>\n                                    <Delete />\n                                </IconButton>\n                            </Tooltip>\n                        </Box>\n                    )}\n                    renderTopToolbarCustomActions={() => (\n                        <Tooltip title=\"Add-group\">\n                            <IconButton onClick={() => setModalOpen(true)}>\n                                Create <Add />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                />\n                <CreateOrEdit\n                    open={modalOpen}\n                    onClose={() => {\n                        setModalOpen(false)\n                        setGroupData({})\n\n                    }}\n                    fetchGroup={() => fetchGroup()}\n                    groupData={groupData}\n\n                />\n            </div>\n        </IonContent>\n\n    );\n\n};\n\nconst CreateOrEdit: FC<{\n    onClose: () => void;\n    fetchGroup: () => void;\n    open: boolean;\n    groupData: any\n}> = (props) => {\n    const [error, setError] = useState('');\n    const type = Object.keys(props.groupData).length == 0 ? \"C\" : \"E\";\n    const formRef = useRef<HTMLFormElement>(null);\n    const {\n        register,\n        reset,\n        handleSubmit,\n        formState: { errors },\n    } = useForm({\n        criteriaMode: \"all\",\n\n    });\n    const addGroup = (e: any) => {\n        {\n\n\n            fetch(`${baseUrl}${api.addGroup}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(e),\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n                        props.fetchGroup();\n                        props.onClose();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Group Created successfully\",\n                            icon: \"success\",\n                        });\n                    } else if (response.status === 422) {\n                        setError('The name has already been taken ')\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: response.status + ' ' + response.statusText + \" - Group not Created\",\n                            icon: \"error\",\n                        });\n                    }\n                })\n                .catch(res => {\n                    if (res.status === 422) {\n                        setError(res.error)\n                    }\n                })\n            // .catch(error => console.log('error', error));\n\n        }\n    }\n\n    const updateGroup = (e: any) => {\n\n        fetch(`${baseUrl}${api.updateGroup}${e.id}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(e),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    props.fetchGroup();\n                    props.onClose();\n                    swal({\n                        title: \"Success!\",\n                        text: \"Group updated successfully\",\n                        icon: \"success\",\n                    });\n\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText + \" - Group not Updated\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    const onSubmit = (e: any) => {\n\n        type === \"C\" ? addGroup(e) : updateGroup(e);\n    };\n    useEffect(() => {\n        setError('');\n        {\n            type === \"E\" ?\n                reset({\n                    id: props.groupData.id,\n                    name: props.groupData.name,\n\n                }) : reset({\n                    id: '',\n                    name: ''\n                })\n        };\n    }, [props.groupData]);\n\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle textAlign=\"center\">{type === \"C\" ? \"Create\" : \"Edit\"} Group</DialogTitle>\n            <DialogContent>\n                <form ref={formRef} onSubmit={handleSubmit(onSubmit)}>\n                    <Stack\n                        sx={{\n                            width: '100%',\n                            minWidth: { xs: '300px', sm: '360px', md: '400px' },\n\n                        }}\n                    >\n\n                        <TextField sx={{ mt: 3 }}\n                            type=\"text\"\n                            label=\"Group Name\"\n                            variant=\"filled\"\n                            focused\n\n                            {...register(\"name\", { required: \"Group Name Is Required\" })}\n                        />\n                        <p style={{ color: \"red\" }}>\n                            <ErrorMessage errors={errors} name=\"name\" />\n                            {error ? error : ''}\n                        </p>\n\n                    </Stack>\n                    <DialogActions sx={{ p: '1.25rem' }}>\n                        <Button onClick={props.onClose}>Cancel</Button>\n                        <Button type=\"submit\">{type === \"C\" ? \"Create\" : \"Save\"}</Button>\n                    </DialogActions>\n                </form>\n            </DialogContent>\n\n        </Dialog>\n    );\n}\n\nexport default GroupComponent;","/home/shama/elearning/elearnf/src/pages/admin/Category.tsx",["303","304","305","306","307","308"],[],"import React, { FC, useMemo, useState, useEffect, useRef } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    TextField,\n    Tooltip,\n} from '@mui/material';\nimport { Delete, Edit, Add } from '@mui/icons-material';\nimport baseUrl, { api } from '../Urls';\nimport { IonContent } from '@ionic/react';\nimport { ErrorMessage } from '@hookform/error-message';\nimport swal from 'sweetalert';\n\ntype CategoryTable = {\n    id: string;\n    name: string;\n    slug: string;\n    description: string;\n\n};\n\nconst Category: FC = () => {\n    const [category, setCategory] = useState([]);\n    const [categoryData, setCategoryData] = useState({});\n    const [modalOpen, setModalOpen] = useState(false);\n    const fetchCategory = () => {\n        fetch(`${baseUrl}${api.allCategory}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setCategory(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchCategory();\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<CategoryTable>[]>(\n        () => [\n\n            {\n                accessorKey: 'name',\n                header: 'Name',\n\n            },\n            {\n                accessorKey: 'slug',\n                header: 'Slug',\n\n            },\n            {\n                accessorKey: 'description',\n                header: 'Description',\n\n            },\n\n        ],\n        [],\n    );\n\n    const deleteCategory = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteCategory}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n\n                .then(res => {\n                    if (res.status === 200) {\n                        fetchCategory();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Category deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Category not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n                <h1 className='text-center mb-2'>List of Categories</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={category}\n                    getRowId={(row => `${row.id}`)}\n                    enableRowActions\n                    positionActionsColumn=\"last\"\n                    enableRowNumbers\n                    renderRowActions={({ row, table }) => (\n                        <Box sx={{ display: 'flex', gap: '1rem' }}>\n                            <Tooltip arrow placement=\"left\" title=\"Edit\">\n                                <IconButton onClick={() => {\n                                    setCategoryData(row.original)\n                                    setModalOpen(true);\n\n                                }}>\n                                    <Edit />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"right\" title=\"Delete\">\n                                <IconButton color=\"error\" onClick={() => deleteCategory(row.id)}>\n                                    <Delete />\n                                </IconButton>\n                            </Tooltip>\n                        </Box>\n                    )}\n                    renderTopToolbarCustomActions={() => (\n                        <Tooltip title=\"Add-category\">\n                            <IconButton onClick={() => setModalOpen(true)}>\n                                Create <Add />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                />\n                <CreateOrEdit\n                    open={modalOpen}\n                    onClose={() => {\n                        setModalOpen(false)\n                        setCategoryData({})\n\n                    }}\n                    fetchCategory={() => fetchCategory()}\n                    categoryData={categoryData}\n\n                />\n            </div>\n        </IonContent>\n\n    );\n\n};\n\nconst CreateOrEdit: FC<{\n    onClose: () => void;\n    fetchCategory: () => void;\n    open: boolean;\n    categoryData: any\n}> = (props) => {\n    const [error, setError] = useState('');\n    const type = Object.keys(props.categoryData).length == 0 ? \"C\" : \"E\";\n    const formRef = useRef<HTMLFormElement>(null);\n    const {\n        register,\n        reset,\n        handleSubmit,\n        formState: { errors },\n        setValue,\n        clearErrors,\n    } = useForm({\n        criteriaMode: \"all\",\n\n    });\n    const addCategory = (e: any) => {\n        {\n\n\n            fetch(`${baseUrl}${api.addCategory}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(e),\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n                        props.fetchCategory();\n                        props.onClose();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Category Created successfully\",\n                            icon: \"success\",\n                        });\n                    }\n                    else {\n                        throw Error([response.status, response.statusText].join(' '));\n                    }\n                })\n\n                .catch(error => console.log('error', error));\n\n        }\n    }\n    const updateCategory = (e: any) => {\n\n        fetch(`${baseUrl}${api.updateCategory}${e.id}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(e),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    props.fetchCategory();\n                    props.onClose();\n                    swal({\n                        title: \"Success!\",\n                        text: \"Category updated successfully\",\n                        icon: \"success\",\n                    });\n\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n\n    const makeSlug = (e: any) => {\n\n        let data = {\n            'name': e.target.value,\n        }\n        fetch(`${baseUrl}${api.categorySlug}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(data),\n        }).then(res => res.json())\n            .then((res) => {\n                setValue('slug', res)\n            })\n\n\n\n    }\n    const handleChange = (e: any) => {\n\n        const slg = e.target.value;\n\n        if (slg) {\n            fetch(`${baseUrl}${api.slugCheck}${slg}`, {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n            })\n                .then(resp => resp.json())\n                .then(res => {\n                    if (Object.keys(res).length != 0) {\n                        setError('Slug already exists')\n                    } else {\n                        setError('');\n                    }\n                })\n        }\n\n\n\n    }\n    const onSubmit = (e: any) => {\n\n        type === \"C\" ? addCategory(e) : updateCategory(e);\n    };\n    useEffect(() => {\n\n        {\n            type === \"E\" ?\n                reset({\n                    id: props.categoryData.id,\n                    name: props.categoryData.name,\n                    description: props.categoryData.description,\n\n                }) : reset({\n                    id: '',\n                    name: '',\n                    description: '',\n                    slug: '',\n                })\n        };\n    }, [props.categoryData]);\n\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle textAlign=\"center\">{type === \"C\" ? \"Create\" : \"Edit\"} Category</DialogTitle>\n            <DialogContent>\n                <form ref={formRef} onSubmit={handleSubmit(onSubmit)}>\n                    <Stack\n                        sx={{\n                            width: '100%',\n                            minWidth: { xs: '300px', sm: '360px', md: '400px' },\n\n                        }}\n                    >\n                        {type === 'C' ?\n                            <>\n                                <TextField sx={{ mt: 3 }}\n                                    type=\"text\"\n                                    label=\"Category Name\"\n                                    variant=\"filled\"\n                                    focused\n\n                                    {...register(\"name\", { required: \"Category Name Is Required\" })}\n                                    onBlur={(e: any) => {\n\n                                        setValue('name', e.target.value)\n                                        makeSlug(e)\n                                    }}\n                                />\n                                <p style={{ color: \"red\" }}>\n                                    <ErrorMessage errors={errors} name=\"name\" />\n                                </p>\n                                <TextField sx={{ mt: 3 }}\n                                    type=\"text\"\n                                    label=\"Category Slug\"\n                                    variant=\"filled\"\n                                    focused\n\n                                    {...register(\"slug\", { required: \"Slug Is Required\" })}\n                                    onChange={(e: any) => handleChange(e)}\n                                />\n                                <p style={{ color: \"red\" }}>\n                                    <ErrorMessage errors={errors} name=\"slug\" />\n                                </p>\n                                <p style={{ color: \"red\" }}>\n                                    {error ? error : ''}\n                                </p>\n                            </>\n                            : <>\n                                <TextField sx={{ mt: 3 }}\n                                    type=\"text\"\n                                    label=\"Category Name\"\n                                    variant=\"filled\"\n                                    focused\n\n                                    {...register(\"name\", { required: \"Category Name Is Required\" })}\n                                />\n                                <p style={{ color: \"red\" }}>\n                                    <ErrorMessage errors={errors} name=\"name\" />\n                                </p>\n\n\n                            </>}\n                        <TextField sx={{ mt: 3 }}\n                            type=\"text\"\n                            label=\"Description\"\n                            variant=\"filled\"\n                            focused\n                            multiline\n                            {...register(\"description\")}\n                        />\n\n                    </Stack>\n                    <DialogActions sx={{ p: '1.25rem' }}>\n                        <Button onClick={props.onClose}>Cancel</Button>\n                        <Button type=\"submit\">{type === \"C\" ? \"Create\" : \"Save\"}</Button>\n                    </DialogActions>\n                </form>\n            </DialogContent>\n\n        </Dialog>\n    );\n}\n\nexport default Category;","/home/shama/elearning/elearnf/src/pages/user/blog/Blog.tsx",["309","310","311","312","313","314","315","316","317","318","319"],[],"/home/shama/elearning/elearnf/src/pages/user/blog/CategoryBlog.tsx",["320","321","322","323","324","325","326"],[],"/home/shama/elearning/elearnf/src/pages/user/blog/Categories.tsx",[],[],"/home/shama/elearning/elearnf/src/pages/user/ucourse/PendingCourseEnrole.tsx",[],[],"/home/shama/elearning/elearnf/src/pages/user/ucourse/UserCourse.tsx",["327","328"],[],"\nimport {\n    IonContent,\n    IonRouterOutlet,\n} from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\nimport { Route, useParams, useLocation } from \"react-router\";\nimport ViewUserCourse from './ViewUserCourse';\nimport baseUrl, { api } from '../../Urls';\nimport QuizQuestion from './QuizQuestion';\nimport QuizResult from './QuizResult';\nimport ViewTopicArticle from './ViewTopicArticle';\nconst UserCourse: React.FC = () => {\n    type UserCourse = {\n        id: string;\n    };\n    const { id } = useParams<UserCourse>();\n    const [course_name, setCourse_name] = useState('');\n    const [courseId, setCourseId] = useState('');\n    const [quiz, setQuiz] = useState([]);\n    const [topic, setTopic] = useState([]);\n    useEffect(() => {\n        fetch(`${baseUrl}${api.viewCourse}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(result => {\n                setCourse_name(result.course_name)\n                setCourseId(result.id)\n                setQuiz(result.quiz)\n                setTopic(result.topic)\n                localStorage.setItem('course_id', result.id)\n            })\n\n    }, []);\n    return (\n        <IonContent >\n            <IonRouterOutlet >\n\n                <Route path=\"/dashboard/mycourse/:id\" exact>\n                    <ViewUserCourse quiz={quiz} topic={topic} course_name={course_name} courseId={courseId} />\n\n                </Route>\n\n                <Route path={`/dashboard/mycourse/${localStorage.getItem(\"course_id\")}/quiz/:id`} exact >\n                    <QuizQuestion courseId={courseId} />\n\n                </Route>\n                <Route path={`/dashboard/mycourse/${localStorage.getItem(\"course_id\")}/topic/:slug`} exact >\n                    <ViewTopicArticle />\n                </Route>\n                <Route path=\"/dashboard/mycourse/:id/quiz/result\" exact>\n                    <QuizResult courseId={courseId} />\n\n                </Route>\n\n\n            </IonRouterOutlet>\n        </IonContent>\n    )\n}\nexport default UserCourse;","/home/shama/elearning/elearnf/src/pages/user/ucourse/MyQuizResult.tsx",["329","330"],[],"import React, { FC, useMemo, useState, useEffect, useRef } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n} from 'material-react-table';\nimport baseUrl, { api } from '../../../pages/Urls';\nimport { IonContent } from '@ionic/react';\n\ntype GroupTable = {\n    id: string;\n    course_name: string;\n    quiz_name: string;\n    total_question: string;\n    total_point: string;\n\n};\n\nconst MyQuizResult: FC = () => {\n    const [result, setResult] = useState([]);\n\n    const fetchResult = () => {\n        fetch(`${baseUrl}${api.results}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setResult(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchResult();\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<GroupTable>[]>(\n        () => [\n\n            {\n                accessorKey: 'course_name',\n                header: 'Course Name',\n\n            },\n            {\n                accessorKey: 'quiz_name',\n                header: 'Quiz Name',\n\n            },\n            {\n                accessorKey: 'total_question',\n                header: 'Total Question',\n\n            },\n            {\n                accessorKey: 'total_point',\n                header: 'Total Points',\n\n            },\n\n        ],\n        [],\n    );\n\n\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n                <h1 className='text-center mb-2'>Quiz Results</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={result}\n                    getRowId={(row => `${row.id}`)}\n                    //enableRowActions\n                    positionActionsColumn=\"last\"\n                    enableRowNumbers\n\n                />\n\n            </div>\n        </IonContent>\n\n    );\n\n};\n\n\nexport default MyQuizResult;","/home/shama/elearning/elearnf/src/pages/admin/articles/TrashArticle.tsx",["331","332"],[],"import React, { FC, useMemo, useState, useEffect } from 'react';\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    IconButton,\n    Tooltip,\n} from '@mui/material';\nimport { Delete, Restore } from '@mui/icons-material';\nimport baseUrl, { api } from '../../../pages/Urls';\nimport { IonContent } from '@ionic/react';\nimport swal from 'sweetalert';\nimport { format } from 'date-fns';\ntype articleData = {\n    id: string;\n    name: string;\n    title: string;\n    slug: string;\n    date: string;\n    status: string;\n\n\n};\n\n//nested data is ok, see accessorKeys in ColumnDef below\n\n\nconst TrashArticle: FC = () => {\n    const [article, setArticle] = useState([]);\n    const fetchTrash = () => {\n        fetch(`${baseUrl}${api.trashArticle}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setArticle(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchTrash();\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<articleData>[]>(\n        () => [\n\n            {\n                accessorKey: 'name',\n                header: 'Created By',\n\n            },\n            {\n                accessorKey: 'title',\n                header: 'Title',\n\n            },\n            {\n                accessorKey: 'slug',\n                header: 'Slug',\n\n            },\n            {\n                accessorKey: 'status',\n                header: 'Status',\n                muiTableAccessorKeyProps: {\n\n                }\n            },\n            {\n                accessorFn: (row) => format(new Date(row.date), \"yyyy-MM-dd\"),\n                accessorKey: 'date',\n                header: 'Date',\n\n            },\n\n\n        ],\n        [],\n    );\n\n    const forceDelete = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.forceDelete}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n\n                .then(res => {\n                    if (res.status === 200) {\n                        fetchTrash();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Article deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText + \" - Article not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    const restore = (id: any) => {\n        if (window.confirm('Want to restore?')) {\n            fetch(`${baseUrl}${api.restoreArticle}${id}`, {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n\n                .then(res => {\n                    if (res.status === 200) {\n                        fetchTrash();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Article restored successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText + \" - Article not restored\",\n                            icon: \"error\",\n                        });\n                    }\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n                <h1 className='text-center mb-2'>List of Trash Articles</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={article}\n                    getRowId={(row => `${row.id}`)}\n                    enableRowActions\n                    positionActionsColumn=\"last\"\n                    enableRowNumbers\n                    enableColumnOrdering\n                    renderRowActions={({ row, table }) => (\n\n\n                        <Box sx={{ display: 'flex', gap: '1rem' }}>\n                            {(localStorage.getItem('role') == 'ar_staff2') ? '.......' :\n                                <>\n                                    <Tooltip arrow placement=\"left\" title=\"Restore\">\n                                        <IconButton onClick={() => restore(row.id)}>\n                                            <Restore />\n                                        </IconButton>\n                                    </Tooltip>\n                                    {(localStorage.getItem('role') == 'ar_mgmt') ?\n                                        <Tooltip arrow placement=\"right\" title=\"Delete\">\n                                            <IconButton color=\"error\" onClick={() => forceDelete(row.id)}>\n                                                <Delete />\n                                            </IconButton>\n                                        </Tooltip>\n                                        : ''}\n                                </>\n                            }\n\n                        </Box>\n\n\n                    )}\n\n                />\n\n            </div>\n        </IonContent>\n\n    );\n\n};\nexport default TrashArticle;","/home/shama/elearning/elearnf/src/pages/admin/media/Media.tsx",["333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357"],[],"/home/shama/elearning/elearnf/src/pages/admin/quiz/Course.tsx",["358"],[],"import React, { FC, useMemo, useState, useEffect } from 'react';\nimport {\n\n    IonButton,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonCardContent,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n\n} from \"@ionic/react\";\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    IconButton,\n    Tooltip,\n} from '@mui/material';\nimport { Delete, Edit, Add } from '@mui/icons-material';\nimport baseUrl, { api } from '../../../pages/Urls';\nimport { Collapse } from 'react-bootstrap';\nimport swal from 'sweetalert';\nimport Select from 'react-select';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\ntype CourseData = {\n    id: string;\n    course_name: string;\n    description: string;\n\n};\n\nconst schema = yup.object().shape({\n    course_name: yup.string()\n        .required('Course Name is required'),\n    crs_inst: yup.array().required().min(1),\n\n})\nconst Course: FC = () => {\n    const [course, setCourse] = useState([]);\n    const [instructor, setInstructor] = useState([]);\n    const [collapse, setCollapse] = useState(false);\n    const [crsId, setCrsId] = useState('');\n    const type = crsId ? \"E\" : \"C\";\n    const {\n        handleSubmit,\n        register,\n        formState: { errors },\n        reset,\n        control,\n        setValue,\n        clearErrors,\n        getValues\n    } = useForm({\n        defaultValues: {\n            id: '',\n            course_name: '',\n            description: '',\n            crs_inst: [{}],\n\n        },\n        resolver: yupResolver(schema),\n    });\n\n    const fetchCourse = () => {\n        fetch(`${baseUrl}${api.allCourse}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setCourse(resp.reverse())\n            })\n    }\n    const fetchInstructor = () => {\n        fetch(`${baseUrl}${api.allInstructor}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setInstructor(resp.map((item: any) => ({\n\n                    label: item.name + ' ( ' + item.email + ' ) ',\n\n                    value: item.id\n                })))\n            })\n    }\n    useEffect(() => {\n        fetchCourse();\n        fetchInstructor();\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<CourseData>[]>(\n        () => [\n\n            {\n                accessorKey: 'course_name',\n                header: 'Course Name',\n\n            },\n            {\n                accessorKey: 'description',\n                header: 'Description',\n\n            },\n\n        ],\n        [],\n    );\n    const editCourse = (id: any) => {\n        setCrsId(id);\n        fetch(`${baseUrl}${api.editCourse}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                setValue('course_name', result.course.course_name);\n                setValue('description', result.course.description);\n                setValue('id', result.course.id);\n\n                setValue('crs_inst',\n                    result.course.instructor.map((ins: any) => ({\n                        label: ins.name + ' ( ' + ins.email + ' ) ',\n                        value: ins.id\n                    })));\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n\n\n    }\n    const addCourse = (e: any) => {\n        {\n\n            fetch(`${baseUrl}${api.addCourse}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(e),\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n\n                        setCollapse(false)\n                        fetchCourse();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Course Created successfully\",\n                            icon: \"success\",\n                        });\n\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: response.status + ' ' + response.statusText + \" - Course not Created\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n\n                .catch(errors => console.log(errors.response.data.errors));\n\n        }\n    }\n    const updateCourse = (e: any) => {\n\n        fetch(`${baseUrl}${api.updateCourse}${e.id}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(e),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n\n                    fetchCourse();\n                    setCollapse(false)\n                    swal({\n                        title: \"Success!\",\n                        text: \"Course updated successfully\",\n                        icon: \"success\",\n                    });\n\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText + \" - Course not updated\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    const deleteCourse = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteCourse}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n\n                .then(res => {\n                    if (res.status === 200) {\n                        fetchCourse();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Course deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText + \" - Course not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    const onSubmit = (e: any) => {\n        type === \"C\" ? addCourse(e) : updateCourse(e);\n    }\n\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n                <Collapse in={collapse}>\n                    <div id=\"collapseID\">\n                        <div className=\"container mt-5 mb-5 \">\n\n                            <IonCard>\n                                <IonCardHeader>\n                                    <IonCardTitle>\n                                        <IonToolbar>\n                                            <IonTitle><h1 className=\"text-center display-6\">{type === \"C\" ? \"Create\" : \"Edit\"} Course</h1></IonTitle>\n                                        </IonToolbar>\n                                    </IonCardTitle>\n                                </IonCardHeader>\n                                <hr />\n                                <IonCardContent>\n                                    <form onSubmit={handleSubmit(onSubmit)}>\n                                        <IonItem>\n                                            <IonLabel position=\"stacked\">Course Name</IonLabel>\n                                            <IonInput\n                                                placeholder=\"Course Name\"\n                                                type=\"text\"\n                                                {...register(\"course_name\")}\n                                            ></IonInput>\n\n                                        </IonItem>\n                                        <p style={{ color: \"red\" }}>\n                                            <ErrorMessage errors={errors} name=\"course_name\" />\n                                        </p>\n\n                                        <IonItem>\n                                            <IonLabel position=\"stacked\">Description</IonLabel>\n                                            <IonInput type=\"text\"\n                                                placeholder=\"Course description\"\n\n                                                {...register(\"description\")}\n                                            >\n                                            </IonInput>\n                                        </IonItem>\n\n                                        <IonItem >\n                                            <IonLabel position=\"stacked\">Course Instructor</IonLabel>\n                                            <div className=\"mt-2\" style={{ width: '100%' }}>\n\n                                                <Controller\n                                                    control={control}\n                                                    name=\"crs_inst\"\n\n                                                    render={() => (\n                                                        <Select\n\n                                                            menuPortalTarget={document.body}\n                                                            options={instructor}\n                                                            placeholder={<i className=\"bi bi-search\"> Select Instructor</i>}\n                                                            value={getValues('crs_inst')}\n                                                            onChange={(e: any) => setValue('crs_inst', e)}\n                                                            isMulti\n\n                                                        />\n\n                                                    )}\n\n                                                />\n                                            </div>\n                                            {/* <IonSelect\n\n                                                {...register(\"crs_inst\", { required: \"Course Instructor Is Required\" })}\n\n                                                placeholder=\"Select instructors\" multiple={true}>\n                                                {instructor.map((item: any, i: any) => (\n                                                    < IonSelectOption key={i.toString()}>{item.name}</IonSelectOption>\n                                                ))}\n                                            </IonSelect> */}\n\n                                        </IonItem>\n                                        <p style={{ color: \"red\" }}>\n                                            <ErrorMessage errors={errors} name=\"crs_inst\" /></p>\n\n                                        <div style={{ marginTop: \"3%\" }} className=\"text-center mb-5\">\n                                            <IonButton color=\"danger\" onClick={() => setCollapse(false)}>\n                                                Cancel\n                                            </IonButton>\n                                            <IonButton color=\"primary\" type=\"submit\">\n                                                {type === \"C\" ? \"Create\" : \"Save\"}\n                                            </IonButton>\n\n                                        </div>\n                                    </form>\n                                </IonCardContent>\n                            </IonCard>\n\n                        </div>\n\n                    </div>\n                </Collapse>\n\n                <h1 className='text-center mb-2'>List of Courses</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={course}\n                    getRowId={(row => `${row.id}`)}\n                    enableRowActions\n                    positionActionsColumn=\"last\"\n                    enableRowNumbers\n                    enableColumnOrdering\n                    renderRowActions={({ row, table }) => (\n                        <Box sx={{ display: 'flex', gap: '1rem' }}>\n                            <Tooltip arrow placement=\"left\" title=\"Edit\" >\n                                <IconButton aria-expanded={collapse} aria-controls=\"collapseID\" onClick={() => {\n                                    editCourse(row.id)\n                                    setCollapse(!collapse)\n                                    clearErrors([\n                                        'course_name',\n                                        'description',\n                                        'crs_inst',\n\n                                    ])\n                                }}>\n\n                                    <Edit />\n                                </IconButton>\n                            </Tooltip>\n\n                            <Tooltip arrow placement=\"right\" title=\"Delete\">\n                                <IconButton color=\"error\" onClick={() => deleteCourse(row.id)}>\n                                    <Delete />\n                                </IconButton>\n                            </Tooltip>\n                        </Box>\n                    )}\n                    renderTopToolbarCustomActions={() => (\n                        <Tooltip title=\"Add-Course\">\n                            <IconButton aria-expanded={collapse} onClick={() => {\n                                setCollapse(!collapse)\n                                setCrsId('')\n                                reset({\n                                    course_name: '',\n                                    description: '',\n                                    crs_inst: [],\n\n                                })\n                            }}>\n                                Create <Add />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                />\n\n            </div>\n        </IonContent>\n\n    );\n\n};\n\n\n\nexport default Course;","/home/shama/elearning/elearnf/src/pages/admin/quiz/Topic.tsx",["359","360","361","362","363","364","365","366","367","368","369"],[],"import React, { FC, useMemo, useState, useEffect, useRef } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    TextField,\n    Tooltip,\n} from '@mui/material';\nimport { Delete, Edit, Add } from '@mui/icons-material';\nimport baseUrl, { api } from '../../../pages/Urls';\nimport { IonContent } from '@ionic/react';\nimport swal from 'sweetalert';\nimport { ErrorMessage } from \"@hookform/error-message\";\ntype Group = {\n    id: string;\n    topic_name: string;\n    course_name: string;\n\n};\n\n\nconst Topic: FC = () => {\n    const [topic, setTopic] = useState([]);\n    const [topicData, setTopicData] = useState({});\n    const [modalOpen, setModalOpen] = useState(false);\n    const fetchTopic = () => {\n        fetch(`${baseUrl}${api.allTopic}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setTopic(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchTopic();\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<Group>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'course_name',\n                header: 'Course Name',\n\n            },\n            {\n                accessorKey: 'topic_name',\n                header: 'Topic Name',\n\n            },\n\n        ],\n        [],\n    );\n\n    const deleteTopic = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteTopic}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n\n                .then(res => {\n                    if (res.status === 200) {\n                        fetchTopic();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Topic deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Topic not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n                <h1 className='text-center mb-2'>List of Topics</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={topic}\n                    getRowId={(row => `${row.id}`)}\n                    enableRowActions\n                    positionActionsColumn=\"last\"\n                    enableRowNumbers\n                    enableColumnOrdering\n                    renderRowActions={({ row, table }) => (\n                        <Box sx={{ display: 'flex', gap: '1rem' }}>\n                            <Tooltip arrow placement=\"left\" title=\"Edit\">\n                                <IconButton onClick={() => {\n                                    setTopicData(row.original)\n                                    setModalOpen(true);\n                                }}>\n                                    <Edit />\n                                </IconButton>\n                            </Tooltip>\n\n                            <Tooltip arrow placement=\"right\" title=\"Delete\">\n                                <IconButton color=\"error\" onClick={() => deleteTopic(row.id)}>\n                                    <Delete />\n                                </IconButton>\n                            </Tooltip>\n                        </Box>\n                    )}\n\n                />\n                <EditTopic\n                    open={modalOpen}\n                    onClose={() => {\n                        setModalOpen(false)\n\n                    }}\n                    fetchTopic={() => fetchTopic()}\n                    topicData={topicData}\n                />\n            </div>\n        </IonContent>\n\n    );\n\n};\n\nconst EditTopic: FC<{\n    onClose: () => void;\n    fetchTopic: () => void;\n    open: boolean;\n    topicData: any\n\n}> = (props) => {\n    const [topic_name, setTopic_name] = useState('');\n    const [error, setError] = useState(\"\");\n    const {\n        handleSubmit,\n        register,\n        formState: { errors },\n        reset,\n        control,\n        setValue,\n        clearErrors,\n        getValues\n    } = useForm({\n        defaultValues: {\n            id: '',\n            topic_name: '',\n\n\n        },\n\n    });\n\n    useEffect(() => {\n        setValue('topic_name', props.topicData.topic_name);\n        setValue('id', props.topicData.id);\n    }, [props.topicData])\n\n    const updateTopic = (e: any) => {\n\n        fetch(`${baseUrl}${api.updateTopic}${e.id}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(e),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    props.fetchTopic();\n                    props.onClose();\n                    swal({\n                        title: \"Success!\",\n                        text: \"Topic updated successfully\",\n                        icon: \"success\",\n                    });\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText +\n                            \" - Topic not updated\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    return (\n        <Dialog open={props.open}>\n            <form onSubmit={handleSubmit(updateTopic)}>\n                <DialogTitle textAlign=\"center\">Edit Topic</DialogTitle>\n                <DialogContent>\n\n                    <Stack\n                        sx={{\n                            width: '100%',\n                            minWidth: { xs: '300px', sm: '360px', md: '400px' },\n                            gap: '1.5rem',\n                        }}\n                    >\n\n                        <TextField sx={{ mt: 3 }}\n                            type=\"text\"\n                            label=\"Toppic Name\"\n                            variant=\"filled\"\n                            focused\n                            {...register(\"topic_name\", { required: 'Topic Name is required' })} />\n                        <p style={{ color: \"red\" }}>\n                            <ErrorMessage errors={errors} name=\"topic_name\" />\n                        </p>\n\n                    </Stack>\n\n                </DialogContent>\n                <DialogActions sx={{ p: '1.25rem' }}>\n                    <Button onClick={props.onClose}>Cancel</Button>\n                    <Button color=\"secondary\" variant=\"contained\" type='submit'>\n                        Save\n                    </Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n}\n\nexport default Topic;","/home/shama/elearning/elearnf/src/pages/admin/articles/Articles.tsx",["370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391"],[],"/home/shama/elearning/elearnf/src/pages/admin/quiz/Level.tsx",["392","393"],[],"import {\n\n    IonButton,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonCardContent,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonToolbar,\n    IonTitle,\n    IonContent\n\n} from \"@ionic/react\";\nimport React, { FC, useMemo, useState, useEffect, useRef } from 'react';\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    Tooltip,\n} from '@mui/material';\nimport { Delete, Edit, Visibility } from '@mui/icons-material';\nimport baseUrl, { api } from '../../../pages/Urls';\nimport { Collapse } from 'react-bootstrap'\nimport swal from 'sweetalert';\nimport Select from 'react-select';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\ntype leveldata = {\n    id: string;\n    course_name: string;\n    level_name: string;\n\n};\n\nconst schema = yup.object().shape({\n    level_name: yup.string()\n        .required('Course Name is required'),\n    ltopic: yup.array().required().min(1),\n\n})\nconst Level: FC = () => {\n    const [level, setLevel] = useState([]);\n    const [collapse, setCollapse] = useState(false);\n    const [modalOpen, setModalOpen] = useState(false);\n    const [ltopic, setLTopic] = useState([]);\n    const [level_name, setLevel_name] = useState('');\n    const [topicOptions, setTopicOptions] = useState([{}]);\n\n    const {\n        handleSubmit,\n        register,\n        formState: { errors },\n        reset,\n        control,\n        setValue,\n        clearErrors,\n        getValues\n    } = useForm({\n        defaultValues: {\n            id: '',\n            level_name: '',\n            ltopic: [{}],\n\n        },\n        resolver: yupResolver(schema),\n    });\n\n    const fetchlevel = () => {\n        fetch(`${baseUrl}${api.allLevel}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setLevel(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchlevel();\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<leveldata>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'course_name',\n                header: 'Course Name',\n\n            },\n\n            {\n                accessorKey: 'level_name',\n                header: 'Level Name',\n\n            },\n\n        ],\n        [],\n    );\n    const editLevel = (id: any) => {\n\n        fetch(`${baseUrl}${api.showLevel}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                setValue('level_name', result.level.level_name);\n                setValue('id', result.level.id);\n                setValue('ltopic',\n\n                    result.level.ltopic.map((lt: any) => ({\n                        label: lt.topic_name,\n                        value: lt.topic_name\n                    }))\n\n                );\n                setTopicOptions(result.topic.map((item: any) => ({\n                    label: item.topic_name,\n                    value: item.topic_name\n                })));\n                setLevel_name(result.level.level_name);\n                setLTopic(\n\n                    result.level.ltopic.map((lt: any) => (lt.topic_name))\n\n                );\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n\n\n    }\n    const updateLevel = (e: any) => {\n\n        fetch(`${baseUrl}${api.updateLevel}${e.id}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(e),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    fetchlevel();\n                    setCollapse(false);\n                    swal({\n                        title: \"Success!\",\n                        text: \"Level updated successfully\",\n                        icon: \"success\",\n                    });\n\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText +\n                            \" - Level not updated\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    const deleteLevel = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteLevel}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n\n\n                .then(res => {\n                    if (res.status === 200) {\n                        fetchlevel();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Level deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Topic not updated\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n                <Collapse in={collapse}>\n                    <div id=\"collapseID\">\n                        <div className=\"container mt-5 mb-5 \">\n\n                            <IonCard>\n                                <IonCardHeader>\n                                    <IonCardTitle>\n                                        <IonToolbar>\n                                            <IonTitle><h1 className=\"text-center display-6\">Edit Level</h1></IonTitle>\n                                        </IonToolbar>\n                                    </IonCardTitle>\n                                </IonCardHeader>\n                                <hr />\n                                <IonCardContent>\n                                    <form onSubmit={handleSubmit(updateLevel)}>\n                                        <IonItem>\n                                            <IonLabel position=\"stacked\">Level Name</IonLabel>\n                                            <IonInput\n                                                placeholder=\"level Name\"\n                                                type=\"text\"\n                                                {...register(\"level_name\", { required: \"Level Name Is Required\" })}\n                                            >\n                                            </IonInput>\n                                        </IonItem>\n                                        <p style={{ color: \"red\" }}>\n                                            <ErrorMessage errors={errors} name=\"level_name\" />\n                                        </p>\n                                        <IonItem>\n                                            <IonLabel position=\"stacked\">Topic</IonLabel>\n                                            <div className=\"mt-2\" style={{ width: '100%' }}>\n\n                                                <Controller\n                                                    control={control}\n                                                    name=\"ltopic\"\n\n                                                    render={() => (\n                                                        <Select\n\n                                                            menuPortalTarget={document.body}\n                                                            options={topicOptions}\n                                                            placeholder={<i className=\"bi bi-search\"> Select Topic</i>}\n                                                            value={getValues('ltopic')}\n                                                            onChange={(e: any) => setValue('ltopic', e)}\n                                                            isMulti\n\n                                                        />\n\n                                                    )}\n\n                                                />\n                                            </div>\n\n\n                                        </IonItem>\n\n                                        <p style={{ color: \"red\" }}>\n                                            <ErrorMessage errors={errors} name=\"ltopic\" /></p>\n\n                                        <div style={{ marginTop: \"3%\" }} className=\"text-center mb-5\">\n                                            <IonButton color=\"danger\" onClick={() => setCollapse(false)}>\n                                                Cancel\n                                            </IonButton>\n                                            <IonButton color=\"primary\" type=\"submit\">\n                                                Save\n                                            </IonButton>\n\n                                        </div>\n                                    </form>\n                                </IonCardContent>\n                            </IonCard>\n\n                        </div>\n\n                    </div>\n                </Collapse>\n                <h1 className='text-center mb-2'>List of Levels</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={level}\n                    getRowId={(row => `${row.id}`)}\n                    enableRowActions\n                    positionActionsColumn=\"last\"\n                    enableRowNumbers\n                    enableColumnOrdering\n                    renderRowActions={({ row, table }) => (\n                        <Box sx={{ display: 'flex', gap: '1rem' }}>\n                            <Tooltip arrow placement=\"left\" title=\"Edit\">\n                                <IconButton onClick={() => {\n                                    editLevel(row.id)\n                                    setCollapse(!collapse)\n                                    clearErrors([\n                                        'level_name',\n                                        'ltopic',\n\n                                    ])\n                                }}>\n                                    <Edit />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"left\" title=\"View\" >\n                                <IconButton onClick={() => {\n                                    editLevel(row.id)\n                                    setModalOpen(true);\n\n                                }}>\n\n                                    <Visibility />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"right\" title=\"Delete\">\n                                <IconButton color=\"error\" onClick={() => deleteLevel(row.id)}>\n                                    <Delete />\n                                </IconButton>\n                            </Tooltip>\n                        </Box>\n                    )}\n\n                />\n                <ViewLevel\n                    open={modalOpen}\n                    onClose={() => {\n                        setModalOpen(false)\n\n                    }}\n                    level_name={level_name}\n                    level_topic={ltopic}\n                />\n            </div>\n        </IonContent>\n\n    );\n\n};\n\n\nconst ViewLevel: FC<{\n    onClose: () => void;\n\n    open: boolean;\n    level_name: string;\n    level_topic: any\n\n}> = (props) => {\n\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle textAlign=\"center\">View Level</DialogTitle>\n            <DialogContent>\n                <Stack\n                    sx={{\n                        width: '100%',\n                        minWidth: { xs: '300px', sm: '360px', md: '400px' },\n                        //gap: '1.5rem',\n                    }}\n                >\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Level Name</h2>\n                            <p>{props.level_name}</p>\n                        </IonLabel>\n                    </IonItem>\n                    <IonItem >\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Level Topics</h2>\n                            {props.level_topic.map((item: any, i: any) =>\n                                <p className=\"mt-3\" key={i}> {i + 1}. {item}</p>\n                            )}\n                        </IonLabel>\n                    </IonItem>\n\n\n                </Stack>\n\n            </DialogContent>\n            <DialogActions sx={{ p: '1.25rem' }}>\n                <Button onClick={props.onClose}>Cancel</Button>\n\n            </DialogActions>\n        </Dialog>\n    );\n}\nexport default Level;","/home/shama/elearning/elearnf/src/pages/admin/quiz/Quiz.tsx",["394","395","396"],[],"import {\n\n    IonButton,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonCardContent,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonText,\n    IonCol, IonGrid, IonRow,\n} from \"@ionic/react\";\nimport React, { FC, useMemo, useState, useEffect } from 'react';\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    Tooltip,\n    FormControl,\n    NativeSelect,\n} from '@mui/material';\nimport { Delete, Edit, Visibility } from '@mui/icons-material';\nimport baseUrl, { api } from '../../../pages/Urls';\nimport { Collapse } from 'react-bootstrap'\nimport { format } from 'date-fns';\nimport swal from 'sweetalert';\nimport Select from 'react-select';\nimport { useForm, Controller, useFieldArray } from \"react-hook-form\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\nimport { TextField } from \"@mui/material\";\nimport { DateTimePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\ntype quizData = {\n    id: string,\n    course_name: string,\n    quiz_name: string,\n    status: string,\n    start_date: Date\n    test_time: any\n\n\n\n};\n\n\nconst Quiz: FC = () => {\n    const [quiz, setQuiz] = useState([]);\n    const [id, setId] = useState('');\n    const [showQuiz, setShowQuiz] = useState([]);\n    const [quizData, setQuizData] = useState({});\n    const [qerror, setQError] = useState('');\n    const [modalOpen, setModalOpen] = useState(false);\n    const [levelOptions, setLevelOptions] = useState([]);\n    const [collapse, setCollapse] = useState(false);\n    const [start_date, setStart_date] = useState(format(new Date(), \"yyyy-MM-dd HH:mm:ss\"));\n    const [end_date, setEnd_date] = useState(format(new Date(), \"yyyy-MM-dd HH:mm:ss\"));\n    const {\n        handleSubmit,\n        register,\n        formState: { errors },\n        reset,\n        control,\n        setValue,\n        clearErrors,\n        getValues\n    } = useForm({\n        defaultValues: {\n            id: '',\n            quiz_name: '',\n            test_time: '',\n            status: '',\n            inputlist: [{ level_name: '', qcount: '' }],\n            start_date: format(new Date(), \"yyyy-MM-dd HH:mm\"),\n\n        }\n    });\n    const { fields, remove, append } = useFieldArray({\n        name: 'inputlist',\n        control,\n    });\n\n\n\n    const fetchQuiz = () => {\n        fetch(`${baseUrl}${api.allQuiz}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setQuiz(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchQuiz();\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<quizData>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'course_name',\n                header: 'Course Name',\n\n            },\n            {\n                accessorKey: 'quiz_name',\n                header: 'Quiz Name',\n\n            },\n            {\n                accessorKey: 'test_time',\n                header: 'Duration (Minutes)',\n\n            },\n            {\n                accessorKey: 'status',\n                header: 'Status',\n                Cell: ({ cell }) => (\n                    cell.getValue<string>() === \"P\" ?\n                        'Publish' : 'Draft'\n                ),\n            },\n            {\n                accessorFn: (row) => format(new Date(row.start_date), \"yyyy-MM-dd HH:mm:ss\"),\n                accessorKey: 'start_date',\n                header: 'Start Date',\n\n            },\n\n\n        ],\n        [],\n    );\n\n\n    const editQuiz = (id: any) => {\n\n        fetch(`${baseUrl}${api.showQuiz}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                setLevelOptions(result.level.map((item: any) => ({\n                    label: item.level_name,\n                    value: item.level_name\n                })));\n                //setId(result.quiz.id)\n                setStart_date(result.quiz.start_date);\n                setEnd_date(result.quiz.test_end);\n                setShowQuiz(result.quiz.qlevel);\n                setValue('quiz_name', result.quiz.quiz_name);\n                setValue('status', result.quiz.status);\n                setValue('start_date', result.quiz.start_date);\n                setValue('test_time', result.quiz.test_time);\n                setValue('id', result.quiz.id)\n                setValue('inputlist',\n                    result.quiz.qlevel.map((item: any, i: any) => ({\n                        level_name: {\n                            label: item.level_name,\n                            value: item.level_name,\n                        },\n                        qcount: item.qcount\n\n                    }))\n                );\n\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n\n\n    }\n    const updateQuiz = (e: any) => {\n\n        fetch(`${baseUrl}${api.updateQuiz}${e.id}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(e),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    fetchQuiz();\n                    setCollapse(false)\n                    swal({\n                        title: \"Success!\",\n                        text: \"Quiz updated successfully\",\n                        icon: \"success\",\n                    });\n                } else if (res.status === 400) {\n                    setQError('Question Number out of range')\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText +\n                            \" - Quiz not updated\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    const deleteQuiz = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteQuiz}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n\n                .then(res => {\n                    if (res.status === 200) {\n                        fetchQuiz();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Quiz deteled successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Quiz not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n\n                <Collapse in={collapse}>\n                    <div id=\"collapseID\">\n                        <div className=\"container mt-5 mb-5 \">\n\n                            <IonCard>\n                                <IonCardHeader>\n                                    <IonCardTitle>\n                                        <IonToolbar>\n                                            <IonTitle><h1 className=\"text-center display-6\">Edit Quiz</h1></IonTitle>\n                                        </IonToolbar>\n                                    </IonCardTitle>\n                                </IonCardHeader>\n                                <hr />\n                                <IonCardContent>\n                                    <form onSubmit={handleSubmit(updateQuiz)}>\n                                        <IonItem>\n                                            <IonLabel position=\"stacked\">Quiz Name</IonLabel>\n                                            <IonInput placeholder=\"quiz name\"\n                                                type=\"text\"\n                                                {...register(\"quiz_name\", { required: \"Quiz Name Is Required\" })}\n                                            >\n                                            </IonInput>\n                                        </IonItem>\n                                        <p style={{ color: \"red\" }}>\n                                            <ErrorMessage errors={errors} name=\"quiz_name\" />\n                                        </p>\n                                        <IonItem>\n                                            <IonText color=\"primary\">\n                                                <h2 className=\"mt-3 mb-3\">Add Quiz Level</h2>\n                                            </IonText>\n\n                                        </IonItem>\n\n                                        <div>\n\n                                            {\n                                                fields.map((x, i) => {\n\n                                                    return (\n                                                        <div key={i.toString()} className=\"mb-3 mt-3\">\n                                                            <IonGrid>\n                                                                <IonRow>\n                                                                    <IonCol size=\"7\">\n                                                                        <IonItem>\n                                                                            <IonLabel position=\"stacked\">Level</IonLabel>\n                                                                            <div className=\"mt-2\" style={{ width: '100%' }}>\n\n                                                                                <Controller\n                                                                                    control={control}\n                                                                                    name={`inputlist.${i}.level_name`}\n                                                                                    rules={{\n                                                                                        required: 'Level name is required',\n                                                                                    }}\n                                                                                    render={() => (\n                                                                                        <Select\n\n                                                                                            menuPortalTarget={document.body}\n                                                                                            options={levelOptions}\n                                                                                            placeholder={<i className=\"bi bi-search\"> Select Level</i>}\n                                                                                            value={getValues(`inputlist.${i}.level_name`)}\n                                                                                            onChange={(e: any) => setValue(`inputlist.${i}.level_name`, e)}\n\n\n                                                                                        />\n\n                                                                                    )}\n\n                                                                                />\n                                                                            </div>\n\n                                                                        </IonItem>\n                                                                        <p style={{ color: \"red\" }}>\n                                                                            <ErrorMessage errors={errors} name={`inputlist.${i}.level_name`} />\n                                                                        </p>\n                                                                    </IonCol>\n                                                                    <IonCol size=\"3\">\n                                                                        <IonItem>\n                                                                            <IonLabel position=\"stacked\">No of Question</IonLabel>\n                                                                            <IonInput type=\"number\"\n                                                                                min={1}\n                                                                                step='1'\n                                                                                value={getValues(`inputlist.${i}.qcount`)}\n                                                                                {...register(`inputlist.${i}.qcount`, { required: \"Question No Is Required\" })}\n                                                                            >\n                                                                            </IonInput>\n                                                                        </IonItem>\n                                                                        <p style={{ color: \"red\" }}>\n                                                                            <ErrorMessage errors={errors} name={`inputlist.${i}.qcount`} />\n                                                                        </p>\n                                                                    </IonCol>\n                                                                    <IonCol>\n                                                                        <div className=\"mt-4\">\n                                                                            {\n                                                                                fields.length !== 1 &&\n                                                                                <button onClick={() => remove(i)}>X</button>\n                                                                            }\n                                                                            {\n                                                                                fields.length - 1 === i &&\n                                                                                <button className=\"mx-3 \" onClick={() => append({ level_name: '', qcount: '' })}>\n                                                                                    <i className=\"bi bi-plus-circle-fill\" title=\"add-option\"></i>\n                                                                                </button>\n                                                                            }\n                                                                        </div>\n                                                                    </IonCol>\n                                                                </IonRow>\n                                                            </IonGrid>\n\n                                                        </div>\n                                                    );\n                                                })}\n\n                                        </div>\n                                        <p className=\"text-center\" style={{ color: \"red\" }}>\n\n                                            {qerror}\n                                        </p>\n\n                                        <IonItem>\n                                            <IonLabel position=\"stacked\">Status</IonLabel>\n                                            <Box sx={{ width: '100%' }}>\n                                                <FormControl fullWidth sx={{ mt: 1 }}>\n                                                    <NativeSelect\n                                                        {...register(\"status\", { required: \"Status Is Required\" })}\n\n                                                    >\n                                                        <option value='P'>Publish</option>\n                                                        <option value='D'>Draft</option>\n\n\n                                                    </NativeSelect>\n                                                </FormControl>\n                                            </Box>\n\n                                        </IonItem>\n                                        <p style={{ color: \"red\" }}>\n                                            <ErrorMessage errors={errors} name=\"status\" />\n                                        </p>\n                                        <IonItem>\n                                            <IonLabel position=\"stacked\">Duration (Minutes)</IonLabel>\n\n                                            <IonInput type=\"number\"\n                                                min={1}\n                                                step='1'\n                                                {...register(\"test_time\", { required: \"Duration Is Required\" })}\n\n                                            >\n                                            </IonInput>\n                                        </IonItem>\n                                        <p style={{ color: \"red\" }}>\n                                            <ErrorMessage errors={errors} name=\"test_time\" />\n                                        </p>\n                                        <IonItem >\n                                            <IonLabel position=\"floating\">Quiz Start </IonLabel>\n                                            <Controller\n                                                name=\"start_date\"\n                                                control={control}\n                                                rules={{\n                                                    required: 'Date is required',\n                                                }}\n                                                defaultValue={format(new Date(), \"yyyy-MM-dd HH:mm\")}\n                                                render={({ field: { ...rest } }) => (\n                                                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                                        <DateTimePicker\n\n                                                            inputFormat=\"yyyy-MM-dd HH:mm\"\n\n                                                            value={rest.value}\n                                                            onChange={(e: any) => {\n                                                                setValue(\"start_date\", format(e, \"yyyy-MM-dd HH:mm\"));\n\n                                                            }}\n                                                            renderInput={(params) => (\n                                                                <TextField {...params} sx={{ mt: 3, width: '100%' }} />\n                                                            )}\n                                                        />\n                                                    </LocalizationProvider>\n                                                )}\n                                            />\n                                        </IonItem>\n                                        <p style={{ color: \"red\" }}>\n                                            <ErrorMessage errors={errors} name=\"start_date\" />\n                                        </p>\n                                        <div style={{ marginTop: \"3%\" }} className=\"text-center mb-5\">\n                                            <IonButton color=\"danger\" onClick={() => setCollapse(false)}>\n                                                Cancel\n                                            </IonButton>\n                                            <IonButton color=\"primary\" type=\"submit\">\n                                                Save\n                                            </IonButton>\n\n                                        </div>\n                                    </form>\n                                </IonCardContent>\n                            </IonCard>\n\n                        </div>\n\n                    </div>\n                </Collapse>\n                <h1 className='text-center mb-2'>List of Quiz</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={quiz}\n                    getRowId={(row => `${row.id}`)}\n                    enableRowActions\n                    positionActionsColumn=\"last\"\n                    enableRowNumbers\n                    enableColumnOrdering\n                    renderRowActions={({ row, table }) => (\n                        <Box sx={{ display: 'flex', gap: '1rem' }}>\n                            <Tooltip arrow placement=\"left\" title=\"Edit\" >\n                                <IconButton aria-expanded={collapse} aria-controls=\"collapseID\" onClick={() => {\n                                    editQuiz(row.id)\n                                    setCollapse(!collapse)\n                                    setQError('')\n                                    clearErrors([\n                                        'quiz_name',\n                                        'test_time',\n                                        'status',\n                                        'inputlist',\n                                        'start_date',\n\n                                    ])\n                                }}>\n\n                                    <Edit />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"left\" title=\"View\" >\n                                <IconButton onClick={() => {\n                                    editQuiz(row.id)\n                                    setModalOpen(true);\n                                    setQuizData(row.original)\n                                }}>\n\n                                    <Visibility />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"right\" title=\"Delete\">\n                                <IconButton color=\"error\" onClick={() => deleteQuiz(row.id)}>\n                                    <Delete />\n                                </IconButton>\n                            </Tooltip>\n                        </Box>\n                    )}\n\n                />\n                <ViewQuiz\n                    open={modalOpen}\n                    onClose={() => {\n                        setModalOpen(false)\n\n                    }}\n                    showQuiz={showQuiz}\n                    quizData={quizData}\n                    test_start={format(new Date(start_date), \"yyyy-MM-dd HH:mm:ss\")}\n                    test_end={format(new Date(end_date), \"yyyy-MM-dd HH:mm:ss\")}\n                />\n            </div>\n        </IonContent>\n\n    );\n\n};\nconst ViewQuiz: FC<{\n    onClose: () => void;\n\n    open: boolean;\n    quizData: any;\n    showQuiz: any;\n    test_start: any;\n    test_end: any;\n\n}> = (props) => {\n\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle textAlign=\"center\">View Quiz</DialogTitle>\n            <DialogContent>\n                <Stack\n                    sx={{\n                        width: '100%',\n                        minWidth: { xs: '300px', sm: '360px', md: '400px' },\n                        //gap: '1.5rem',\n                    }}\n                >\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Course Name</h2>\n                            <p>{props.quizData.course_name}</p>\n                        </IonLabel>\n                    </IonItem>\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Quiz Name</h2>\n                            <p>{props.quizData.quiz_name}</p>\n                        </IonLabel>\n                    </IonItem>\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Quiz Start</h2>\n                            <p>{props.test_start}</p>\n\n                        </IonLabel>\n                    </IonItem>\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Quiz End</h2>\n                            <p>{props.test_end}</p>\n                        </IonLabel>\n                    </IonItem>\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Quiz Duration</h2>\n                            <p>{props.quizData.test_time} Minutes</p>\n                        </IonLabel>\n                    </IonItem>\n\n\n                    <IonItem >\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Quiz Level and Question</h2>\n                            {props.showQuiz.map((item: any, i: any) =>\n                                <p className=\"mt-3\" key={i}> {item.level_name} | {item.qcount}</p>\n                            )}\n                        </IonLabel>\n                    </IonItem>\n\n\n                </Stack>\n\n            </DialogContent>\n            <DialogActions sx={{ p: '1.25rem' }}>\n                <Button onClick={props.onClose}>Cancel</Button>\n\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nexport default Quiz;\n","/home/shama/elearning/elearnf/src/pages/admin/quiz/Question.tsx",["397","398","399","400","401","402","403","404","405","406","407","408","409","410"],[],"import {\n\n    IonButton,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonCardContent,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonSelect,\n    IonSelectOption,\n    IonText,\n\n} from \"@ionic/react\";\nimport React, { FC, useMemo, useState, useEffect, useRef } from 'react';\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    Tooltip,\n} from '@mui/material';\nimport { Delete, Edit, Visibility } from '@mui/icons-material';\nimport baseUrl, { api } from '../../../pages/Urls';\nimport { Editor } from '@tinymce/tinymce-react';\nimport { Collapse } from 'react-bootstrap';\nimport swal from 'sweetalert';\ntype questionData = {\n    id: string;\n    course_name: string;\n    topic_name: string;\n    level_name: string;\n    title: string;\n    question_type: string;\n    answer: string;\n\n};\n\n\n\nconst Question: FC = () => {\n    const [questions, setQuestions] = useState([]);\n    const [question, setQuestion] = useState('');\n    const [q_content, setQContent] = useState('');\n    const [questionType, setQuestionType] = useState('');\n    const [answer, setAnswer] = useState('');\n    //const [option, setOption]: any[] = useState([]);\n    const [id, setId] = useState('');\n    const [error, setError] = useState(\"\");\n    const [open, setOpen] = useState(false);\n    const [questionData, setQuestionData] = useState({});\n    const [modalOpen, setModalOpen] = useState(false);\n    const [inputList, setinputList] = useState([{ option: '' }]);\n    const handleinputchange = (e: any, index: any) => {\n        const { name, value } = e.target;\n        const list: any[] = [...inputList];\n        list[index][name] = value;\n        setinputList(list);\n\n\n    }\n    const handleaddclick = () => {\n\n        const abc = [...inputList, { option: '' }]\n\n        setinputList(abc);\n    }\n    const handleremove = (index: any) => {\n        const list = [...inputList];\n        list.splice(index, 1);\n        setinputList(list);\n    }\n    const fetchQuestions = () => {\n        fetch(`${baseUrl}${api.allQuestion}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setQuestions(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchQuestions();\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<questionData>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'course_name',\n                header: 'Course Name',\n\n            },\n            {\n                accessorKey: 'topic_name',\n                header: 'Topic Name',\n\n            },\n            {\n                accessorKey: 'level_name',\n                header: 'Level Name',\n\n            },\n            {\n                accessorKey: 'title',\n                header: 'Question',\n\n            },\n\n            {\n                accessorKey: 'question_type',\n                header: 'Question Type',\n                Cell: ({ cell }) => (\n                    cell.getValue<string>() === \"SQ\" && 'Short Question' ||\n                    cell.getValue<string>() === \"MCQ\" && 'MCQ'\n\n                ),\n\n            },\n\n            {\n                accessorKey: 'answer',\n                header: 'Question Answer',\n\n            },\n\n        ],\n        [],\n    );\n\n\n    const editQuestion = (id: any) => {\n\n        fetch(`${baseUrl}${api.showQuestion}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                setQuestion(result.qstn.title);\n                setQContent(result.qstn.q_content);\n                setQuestionType(result.qstn.question_type);\n                setAnswer(result.qstn.answer);\n                let levelList: any[] = [];\n                {\n                    result.qstn.option.map((item: any, i: any) =>\n                        levelList.push({\n                            option: item.option,\n\n                        })\n                    )\n                }\n                setinputList([...levelList]);\n                setId(result.qstn.id);\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n\n\n    }\n    const updateQuestion = () => {\n        let data = {\n            'title': question,\n            'q_content': q_content,\n            'option': inputList,\n            'answer': answer,\n        }\n        fetch(`${baseUrl}${api.updateQuestion}${id}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(data),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    fetchQuestions();\n                    setOpen(false)\n                    swal({\n                        title: \"Success!\",\n                        text: \"Question updated successfully\",\n                        icon: \"success\",\n                    });\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText +\n                            \" - Question not updated\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    const deleteQuestion = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteQuestion}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n                .then(res => {\n                    if (res.status === 200) {\n                        fetchQuestions();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Question deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Question not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n\n\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n\n                <Collapse in={open}>\n                    <div id=\"collapseID\">\n                        <div className=\"container mt-5 mb-5 \">\n\n                            <IonCard>\n                                <IonCardHeader>\n                                    <IonCardTitle>\n                                        <IonToolbar>\n                                            <IonTitle><h1 className=\"text-center display-6\">Edit Question</h1></IonTitle>\n                                        </IonToolbar>\n                                    </IonCardTitle>\n                                </IonCardHeader>\n                                <hr />\n                                <IonCardContent>\n\n                                    <IonItem>\n                                        <IonLabel position=\"stacked\">Question</IonLabel>\n                                        <IonInput type=\"text\"\n                                            name=\"title\"\n                                            value={question}\n                                            onIonChange={(e: any) => setQuestion(e.target.value)}\n                                            clearInput></IonInput>\n                                    </IonItem>\n                                    <IonItem>\n                                        <IonLabel position=\"stacked\" >Content</IonLabel>\n                                        <div style={{ marginTop: \"3%\", marginBottom: \"3%\" }}>\n                                            <Editor\n                                                textareaName=\"content\"\n                                                value={q_content}\n                                                onEditorChange={(content: any, editor: any) => setQContent(content)}\n                                                init={{\n                                                    height: 500,\n                                                    width: 1030,\n                                                    menubar: true,\n                                                    plugins: [\n\n                                                        'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',\n                                                        'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',\n                                                        'insertdatetime', 'media', 'table', 'code', 'help', 'wordcount'\n\n                                                    ],\n\n                                                    toolbar: 'undo redo | blocks | ' +\n                                                        'bold italic forecolor | alignleft aligncenter ' +\n                                                        'alignright alignjustify | bullist numlist outdent indent | ' +\n                                                        'removeformat | help',\n                                                    content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\n                                                }}\n                                            />\n                                        </div>\n\n                                    </IonItem>\n\n                                    {questionType === 'MCQ' ?\n                                        <>\n                                            <IonItem>\n                                                <IonText color=\"primary\">\n                                                    <h2 className=\"mt-3 mb-3\">Add Question Option</h2>\n                                                </IonText>\n\n                                            </IonItem>\n                                            <IonItem>\n\n                                                <div>\n\n                                                    {\n                                                        inputList.map((x, i) => {\n\n                                                            return (\n                                                                <div key={i.toString()} className=\"row mb-3 mt-3\">\n                                                                    <div className=\" col-md-1\">\n                                                                        <input className=\"mx-2 mt-4\"\n                                                                            type=\"radio\"\n                                                                            name=\"is_answer\"\n                                                                            value={x.option}\n                                                                            checked={x.option === answer}\n                                                                            onChange={(e: any) => {\n                                                                                setAnswer(e.target.value)\n\n                                                                            }}\n                                                                        />\n                                                                    </div>\n                                                                    <div className=\" col-md-6\">\n                                                                        <IonItem>\n                                                                            <IonLabel position=\"stacked\">Option</IonLabel>\n                                                                            <IonInput type=\"text\"\n                                                                                name=\"option\"\n                                                                                value={x.option}\n\n                                                                                required\n                                                                                clearInput\n                                                                                onIonChange={(e: any) => handleinputchange(e, i)}\n                                                                            >\n                                                                            </IonInput>\n                                                                        </IonItem>\n                                                                    </div>\n                                                                    <div className=\"col-md-3 mt-4\">\n                                                                        {\n                                                                            inputList.length !== 1 &&\n                                                                            <button onClick={() => handleremove(i)}>X</button>\n                                                                        }\n                                                                        {\n                                                                            inputList.length - 1 === i &&\n                                                                            <button onClick={() => handleaddclick()} className=\"mx-3 \">\n                                                                                <i className=\"bi bi-plus-circle-fill\" title=\"add-option\"></i>\n                                                                            </button>\n                                                                        }\n\n                                                                    </div>\n\n\n\n                                                                </div>\n                                                            );\n                                                        })}\n\n                                                </div>\n\n                                            </IonItem>\n                                        </>\n                                        :\n                                        <IonItem>\n                                            <IonLabel position=\"stacked\">Answer</IonLabel>\n                                            <IonInput type=\"text\"\n                                                name=\"answer\"\n                                                placeholder=\"ans...\"\n                                                value={answer}\n                                                onIonChange={(e: any) => setAnswer(e.target.value)}\n                                                clearInput></IonInput>\n                                        </IonItem>\n                                    }\n                                    <hr />\n                                    <div style={{ marginTop: \"3%\" }} className=\"text-center mb-5\">\n                                        <IonButton color=\"danger\" onClick={() => setOpen(false)}>\n                                            Cancel\n                                        </IonButton>\n                                        <IonButton color=\"primary\" onClick={updateQuestion}>\n                                            Save\n                                        </IonButton>\n\n                                    </div>\n                                </IonCardContent>\n                            </IonCard>\n\n                        </div>\n\n                    </div>\n                </Collapse>\n                <h1 className='text-center mb-2'>List of Questions</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={questions}\n                    getRowId={(row => `${row.id}`)}\n                    enableRowActions\n                    positionActionsColumn=\"last\"\n                    enableRowNumbers\n                    enableColumnOrdering\n                    renderRowActions={({ row, table }) => (\n                        <Box sx={{ display: 'flex', gap: '1rem' }}>\n                            <Tooltip arrow placement=\"left\" title=\"Edit\" >\n                                <IconButton aria-expanded={open} aria-controls=\"collapseID\" onClick={() => {\n                                    editQuestion(row.id)\n                                    setOpen(!open)\n\n                                }}>\n\n                                    <Edit />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"left\" title=\"View\" >\n                                <IconButton onClick={() => {\n                                    editQuestion(row.id)\n                                    setModalOpen(true);\n                                    setQuestionData(row.original)\n                                }}>\n\n                                    <Visibility />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"right\" title=\"Delete\">\n                                <IconButton color=\"error\" onClick={() => deleteQuestion(row.id)}>\n                                    <Delete />\n                                </IconButton>\n                            </Tooltip>\n                        </Box>\n                    )}\n\n                />\n                <ViewQuestion\n                    open={modalOpen}\n                    onClose={() => {\n                        setModalOpen(false)\n\n                    }}\n                    option={inputList}\n                    questionData={questionData}\n                />\n            </div>\n        </IonContent>\n\n    );\n\n};\n\nconst ViewQuestion: FC<{\n    onClose: () => void;\n\n    open: boolean;\n    questionData: any;\n    option: any\n\n}> = (props) => {\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle textAlign=\"center\">View Question</DialogTitle>\n            <DialogContent>\n                <Stack\n                    sx={{\n                        width: '100%',\n                        minWidth: { xs: '300px', sm: '360px', md: '400px' },\n                        //gap: '1.5rem',\n                    }}\n                >\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Question Type</h2>\n                            <p>\n                                {props.questionData.question_type === 'SQ' && 'Short Question' ||\n                                    props.questionData.question_type === 'MCQ' && 'MCQ'\n                                }\n                            </p>\n                        </IonLabel>\n                    </IonItem>\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Question</h2>\n                            <p>{props.questionData.title}</p>\n                        </IonLabel>\n                    </IonItem>\n                    {props.questionData.q_content === null ? '' :\n                        <IonItem>\n                            <IonLabel>\n                                <h2 className=\"mb-3\">Question Content</h2>\n\n                                <p dangerouslySetInnerHTML={{ __html: props.questionData.q_content }}></p>\n\n                            </IonLabel>\n                        </IonItem>\n                    }\n                    {props.questionData.question_type === 'SQ' ? '' :\n                        <IonItem >\n                            <IonLabel>\n                                <h2 className=\"mb-3\">Question options</h2>\n                                {props.option.map((item: any, i: any) =>\n                                    <p className=\"mt-3\" key={i}> {i + 1}. {item.option}</p>\n                                )}\n                            </IonLabel>\n                        </IonItem>\n                    }\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Answer</h2>\n                            <p>{props.questionData.answer}</p>\n                        </IonLabel>\n                    </IonItem>\n                </Stack>\n\n            </DialogContent>\n            <DialogActions sx={{ p: '1.25rem' }}>\n                <Button onClick={props.onClose}>Cancel</Button>\n\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nexport default Question;","/home/shama/elearning/elearnf/src/pages/admin/quiz/Instructor.tsx",["411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427"],[],"import React, { FC, useMemo, useState, useEffect, useRef } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    TextField,\n    Tooltip,\n} from '@mui/material';\nimport {\n    IonCard,\n    IonCardContent,\n    IonCardHeader,\n    IonButton,\n    IonToolbar,\n    IonTitle,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonHeader,\n    IonContent,\n\n} from \"@ionic/react\";\nimport { Delete, Edit, Add } from '@mui/icons-material';\nimport baseUrl, { api } from '../../../pages/Urls';\n\nimport { ErrorMessage } from '@hookform/error-message';\nimport swal from 'sweetalert';\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\ntype InstructorTable = {\n    id: string;\n    name: string;\n    email: string;\n\n};\n\n\nconst Instructor: FC = () => {\n    const [instructor, setInstructor] = useState([]);\n    const [modalOpen, setModalOpen] = useState(false);\n    const [instructorData, setInstructorData] = useState({});\n    const fetchInstructor = () => {\n        fetch(`${baseUrl}${api.allInstructor}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setInstructor(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchInstructor();\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<InstructorTable>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'name',\n                header: 'Instructor Name',\n\n            },\n            {\n                accessorKey: 'email',\n                header: 'Instructor Email',\n\n            },\n\n        ],\n        [],\n    );\n\n    const deleteInstructor = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteInstructor}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n                .then(res => {\n                    if (res.status === 200) {\n                        fetchInstructor();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Instructor deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Instructor not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n                <h1 className='text-center mb-2'>List of Instructors</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={instructor}\n                    getRowId={(row => `${row.id}`)}\n                    enableRowActions\n                    enableRowNumbers\n                    positionActionsColumn=\"last\"\n                    enableColumnOrdering\n                    renderRowActions={({ row, table }) => (\n                        <Box sx={{ display: 'flex', gap: '1rem' }}>\n                            <Tooltip arrow placement=\"left\" title=\"Edit\">\n                                <IconButton onClick={() => {\n                                    setInstructorData(row.original)\n                                    setModalOpen(true);\n                                }}>\n                                    <Edit />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"right\" title=\"Delete\">\n                                <IconButton color=\"error\" onClick={() => deleteInstructor(row.id)}>\n                                    <Delete />\n                                </IconButton>\n                            </Tooltip>\n                        </Box>\n                    )}\n                    renderTopToolbarCustomActions={() => (\n                        <Tooltip title=\"Add-Instructor\">\n                            <IconButton onClick={() => setModalOpen(true)}>\n                                Create <Add />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                />\n                <CreateOrEdit\n                    open={modalOpen}\n                    onClose={() => {\n                        setModalOpen(false)\n                        setInstructorData({})\n                    }}\n                    fetchInstructor={() => fetchInstructor()}\n                    instructorData={instructorData}\n\n                />\n            </div>\n        </IonContent>\n\n    );\n\n};\n\nconst CreateOrEdit: FC<{\n    onClose: () => void;\n    fetchInstructor: () => void;\n    open: boolean;\n    instructorData: any\n}> = (props) => {\n    const [error, setError] = useState('');\n    const type = Object.keys(props.instructorData).length == 0 ? \"C\" : \"E\";\n    const formRef = useRef<HTMLFormElement>(null);\n    const {\n        register,\n        reset,\n        handleSubmit,\n        formState: { errors },\n    } = useForm({\n        criteriaMode: \"all\",\n\n    });\n    const handleChange = (e: any) => {\n\n        const eml = e.target.value;\n\n        if (eml) {\n            fetch(`${baseUrl}${api.checkUser}${eml}`, {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n\n                },\n            })\n                .then(resp => resp.json())\n                .then(res => {\n                    if (Object.keys(res).length != 0) {\n                        setError('Email already exists')\n                    } else {\n                        setError('');\n                    }\n                })\n        }\n\n    }\n    const addInstructor = (e: any) => {\n        {\n\n            fetch(`${baseUrl}${api.addInstructor}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(e),\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n                        props.fetchInstructor();\n                        props.onClose();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Instructor Created successfully\",\n                            icon: \"success\",\n                        });\n                    }\n                    else {\n                        throw Error([response.status, response.statusText].join(' '));\n                    }\n                })\n\n                .catch(error => console.log('error', error));\n\n        }\n    }\n    const updateInstructor = (e: any) => {\n\n        fetch(`${baseUrl}${api.updateInstructor}${e.id}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(e),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    props.fetchInstructor();\n                    props.onClose();\n                    swal({\n                        title: \"Success!\",\n                        text: \"Instructor updated successfully\",\n                        icon: \"success\",\n                    });\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText + \" - Instructor not Updated\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    const onSubmit = (e: any) => {\n\n        type === \"C\" ? addInstructor(e) : updateInstructor(e);\n    };\n    useEffect(() => {\n        setError('');\n        {\n            type === \"E\" ?\n                reset({\n                    id: props.instructorData.id,\n                    name: props.instructorData.name,\n\n                }) : reset({\n                    id: '',\n                    name: '',\n                    email: ''\n                })\n        };\n    }, [props.instructorData]);\n\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle textAlign=\"center\">{type === \"C\" ? \"Create\" : \"Edit\"} Instructor</DialogTitle>\n            <DialogContent>\n                <form ref={formRef} onSubmit={handleSubmit(onSubmit)}>\n                    <Stack\n                        sx={{\n                            width: '100%',\n                            minWidth: { xs: '300px', sm: '360px', md: '400px' },\n\n                        }}\n                    >\n\n                        <TextField sx={{ mt: 3 }}\n                            type=\"text\"\n                            label=\"Instructor Name\"\n                            variant=\"filled\"\n                            focused\n\n                            {...register(\"name\", { required: \"Instructor Name Is Required\" })}\n                        />\n                        <p style={{ color: \"red\" }}>\n                            <ErrorMessage errors={errors} name=\"name\" />\n                        </p>\n                        {type === \"E\" ? '' :\n                            <>\n                                <TextField sx={{ mt: 3 }}\n                                    type=\"email\"\n                                    label=\"Instructor Email\"\n                                    variant=\"filled\"\n                                    focused\n\n                                    {...register(\"email\", { required: \"Email Is Required\" })}\n                                    onChange={(e: any) => handleChange(e)}\n                                />\n\n                                <p style={{ color: \"red\" }}>\n                                    <ErrorMessage errors={errors} name=\"email\" />\n                                    {error ? error : ''}\n                                </p>\n                            </>\n                        }\n\n                    </Stack>\n                    <DialogActions sx={{ p: '1.25rem' }}>\n                        <Button onClick={props.onClose}>Cancel</Button>\n                        <Button type=\"submit\">{type === \"C\" ? \"Create\" : \"Save\"}</Button>\n                    </DialogActions>\n                </form>\n            </DialogContent>\n\n        </Dialog>\n    );\n}\n\nexport default Instructor;","/home/shama/elearning/elearnf/src/pages/admin/quiz/PendingEnrole.tsx",["428"],[],"import React, { FC, useMemo, useState, useEffect } from 'react';\n\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    IconButton,\n    Tooltip,\n} from '@mui/material';\nimport { Approval, Input } from '@mui/icons-material';\nimport baseUrl, { api } from '../../../pages/Urls';\nimport { IonContent } from '@ionic/react';\nimport swal from 'sweetalert';\ntype CourseData = {\n    id: string;\n    name: string;\n    course_name: string;\n    description: string;\n    is_enrole: any;\n\n};\n\n\nconst PendingEnrole: FC = () => {\n    const [course, setCourse] = useState([]);\n\n    const fetchCourse = () => {\n        fetch(`${baseUrl}${api.allPending}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setCourse(resp.reverse())\n            })\n    }\n    useEffect(() => {\n        fetchCourse();\n\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<CourseData>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'name',\n                header: 'User Name',\n\n            },\n            {\n                accessorKey: 'course_name',\n                header: 'Course Name',\n\n            },\n            {\n                accessorKey: 'description',\n                header: 'Description',\n\n            },\n            {\n                accessorKey: 'is_enrole',\n                header: 'Status',\n                Cell: ({ cell }) => (\n                    cell.getValue<any>() === 0 && 'Pending'\n\n                ),\n            },\n\n        ],\n        [],\n    );\n\n    const approveEnrolement = (id: any) => {\n        if (window.confirm('Want to Approve?')) {\n            fetch(`${baseUrl}${api.approve}${id}`, {\n                method: 'PUT',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n\n\n            })\n                .then(response => {\n                    if (response.status === 200) {\n\n                        fetchCourse();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Enrole approved successfully\",\n                            icon: \"success\",\n                        });\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: response.status + ' ' + response.statusText + \" - Enrole not approved\",\n                            icon: \"error\",\n                        });\n                    }\n                })\n\n                .catch(error => console.log('error', error));\n\n        }\n\n    }\n    const disapproveEnrolement = (id: any) => {\n        if (window.confirm('Want to disapproved?')) {\n            fetch(`${baseUrl}${api.disapprove}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n\n\n            })\n                .then(response => {\n                    if (response.status === 200) {\n\n                        fetchCourse();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Enrole disapproved successfully\",\n                            icon: \"success\",\n                        });\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: response.status + ' ' + response.statusText + \" - Enrole disapproved unsuccessfull\",\n                            icon: \"error\",\n                        });\n                    }\n                })\n\n                .catch(error => console.log('error', error));\n\n        }\n\n    }\n    return (\n        <IonContent>\n            <div className=\"container mt-5\">\n                <h1 className='text-center mb-2'>Pending Enrole Courses List</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={course}\n                    getRowId={(row => `${row.id}`)}\n                    enableRowNumbers\n                    enableRowActions\n                    positionActionsColumn=\"last\"\n                    enableColumnOrdering\n                    renderRowActions={({ row, table }) => (\n                        <Box sx={{ display: 'flex', gap: '1rem' }}>\n\n                            <Tooltip arrow placement=\"right\" title=\"Approve\">\n                                <IconButton style={{ color: \"green\" }} onClick={() => approveEnrolement(row.id)}>\n                                    <Approval />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"right\" title=\"disapprove\">\n                                <IconButton style={{ color: \"red\" }} onClick={() => disapproveEnrolement(row.id)}>\n                                    <Approval />\n                                </IconButton>\n                            </Tooltip>\n\n                        </Box>\n                    )}\n\n                />\n\n            </div>\n        </IonContent>\n\n    );\n\n};\n\nexport default PendingEnrole;","/home/shama/elearning/elearnf/src/pages/teacher/TchrTopic.tsx",["429"],[],"import React, { FC, useMemo, useState } from 'react';\nimport MaterialReactTable, {\n\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    TextField,\n    Tooltip,\n} from '@mui/material';\nimport { Delete, RemoveRedEye, Add } from '@mui/icons-material';\nimport baseUrl, { api } from '../../pages/Urls';\nimport { IonContent, IonItem, IonLabel } from '@ionic/react';\nimport { Link } from 'react-router-dom';\nimport { useForm } from \"react-hook-form\";\nimport swal from 'sweetalert';\ntype topicData = {\n\n    id: string;\n    topic_name: string;\n\n\n};\n\n\nconst TchrTopic: FC<{\n\n    topic: any\n    course_name: string\n    courseId: string\n    fetchShowCourse: () => void;\n}> = (props) => {\n\n    const [modalOpen, setModalOpen] = useState(false);\n\n\n    const columns = useMemo<MRT_ColumnDef<topicData>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'topic_name',\n                header: 'Topic Name',\n\n            },\n\n\n        ],\n        [],\n    );\n\n    const deleteTopic = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteTopic}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n\n                .then(res => {\n                    if (res.status === 200) {\n\n                        props.fetchShowCourse();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Topic deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Topic not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    return (\n\n        <div className=\"container mt-2\">\n            <IonItem>\n                <IonLabel color=\"primary\">\n                    <h1>{props.course_name}</h1>\n                </IonLabel>\n            </IonItem>\n            <h1 className='text-center mb-2'>List of Topics</h1>\n            <MaterialReactTable\n                columns={columns}\n                data={props.topic}\n                getRowId={(row => `${row.id}`)}\n                enableRowActions\n                enableRowNumbers\n                renderRowActions={({ row, table }) => (\n                    <Box sx={{ display: 'flex', gap: '1rem' }}>\n                        <Tooltip arrow placement=\"left\" title=\"View\">\n                            <IconButton>\n                                <Link className='text-decoration-none' to={`/dashboard/mycourse/${props.courseId}/topic/${row.id}`}>  <RemoveRedEye /></Link>\n                            </IconButton>\n\n                        </Tooltip>\n                        <Tooltip arrow placement=\"right\" title=\"Delete\">\n                            <IconButton color=\"error\" onClick={() => deleteTopic(row.id)}>\n                                <Delete />\n                            </IconButton>\n                        </Tooltip>\n                    </Box>\n                )}\n                renderTopToolbarCustomActions={() => (\n                    <Tooltip title=\"Add-Course\">\n                        <IconButton onClick={() => setModalOpen(true)}>\n                            Create <Add />\n                        </IconButton>\n                    </Tooltip>\n                )}\n            />\n            <CreateTopic\n                open={modalOpen}\n                onClose={() => {\n                    setModalOpen(false)\n\n                }}\n                fetchShowCourse={() => props.fetchShowCourse()}\n                course_name={props.course_name}\n            />\n        </div>\n\n\n    );\n\n};\n\nconst CreateTopic: FC<{\n    onClose: () => void;\n    fetchShowCourse: () => void;\n    open: boolean;\n    course_name: string\n}> = (props) => {\n\n    const {\n        handleSubmit,\n        register,\n        formState: { errors },\n        reset,\n\n    } = useForm({\n        defaultValues: {\n            course_name: props.course_name,\n            topic_name: '',\n\n        }\n    });\n    const addTopic = (e: any) => {\n\n\n        fetch(`${baseUrl}${api.addTopic}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(e),\n        })\n\n            .then(response => {\n                if (response.status === 200) {\n                    //console.log(response.status.message)\n                    props.fetchShowCourse();\n                    props.onClose();\n                    reset(\n                        {\n                            course_name: props.course_name,\n                            topic_name: '',\n\n                        }\n\n                    )\n                    swal({\n                        title: \"Success!\",\n                        text: \"Topic Created successfully\",\n                        icon: \"success\",\n                    });\n                }\n                else {\n                    throw Error([response.status, response.statusText].join(' '));\n                }\n            })\n\n\n    }\n\n    return (\n        <Dialog open={props.open}>\n            <form onSubmit={handleSubmit(addTopic)}>\n                <DialogTitle textAlign=\"center\">Create Topic</DialogTitle>\n                <DialogContent>\n                    <Stack\n                        sx={{\n                            width: '100%',\n                            minWidth: { xs: '300px', sm: '360px', md: '400px' },\n\n                        }}\n                    >\n\n                        <TextField sx={{ mt: 3 }}\n                            type=\"text\"\n                            label=\"Toppic Name\"\n                            variant=\"filled\"\n                            focused\n                            {...register(\"topic_name\", { required: \"Topic Name Is Required\" })} />\n                        <p style={{ color: \"red\" }}>\n                            {errors?.topic_name && errors.topic_name.message}\n                        </p>\n\n                    </Stack>\n\n                </DialogContent>\n                <DialogActions sx={{ p: '1.25rem' }}>\n                    <Button onClick={props.onClose}>Cancel</Button>\n                    <Button color=\"secondary\" variant=\"contained\" type=\"submit\">\n                        Create\n                    </Button>\n                </DialogActions>\n            </form>\n        </Dialog >\n    );\n}\n\nexport default TchrTopic;","/home/shama/elearning/elearnf/src/pages/teacher/TchrQuiz.tsx",["430","431"],[],"import {\n\n    IonButton,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonCardContent,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonToolbar,\n    IonTitle,\n    IonCol, IonGrid, IonRow,\n    IonText,\n\n} from \"@ionic/react\";\nimport React, { FC, useMemo, useState, useEffect } from 'react';\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    Tooltip,\n    FormControl,\n    NativeSelect,\n} from '@mui/material';\nimport { Delete, Edit, Add, Visibility } from '@mui/icons-material';\nimport baseUrl, { api } from '../../pages/Urls';\nimport { Collapse } from 'react-bootstrap'\nimport { format, formatISO } from 'date-fns';\nimport swal from 'sweetalert';\nimport Select from 'react-select';\nimport { useForm, Controller, useFieldArray } from \"react-hook-form\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\nimport { TextField } from \"@mui/material\";\nimport { DateTimePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\ntype quizData = {\n    id: string;\n    start_date: Date;\n    quiz_name: string;\n    status: string;\n    test_time: any;\n\n};\n\n\nconst TchrQuiz: FC<{\n\n    quiz: any\n    level: any\n    course_name: string\n    fetchShowCourse: () => void\n}> = (props) => {\n    const [quizId, setQuizId] = useState('');\n    const type = quizId ? \"E\" : \"C\";\n    const {\n        handleSubmit,\n        register,\n        formState: { errors },\n        reset,\n        control,\n        setValue,\n        clearErrors,\n        getValues\n    } = useForm({\n        defaultValues: {\n            id: '',\n            course_name: props.course_name,\n            quiz_name: '',\n            test_time: '',\n            status: '',\n            inputlist: [{ level_name: '', qcount: '' }],\n            start_date: format(new Date(), \"yyyy-MM-dd HH:mm\"),\n\n        }\n    });\n    const { fields, remove, append } = useFieldArray({\n        name: 'inputlist',\n        control,\n    });\n\n    const [levelOptions, setLevelOptions] = useState([]);\n    const [showQuiz, setShowQuiz] = useState([]);\n    const [quizData, setQuizData] = useState({});\n    const [collapse, setCollapse] = useState(false);\n    const [modalOpen, setModalOpen] = useState(false);\n    const [qerror, setQError] = useState('');\n    const [start_date, setStart_date] = useState(format(new Date(), \"yyyy-MM-dd HH:mm:ss\"));\n    const [end_date, setEnd_date] = useState(format(new Date(), \"yyyy-MM-dd HH:mm:ss\"));\n    const columns = useMemo<MRT_ColumnDef<quizData>[]>(\n        () => [\n\n\n\n            {\n                accessorKey: 'quiz_name',\n                header: 'Quiz Name',\n\n            },\n            {\n                accessorKey: 'status',\n                header: 'Status',\n                Cell: ({ cell }) => (\n                    cell.getValue<string>() === \"P\" ?\n                        'Publish' : 'Draft'\n                ),\n            },\n            {\n                accessorFn: (row) => format(new Date(row.start_date), \"yyyy-MM-dd HH:mm:ss\"),\n                accessorKey: 'start_date',\n                header: 'Start Date',\n\n            },\n            {\n                accessorKey: 'test_time',\n                header: 'Duration (Minutes)',\n\n            },\n\n\n        ],\n        [],\n    );\n\n    useEffect(() => {\n        setLevelOptions(props.level.map((item: any) => ({\n            label: item.level_name,\n            value: item.level_name\n        })))\n    }, [props.level])\n\n    const editQuiz = (id: any) => {\n        setQuizId(id);\n        fetch(`${baseUrl}${api.showQuiz}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                setValue('quiz_name', result.quiz.quiz_name);\n                setValue('status', result.quiz.status);\n                setValue('start_date', result.quiz.start_date);\n                setValue('test_time', result.quiz.test_time);\n                setValue('id', result.quiz.id)\n                setShowQuiz(result.quiz.qlevel)\n                setStart_date(result.quiz.start_date);\n                setEnd_date(result.quiz.test_end);\n                setValue('inputlist',\n                    result.quiz.qlevel.map((item: any, i: any) => ({\n                        level_name: {\n                            label: item.level_name,\n                            value: item.level_name,\n                        },\n                        qcount: item.qcount\n\n                    }))\n                );\n\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n\n\n    }\n\n    const addQuiz = (e: any) => {\n        {\n\n            fetch(`${baseUrl}${api.addQuiz}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(e),\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n                        props.fetchShowCourse();\n                        setCollapse(false)\n                        swal({\n                            title: \"Success!\",\n                            text: \"Quiz Created successfully\",\n                            icon: \"success\",\n                        });\n                    } else if (response.status === 400) {\n                        setQError('Question Number out of range')\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: response.status + ' ' + response.statusText + \" - Quiz not Created\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n\n\n                .catch(error => console.log('error', error));\n\n        }\n    }\n    const updateQuiz = (e: any) => {\n\n        fetch(`${baseUrl}${api.updateQuiz}${e.id}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(e),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    props.fetchShowCourse();\n                    setCollapse(false)\n                    swal({\n                        title: \"Success!\",\n                        text: \"Quiz updated successfully\",\n                        icon: \"success\",\n                    });\n                } else if (res.status === 400) {\n                    setQError('Question Number out of range')\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText +\n                            \" - Quiz not updated\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    const deleteQuiz = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteQuiz}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n                .then(res => {\n                    if (res.status === 200) {\n\n                        props.fetchShowCourse();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Quiz deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Quiz not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n\n    const onSubmit = (e: any) => {\n        type === \"C\" ? addQuiz(e) : updateQuiz(e);\n    }\n    return (\n\n        <div className=\"container mt-2\">\n            <IonItem>\n                <IonLabel color=\"primary\">\n                    <h1>{props.course_name}</h1>\n                </IonLabel>\n            </IonItem>\n            <Collapse in={collapse}>\n                <div id=\"collapseID\">\n                    <div className=\"container mt-5 mb-5 \">\n\n                        <IonCard>\n                            <IonCardHeader>\n                                <IonCardTitle>\n                                    <IonToolbar>\n                                        <IonTitle><h1 className=\"text-center display-6\">{type === \"C\" ? \"Create\" : \"Edit\"} Quiz</h1></IonTitle>\n                                    </IonToolbar>\n                                </IonCardTitle>\n                            </IonCardHeader>\n                            <hr />\n                            <IonCardContent>\n                                <form onSubmit={handleSubmit(onSubmit)}>\n                                    <IonItem>\n                                        <IonLabel position=\"stacked\">Quiz Name</IonLabel>\n                                        <IonInput placeholder=\"quiz name\"\n                                            type=\"text\"\n                                            {...register(\"quiz_name\", { required: \"Quiz Name Is Required\" })}\n                                        >\n                                        </IonInput>\n                                    </IonItem>\n                                    <p style={{ color: \"red\" }}>\n                                        <ErrorMessage errors={errors} name=\"quiz_name\" />\n                                    </p>\n                                    <IonItem>\n                                        <IonText color=\"primary\">\n                                            <h2 className=\"mt-3 mb-3\">Add Quiz Level</h2>\n                                        </IonText>\n\n                                    </IonItem>\n\n                                    <div>\n\n                                        {\n                                            fields.map((x, i) => {\n\n                                                return (\n                                                    <div key={i.toString()} className=\"mb-3 mt-3\">\n                                                        <IonGrid>\n                                                            <IonRow>\n                                                                <IonCol size=\"7\">\n                                                                    <IonItem>\n                                                                        <IonLabel position=\"stacked\">Level</IonLabel>\n                                                                        <div className=\"mt-2\" style={{ width: '100%' }}>\n\n                                                                            <Controller\n                                                                                control={control}\n                                                                                name={`inputlist.${i}.level_name`}\n                                                                                rules={{\n                                                                                    required: 'Level name is required',\n                                                                                }}\n                                                                                render={() => (\n                                                                                    <Select\n\n                                                                                        menuPortalTarget={document.body}\n                                                                                        options={levelOptions}\n                                                                                        placeholder={<i className=\"bi bi-search\"> Select Level</i>}\n                                                                                        value={getValues(`inputlist.${i}.level_name`)}\n                                                                                        onChange={(e: any) => setValue(`inputlist.${i}.level_name`, e)}\n\n\n                                                                                    />\n\n                                                                                )}\n\n                                                                            />\n                                                                        </div>\n\n                                                                    </IonItem>\n                                                                    <p style={{ color: \"red\" }}>\n                                                                        <ErrorMessage errors={errors} name={`inputlist.${i}.level_name`} />\n                                                                    </p>\n                                                                </IonCol>\n                                                                <IonCol size=\"3\">\n                                                                    <IonItem>\n                                                                        <IonLabel position=\"stacked\">No of Question</IonLabel>\n                                                                        <IonInput type=\"number\"\n                                                                            min={1}\n                                                                            //step='1'\n                                                                            value={getValues(`inputlist.${i}.qcount`)}\n                                                                            {...register(`inputlist.${i}.qcount`, { required: \"Question No Is Required\" })}\n                                                                        >\n                                                                        </IonInput>\n                                                                    </IonItem>\n                                                                    <p style={{ color: \"red\" }}>\n                                                                        <ErrorMessage errors={errors} name={`inputlist.${i}.qcount`} />\n\n                                                                    </p>\n\n                                                                </IonCol>\n\n                                                                <IonCol>\n                                                                    <div className=\"mt-4\">\n                                                                        {\n                                                                            fields.length !== 1 &&\n                                                                            <button onClick={() => remove(i)}>X</button>\n                                                                        }\n                                                                        {\n                                                                            fields.length - 1 === i &&\n                                                                            <button className=\"mx-3 \" onClick={() => append({ level_name: '', qcount: '' })}>\n                                                                                <i className=\"bi bi-plus-circle-fill\" title=\"add-option\"></i>\n                                                                            </button>\n                                                                        }\n                                                                    </div>\n                                                                </IonCol>\n\n                                                            </IonRow>\n\n                                                        </IonGrid>\n\n                                                    </div>\n                                                );\n                                            })}\n\n                                    </div>\n                                    <p className=\"text-center\" style={{ color: \"red\" }}>\n\n                                        {qerror}\n                                    </p>\n\n                                    <IonItem>\n                                        <IonLabel position=\"stacked\">Status</IonLabel>\n                                        <Box sx={{ width: '100%' }}>\n                                            <FormControl fullWidth sx={{ mt: 1 }}>\n                                                <NativeSelect\n                                                    {...register(\"status\", { required: \"Status Is Required\" })}\n\n                                                >\n                                                    <option value='P'>Publish</option>\n                                                    <option value='D'>Draft</option>\n\n\n                                                </NativeSelect>\n                                            </FormControl>\n                                        </Box>\n\n                                    </IonItem>\n                                    <p style={{ color: \"red\" }}>\n                                        <ErrorMessage errors={errors} name=\"status\" />\n                                    </p>\n                                    <IonItem>\n                                        <IonLabel position=\"stacked\">Duration (Minutes)</IonLabel>\n\n                                        <IonInput type=\"number\"\n                                            min={1}\n                                            step='1'\n                                            {...register(\"test_time\", { required: \"Duration Is Required\" })}\n\n                                        >\n                                        </IonInput>\n                                    </IonItem>\n                                    <p style={{ color: \"red\" }}>\n                                        <ErrorMessage errors={errors} name=\"test_time\" />\n                                    </p>\n                                    <IonItem >\n                                        <IonLabel position=\"floating\">Quiz Start </IonLabel>\n                                        <Controller\n                                            name=\"start_date\"\n                                            control={control}\n                                            rules={{\n                                                required: 'Date is required',\n                                            }}\n                                            defaultValue={format(new Date(), \"yyyy-MM-dd HH:mm\")}\n                                            render={({ field: { ...rest } }) => (\n                                                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                                    <DateTimePicker\n\n                                                        inputFormat=\"yyyy-MM-dd HH:mm\"\n\n                                                        value={rest.value}\n                                                        onChange={(e: any) => {\n                                                            setValue(\"start_date\", format(e, \"yyyy-MM-dd HH:mm\"));\n\n                                                        }}\n                                                        renderInput={(params) => (\n                                                            <TextField {...params} sx={{ mt: 3, width: '100%' }} />\n                                                        )}\n                                                    />\n                                                </LocalizationProvider>\n                                            )}\n                                        />\n                                    </IonItem>\n                                    <p style={{ color: \"red\" }}>\n                                        <ErrorMessage errors={errors} name=\"start_date\" />\n                                    </p>\n                                    <div style={{ marginTop: \"3%\" }} className=\"text-center mb-5\">\n                                        <IonButton color=\"danger\" onClick={() => setCollapse(false)}>\n                                            Cancel\n                                        </IonButton>\n                                        <IonButton color=\"primary\" type=\"submit\">\n                                            {type === \"C\" ? \"Create\" : \"Save\"}\n                                        </IonButton>\n\n                                    </div>\n                                </form>\n                            </IonCardContent>\n                        </IonCard>\n\n                    </div>\n\n                </div>\n            </Collapse>\n\n            <h1 className='text-center mb-2'>List of Quizzes</h1>\n            <MaterialReactTable\n                columns={columns}\n                data={props.quiz}\n                getRowId={(row => `${row.id}`)}\n                enableRowActions\n                enableRowNumbers\n                enableColumnOrdering\n                renderRowActions={({ row, table }) => (\n                    <Box sx={{ display: 'flex', gap: '1rem' }}>\n                        <Tooltip arrow placement=\"left\" title=\"Edit\" >\n                            <IconButton aria-expanded={collapse} aria-controls=\"collapseID\" onClick={() => {\n                                editQuiz(row.id)\n                                setCollapse(!collapse)\n                                setQError('')\n                                clearErrors([\n                                    'quiz_name',\n                                    'test_time',\n                                    'status',\n                                    'inputlist',\n                                    'start_date',\n\n                                ])\n                            }}>\n\n                                <Edit />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip arrow placement=\"left\" title=\"View\" >\n                            <IconButton onClick={() => {\n                                editQuiz(row.id)\n                                setModalOpen(true);\n                                setQuizData(row.original)\n                            }}>\n\n                                <Visibility />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip arrow placement=\"right\" title=\"Delete\">\n                            <IconButton color=\"error\" onClick={() => deleteQuiz(row.id)}>\n                                <Delete />\n                            </IconButton>\n                        </Tooltip>\n                    </Box>\n                )}\n                renderTopToolbarCustomActions={() => (\n                    <Tooltip title=\"Add-Quiz\">\n                        <IconButton aria-expanded={collapse} onClick={() => {\n                            setCollapse(!collapse)\n                            setQuizId('')\n                            setQError('')\n                            reset({\n                                course_name: props.course_name,\n                                quiz_name: '',\n                                test_time: '',\n                                status: 'D',\n                                inputlist: [{ level_name: '', qcount: '' }],\n                                start_date: format(new Date(), \"yyyy-MM-dd HH:mm\"),\n                            })\n                        }}>\n                            Create <Add />\n                        </IconButton>\n                    </Tooltip>\n                )}\n\n            />\n            <ViewQuiz\n                open={modalOpen}\n                onClose={() => {\n                    setModalOpen(false)\n\n                }}\n                showQuiz={showQuiz}\n                quizData={quizData}\n                test_start={format(new Date(start_date), \"yyyy-MM-dd HH:mm:ss\")}\n                test_end={format(new Date(end_date), \"yyyy-MM-dd HH:mm:ss\")}\n            />\n        </div>\n\n\n    );\n\n};\n\n\nconst ViewQuiz: FC<{\n    onClose: () => void;\n\n    open: boolean;\n    quizData: any;\n    showQuiz: any\n    test_start: any;\n    test_end: any;\n}> = (props) => {\n\n\n\n\n\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle textAlign=\"center\">View Quiz</DialogTitle>\n            <DialogContent>\n                <Stack\n                    sx={{\n                        width: '100%',\n                        minWidth: { xs: '300px', sm: '360px', md: '400px' },\n                        //gap: '1.5rem',\n                    }}\n                >\n\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Quiz Name</h2>\n                            <p>{props.quizData.quiz_name}</p>\n                        </IonLabel>\n                    </IonItem>\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Quiz Start</h2>\n                            <p>{props.test_start}</p>\n\n                        </IonLabel>\n                    </IonItem>\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Quiz End</h2>\n                            <p>{props.test_end}</p>\n                        </IonLabel>\n                    </IonItem>\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Quiz Duration</h2>\n                            <p>{props.quizData.test_time} Minutes</p>\n                        </IonLabel>\n                    </IonItem>\n\n\n                    <IonItem >\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Quiz Level and Question</h2>\n                            {props.showQuiz.map((item: any, i: any) =>\n                                <p className=\"mt-3\" key={i}> {item.level_name} | {item.qcount}</p>\n                            )}\n                        </IonLabel>\n                    </IonItem>\n\n\n                </Stack>\n\n            </DialogContent>\n            <DialogActions sx={{ p: '1.25rem' }}>\n                <Button onClick={props.onClose}>Cancel</Button>\n\n            </DialogActions>\n        </Dialog>\n    );\n}\nexport default TchrQuiz;","/home/shama/elearning/elearnf/src/pages/teacher/TchrLevel.tsx",["432"],[],"import {\n\n    IonButton,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonCardContent,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonToolbar,\n    IonTitle,\n} from \"@ionic/react\";\nimport React, { FC, useMemo, useState, useEffect } from 'react';\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    Tooltip,\n} from '@mui/material';\nimport { Add, Delete, Edit, Visibility } from '@mui/icons-material';\nimport baseUrl, { api } from '../../pages/Urls';\nimport { Collapse } from 'react-bootstrap';\nimport swal from 'sweetalert';\nimport Select from 'react-select';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\ntype levelData = {\n    id: string;\n    level_name: string;\n\n\n};\nconst schema = yup.object().shape({\n    level_name: yup.string()\n        .required('Course Name is required'),\n    ltopic: yup.array().required().min(1),\n\n})\n\nconst TchrLevel: FC<{\n    topic: any,\n    level: any,\n    course_name: string,\n    fetchShowCourse: () => void\n}> = (props) => {\n    const [collapse, setCollapse] = useState(false);\n    const [modalOpen, setModalOpen] = useState(false);\n    const [levelTopic, setLTopic] = useState([]);\n    const [level_name, setLevel_name] = useState('');\n    const [lvlId, setLvlId] = useState('');\n    const [topicOptions, setTopicOptions] = useState([{}]);\n    const type = lvlId ? \"E\" : \"C\";\n    const {\n        handleSubmit,\n        register,\n        formState: { errors },\n        reset,\n        control,\n        setValue,\n        clearErrors,\n        getValues\n    } = useForm({\n        defaultValues: {\n            id: '',\n            level_name: '',\n            course_name: props.course_name,\n            ltopic: [{}],\n\n        },\n        resolver: yupResolver(schema),\n    });\n    const columns = useMemo<MRT_ColumnDef<levelData>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'level_name',\n                header: 'Level Name',\n\n            },\n\n\n        ],\n        [],\n    );\n    useEffect(() => {\n        setTopicOptions(props.topic.map((item: any) => ({\n            label: item.topic_name,\n            value: item.topic_name\n        })))\n    }, [props.topic])\n    const editLevel = (id: any) => {\n        setLvlId(id);\n        fetch(`${baseUrl}${api.showLevel}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                setValue('level_name', result.level.level_name);\n                setValue('id', result.level.id);\n                setValue('ltopic',\n\n                    result.level.ltopic.map((lt: any) => ({\n                        label: lt.topic_name,\n                        value: lt.topic_name\n                    }))\n\n                );\n                setLevel_name(result.level.level_name);\n                setLTopic(\n\n                    result.level.ltopic.map((lt: any) => (lt.topic_name))\n\n                );\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n\n\n    }\n    const addLevel = (e: any) => {\n        {\n\n            fetch(`${baseUrl}${api.addLevel}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(e),\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n                        props.fetchShowCourse();\n                        setCollapse(false)\n                        reset(\n                            {\n                                course_name: props.course_name,\n                                level_name: '',\n                                ltopic: [],\n                            }\n\n                        )\n                        swal({\n                            title: \"Success!\",\n                            text: \"Level Created successfully\",\n                            icon: \"success\",\n                        });\n\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: response.status + ' ' + response.statusText + \" - Level not Created\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n\n                .catch(error => console.log('error', error));\n\n        }\n    }\n    const updateLevel = (e: any) => {\n\n        fetch(`${baseUrl}${api.updateLevel}${e.id}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(e),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    props.fetchShowCourse();\n                    setCollapse(false);\n                    swal({\n                        title: \"Success!\",\n                        text: \"Level updated successfully\",\n                        icon: \"success\",\n                    });\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText +\n                            \" - level not updated\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    const deleteLevel = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteLevel}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n                .then(res => {\n                    if (res.status === 200) {\n                        props.fetchShowCourse();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Level deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Level not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n\n    const onSubmit = (e: any) => {\n        type === \"C\" ? addLevel(e) : updateLevel(e);\n    }\n    return (\n\n        <div className=\"container mt-2\">\n            <IonItem>\n                <IonLabel color=\"primary\">\n                    <h1>{props.course_name}</h1>\n                </IonLabel>\n            </IonItem>\n\n\n            <Collapse in={collapse}>\n                <div id=\"collapseID\">\n                    <div className=\"container mt-5 mb-5 \">\n\n                        <IonCard>\n                            <IonCardHeader>\n                                <IonCardTitle>\n                                    <IonToolbar>\n                                        <IonTitle><h1 className=\"text-center display-6\">{type === \"C\" ? \"Create\" : \"Edit\"} Level</h1></IonTitle>\n                                    </IonToolbar>\n                                </IonCardTitle>\n                            </IonCardHeader>\n                            <hr />\n                            <IonCardContent>\n                                <form onSubmit={handleSubmit(onSubmit)}>\n                                    <IonItem>\n                                        <IonLabel position=\"stacked\">Level Name</IonLabel>\n                                        <IonInput\n                                            placeholder=\"level Name\"\n                                            type=\"text\"\n                                            {...register(\"level_name\", { required: \"Level Name Is Required\" })}\n                                        >\n                                        </IonInput>\n                                    </IonItem>\n                                    <p style={{ color: \"red\" }}>\n                                        <ErrorMessage errors={errors} name=\"level_name\" />\n                                    </p>\n                                    <IonItem>\n                                        <IonLabel position=\"stacked\">Topic</IonLabel>\n                                        <div className=\"mt-2\" style={{ width: '100%' }}>\n\n                                            <Controller\n                                                control={control}\n                                                name=\"ltopic\"\n\n                                                render={() => (\n                                                    <Select\n\n                                                        menuPortalTarget={document.body}\n                                                        options={topicOptions}\n                                                        placeholder={<i className=\"bi bi-search\"> Select Topic</i>}\n                                                        value={getValues('ltopic')}\n                                                        onChange={(e: any) => setValue('ltopic', e)}\n                                                        isMulti\n\n                                                    />\n\n                                                )}\n\n                                            />\n                                        </div>\n\n\n                                    </IonItem>\n\n                                    <p style={{ color: \"red\" }}>\n                                        <ErrorMessage errors={errors} name=\"ltopic\" /></p>\n\n                                    <div style={{ marginTop: \"3%\" }} className=\"text-center mb-5\">\n                                        <IonButton color=\"danger\" onClick={() => setCollapse(false)}>\n                                            Cancel\n                                        </IonButton>\n                                        <IonButton color=\"primary\" type=\"submit\">\n                                            {type === \"C\" ? \"Create\" : \"Save\"}\n                                        </IonButton>\n\n                                    </div>\n                                </form>\n                            </IonCardContent>\n                        </IonCard>\n\n                    </div>\n\n                </div>\n            </Collapse>\n            <h1 className='text-center mb-2'>List of Levels</h1>\n            <MaterialReactTable\n                columns={columns}\n                data={props.level}\n                getRowId={(row => `${row.id}`)}\n                enableRowActions\n                enableRowNumbers\n                enableColumnOrdering\n                renderRowActions={({ row, table }) => (\n                    <Box sx={{ display: 'flex', gap: '1rem' }}>\n                        <Tooltip arrow placement=\"left\" title=\"Edit\" >\n                            <IconButton aria-expanded={collapse} aria-controls=\"collapseID\" onClick={() => {\n                                editLevel(row.id)\n                                setCollapse(!collapse)\n                                clearErrors([\n                                    'level_name',\n                                    'ltopic',\n\n                                ])\n                            }}>\n\n                                <Edit />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip arrow placement=\"left\" title=\"View\" >\n                            <IconButton onClick={() => {\n                                editLevel(row.id)\n                                setModalOpen(true);\n\n                            }}>\n\n                                <Visibility />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip arrow placement=\"right\" title=\"Delete\">\n                            <IconButton color=\"error\" onClick={() => deleteLevel(row.id)}>\n                                <Delete />\n                            </IconButton>\n                        </Tooltip>\n                    </Box>\n                )}\n                renderTopToolbarCustomActions={() => (\n                    <Tooltip title=\"Add-Level\">\n                        <IconButton aria-expanded={collapse} onClick={() => {\n                            setCollapse(!collapse)\n                            setLvlId('')\n                            reset({\n                                course_name: props.course_name,\n                                level_name: '',\n                                ltopic: topicOptions?.slice(0, 1),\n\n\n                            })\n                        }}>\n                            Create <Add />\n                        </IconButton>\n                    </Tooltip>\n                )}\n            />\n            <ViewLevel\n                open={modalOpen}\n                onClose={() => {\n                    setModalOpen(false)\n\n                }}\n                level_name={level_name}\n                level_topic={levelTopic}\n            />\n        </div>\n\n\n    );\n\n};\n\nconst ViewLevel: FC<{\n    onClose: () => void;\n\n    open: boolean;\n    level_name: string;\n    level_topic: any\n\n}> = (props) => {\n\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle textAlign=\"center\">View Level</DialogTitle>\n            <DialogContent>\n                <Stack\n                    sx={{\n                        width: '100%',\n                        minWidth: { xs: '300px', sm: '360px', md: '400px' },\n                        //gap: '1.5rem',\n                    }}\n                >\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Level Name</h2>\n                            <p>{props.level_name}</p>\n                        </IonLabel>\n                    </IonItem>\n                    <IonItem >\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Level Topics</h2>\n                            {props.level_topic.map((item: any, i: any) =>\n                                <p className=\"mt-3\" key={i.toString()}> {i + 1}. {item}</p>\n                            )}\n                        </IonLabel>\n                    </IonItem>\n\n\n                </Stack>\n\n            </DialogContent>\n            <DialogActions sx={{ p: '1.25rem' }}>\n                <Button onClick={props.onClose}>Cancel</Button>\n\n            </DialogActions>\n        </Dialog>\n    );\n}\nexport default TchrLevel;","/home/shama/elearning/elearnf/src/pages/teacher/TchrQuestion.tsx",["433","434","435","436","437","438","439"],[],"import {\n\n    IonButton,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonCardContent,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonToolbar,\n    IonTitle,\n    IonText,\n\n} from \"@ionic/react\";\nimport React, { FC, useMemo, useState } from 'react';\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    Tooltip,\n} from '@mui/material';\nimport { Delete, Edit, Add, Visibility } from '@mui/icons-material';\nimport baseUrl, { api, tinyMceKey } from '../../pages/Urls';\nimport { Editor } from '@tinymce/tinymce-react';\nimport { Collapse } from 'react-bootstrap'\nimport AddQuestion from './AddQuestion';\nimport swal from 'sweetalert';\n\ntype questionData = {\n    id: string;\n    title: string;\n    question_type: string;\n    answer: string;\n    topic_name: string;\n    level_name: string;\n\n};\n\n\nconst TchrQuestion: FC<{\n    level: any,\n    question: any\n    course_name: string\n    fetchShowCourse: () => void\n}> = (props) => {\n\n    const [question, setQuestion] = useState('');\n    const [q_content, setQContent] = useState('');\n    const [questionType, setQuestionType] = useState('');\n    const [answer, setAnswer] = useState('');\n    const [id, setId] = useState('');\n    const [error, setError] = useState(\"\");\n    const [open, setOpen] = useState(false);\n    const [collapse, setCollapse] = useState(false);\n    const [modalOpen, setModalOpen] = useState(false);\n    const [questionData, setQuestionData] = useState({});\n    const [inputList, setinputList] = useState([{ option: '' }]);\n    const handleinputchange = (e: any, index: any) => {\n        const { name, value } = e.target;\n        const list: any[] = [...inputList];\n        list[index][name] = value;\n        setinputList(list);\n\n\n    }\n    const handleaddclick = () => {\n\n        const abc = [...inputList, { option: '' }]\n\n        setinputList(abc);\n    }\n    const handleremove = (index: any) => {\n        const list = [...inputList];\n        list.splice(index, 1);\n        setinputList(list);\n    }\n\n    const columns = useMemo<MRT_ColumnDef<questionData>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'topic_name',\n                header: 'Topic Name',\n\n            },\n            {\n                accessorKey: 'level_name',\n                header: 'Level Name',\n\n            },\n            {\n                accessorKey: 'title',\n                header: 'Question',\n\n            },\n\n            {\n                accessorKey: 'question_type',\n                header: 'Question Type',\n\n            },\n\n            {\n                accessorKey: 'answer',\n                header: 'Question Answer',\n\n            },\n\n        ],\n        [],\n    );\n\n\n    const editQuestion = (id: any) => {\n\n        fetch(`${baseUrl}${api.showQuestion}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                setQuestion(result.qstn.title);\n                setQContent(result.qstn.q_content);\n                setQuestionType(result.qstn.question_type);\n                setAnswer(result.qstn.answer);\n                let levelList: any[] = [];\n                {\n                    result.qstn.option.map((item: any, i: any) =>\n                        levelList.push({\n                            option: item.option,\n\n                        })\n                    )\n                }\n                setinputList([...levelList]);\n\n                setId(result.qstn.id);\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n\n\n    }\n    const updateQuestion = () => {\n        let data = {\n            'title': question,\n            'q_content': q_content,\n            'option': inputList,\n            'answer': answer,\n        }\n        fetch(`${baseUrl}${api.updateQuestion}${id}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(data),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    props.fetchShowCourse();\n                    setOpen(false)\n                    swal({\n                        title: \"Success!\",\n                        text: \"Question updated successfully\",\n                        icon: \"success\",\n                    });\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText +\n                            \" - Question not updated\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    const deleteQuestion = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteQuestion}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n                .then(res => {\n                    if (res.status === 200) {\n\n                        props.fetchShowCourse();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Question deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Question not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    return (\n\n        <div className=\"container mt-2\">\n            <IonItem>\n                <IonLabel color=\"primary\">\n                    <h1>{props.course_name}</h1>\n                </IonLabel>\n            </IonItem>\n            <Collapse in={open}>\n                <div id=\"collapseID\">\n                    <div className=\"container mt-5 mb-5 \">\n\n                        <IonCard>\n                            <IonCardHeader>\n                                <IonCardTitle>\n                                    <IonToolbar>\n                                        <IonTitle><h1 className=\"text-center display-6\">Edit Question</h1></IonTitle>\n                                    </IonToolbar>\n                                </IonCardTitle>\n                            </IonCardHeader>\n                            <hr />\n                            <IonCardContent>\n                                <IonItem>\n                                    <IonLabel position=\"stacked\">Question</IonLabel>\n                                    <IonInput type=\"text\"\n                                        name=\"title\"\n                                        value={question}\n                                        onIonChange={(e: any) => setQuestion(e.target.value)}\n                                    ></IonInput>\n                                </IonItem>\n                                <IonItem>\n                                    <IonLabel position=\"stacked\" >Content</IonLabel>\n                                    <div style={{ marginTop: \"3%\", marginBottom: \"3%\" }}>\n                                        <Editor\n                                            apiKey={tinyMceKey}\n                                            textareaName=\"content\"\n                                            value={q_content}\n                                            onEditorChange={(content: any, editor: any) => setQContent(content)}\n                                            init={{\n                                                height: 500,\n                                                width: 1030,\n                                                menubar: true,\n                                                plugins: [\n\n                                                    'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',\n                                                    'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',\n                                                    'insertdatetime', 'media', 'table', 'code', 'help', 'wordcount'\n\n                                                ],\n\n                                                toolbar: 'undo redo | blocks | ' +\n                                                    'bold italic forecolor | alignleft aligncenter ' +\n                                                    'alignright alignjustify | bullist numlist outdent indent | ' +\n                                                    'removeformat | help',\n                                                content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\n                                            }}\n                                        />\n                                    </div>\n\n                                </IonItem>\n\n                                {questionType === 'MCQ' ?\n                                    <>\n                                        <IonItem>\n                                            <IonText color=\"primary\">\n                                                <h2 className=\"mt-3 mb-3\">Add Question Option</h2>\n                                            </IonText>\n\n                                        </IonItem>\n                                        <IonItem>\n\n                                            <div>\n\n                                                {\n                                                    inputList.map((x, i) => {\n\n                                                        return (\n                                                            <div key={i.toString()} className=\"row mb-3 mt-3\">\n                                                                <div className=\" col-md-1\">\n                                                                    <input className=\"mx-2 mt-4\"\n                                                                        type=\"radio\"\n                                                                        name=\"is_answer\"\n                                                                        value={x.option}\n                                                                        checked={x.option === answer}\n                                                                        onChange={(e: any) => {\n                                                                            setAnswer(e.target.value)\n\n                                                                        }}\n                                                                    />\n                                                                </div>\n                                                                <div className=\" col-md-6\">\n                                                                    <IonItem>\n                                                                        <IonLabel position=\"stacked\">Option</IonLabel>\n                                                                        <IonInput type=\"text\"\n                                                                            name=\"option\"\n                                                                            value={x.option}\n\n                                                                            required\n                                                                            clearInput\n                                                                            onIonChange={(e: any) => handleinputchange(e, i)}\n                                                                        >\n                                                                        </IonInput>\n                                                                    </IonItem>\n                                                                </div>\n                                                                <div className=\"col-md-3 mt-4\">\n                                                                    {\n                                                                        inputList.length !== 1 &&\n                                                                        <button onClick={() => handleremove(i)}>X</button>\n                                                                    }\n                                                                    {\n                                                                        inputList.length - 1 === i &&\n                                                                        <button onClick={() => handleaddclick()} className=\"mx-3 \">\n                                                                            <i className=\"bi bi-plus-circle-fill\" title=\"add-option\"></i>\n                                                                        </button>\n                                                                    }\n\n                                                                </div>\n\n\n\n                                                            </div>\n                                                        );\n                                                    })}\n\n                                            </div>\n\n                                        </IonItem>\n                                    </>\n                                    :\n                                    <IonItem>\n                                        <IonLabel position=\"stacked\">Answer</IonLabel>\n                                        <IonInput type=\"text\"\n                                            name=\"answer\"\n                                            placeholder=\"ans...\"\n                                            value={answer}\n                                            onIonChange={(e: any) => setAnswer(e.target.value)}\n                                        ></IonInput>\n                                    </IonItem>\n                                }\n                                <hr />\n                                <div style={{ marginTop: \"3%\" }} className=\"text-center mb-5\">\n                                    <IonButton color=\"danger\" onClick={() => setOpen(false)}>\n                                        Cancel\n                                    </IonButton>\n                                    <IonButton color=\"primary\" onClick={updateQuestion}>\n                                        Save\n                                    </IonButton>\n\n                                </div>\n                            </IonCardContent>\n                        </IonCard>\n\n                    </div>\n\n                </div>\n            </Collapse>\n            <AddQuestion collapse={collapse} level={props.level} course_name={props.course_name} onClose={() => setCollapse(false)} fetchShowCourse={() => props.fetchShowCourse()} />\n            <h1 className='text-center mb-2'>List of Questions</h1>\n            <MaterialReactTable\n                columns={columns}\n                data={props.question}\n                getRowId={(row => `${row.id}`)}\n                enableRowActions\n                enableRowNumbers\n                enableColumnOrdering\n                renderRowActions={({ row, table }) => (\n                    <Box sx={{ display: 'flex', gap: '1rem' }}>\n                        <Tooltip arrow placement=\"left\" title=\"Edit\" >\n                            <IconButton aria-expanded={open} aria-controls=\"collapseID\" onClick={() => {\n                                editQuestion(row.id)\n                                setOpen(!open)\n\n                            }}>\n\n                                <Edit />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip arrow placement=\"left\" title=\"View\" >\n                            <IconButton onClick={() => {\n                                editQuestion(row.id)\n                                setModalOpen(true);\n                                setQuestionData(row.original)\n                            }}>\n\n                                <Visibility />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip arrow placement=\"right\" title=\"Delete\">\n                            <IconButton color=\"error\" onClick={() => deleteQuestion(row.id)}>\n                                <Delete />\n                            </IconButton>\n                        </Tooltip>\n                    </Box>\n                )}\n                renderTopToolbarCustomActions={() => (\n                    <Tooltip title=\"Add-Question\">\n                        <IconButton aria-expanded={collapse} onClick={() => {\n                            setCollapse(!collapse)\n\n                        }}>\n                            Create <Add />\n                        </IconButton>\n                    </Tooltip>\n                )}\n\n            />\n            <ViewQuestion\n                open={modalOpen}\n                onClose={() => {\n                    setModalOpen(false)\n\n                }}\n                option={inputList}\n                questionData={questionData}\n            />\n        </div>\n\n\n    );\n\n};\n\n\nconst ViewQuestion: FC<{\n    onClose: () => void;\n\n    open: boolean;\n    questionData: any;\n    option: any\n\n}> = (props) => {\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle textAlign=\"center\">View Question</DialogTitle>\n            <DialogContent>\n                <Stack\n                    sx={{\n                        width: '100%',\n                        minWidth: { xs: '300px', sm: '360px', md: '400px' },\n                        //gap: '1.5rem',\n                    }}\n                >\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Question Type</h2>\n                            <p>\n                                {props.questionData.question_type === 'SQ' && 'Short Question' ||\n                                    props.questionData.question_type === 'MCQ' && 'MCQ'\n                                }\n                            </p>\n                        </IonLabel>\n                    </IonItem>\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Question</h2>\n                            <p>{props.questionData.title}</p>\n                        </IonLabel>\n                    </IonItem>\n                    {props.questionData.q_content === null ? '' :\n                        <IonItem>\n                            <IonLabel>\n                                <h2 className=\"mb-3\">Question Content</h2>\n\n                                <p dangerouslySetInnerHTML={{ __html: props.questionData.q_content }}></p>\n\n                            </IonLabel>\n                        </IonItem>\n                    }\n                    {props.questionData.question_type === 'SQ' ? '' :\n                        <IonItem >\n                            <IonLabel>\n                                <h2 className=\"mb-3\">Question options</h2>\n                                {props.option.map((item: any, i: any) =>\n                                    <p className=\"mt-3\" key={i}> {i + 1}. {item.option}</p>\n                                )}\n                            </IonLabel>\n                        </IonItem>\n                    }\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3\">Answer</h2>\n                            <p>{props.questionData.answer}</p>\n                        </IonLabel>\n                    </IonItem>\n                </Stack>\n\n            </DialogContent>\n            <DialogActions sx={{ p: '1.25rem' }}>\n                <Button onClick={props.onClose}>Cancel</Button>\n\n            </DialogActions>\n        </Dialog>\n    );\n}\nexport default TchrQuestion;","/home/shama/elearning/elearnf/src/pages/teacher/ViewTopic.tsx",["440","441","442","443","444","445","446","447","448","449","450"],[],"import {\n    IonButton,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonCard,\n    IonAccordionGroup,\n    IonAccordion,\n    IonContent\n} from \"@ionic/react\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router\";\nimport baseUrl, { api } from '../../pages/Urls';\nimport TopicArticle from \"./TopicArticle\";\nimport swal from 'sweetalert';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nconst schema = yup.object().shape({\n    file: yup.mixed()\n        .test('required', \"File is Required\", (multipleFiles: any) => {\n            return multipleFiles && multipleFiles.length\n        })\n\n        .test(\"fileSize\", \"File Size is too large >100mb\", (value: any) => {\n            if (value && value?.length > 0) {\n                for (let i = 0; i < value.length; i++) {\n                    if (value[i].size > 104857600) {\n                        return false; //100 mb\n                    }\n                }\n            }\n            return true;\n        })\n        .test(\"fileType\", \"Invalid file !! only doc, docx, xlsx, xls, pdf, zip, png, jpg file are allowed\", (value: any) => {\n            if (value && value.length > 0) {\n                for (let i = 0; i < value.length; i++) {\n                    if (\n                        value[i].type != \"image/png\" &&\n                        value[i].type != \"image/jpg\" &&\n                        value[i].type != \"application/pdf\" &&\n                        value[i].type != \"application/msword\" &&\n                        value[i].type != \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" &&\n                        value[i].type != \"application/vnd.ms-excel\" &&\n                        value[i].type != \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" &&\n                        value[i].type != \"application/zip\"\n                    ) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n        ),\n});\nconst ViewTopic: React.FC<{\n    courseId: string\n\n}> = (props) => {\n    type ViewTopic = {\n        id: string;\n    };\n\n    const [topic_name, setTopic_name] = useState('');\n    const [topic_article, setTopic_article] = useState([]);\n    const [topic_content, setTopic_content] = useState([]);\n    const [tid, setId] = useState('');\n    const [multipleFiles, setMultipleFiles] = useState([]);\n    const [tnerror, setTnError] = useState(\"\");\n    const { id } = useParams<ViewTopic>();\n\n\n    const {\n        register,\n        handleSubmit,\n        reset,\n        formState,\n        formState: { errors },\n        setError,\n    } = useForm({\n        resolver: yupResolver(schema),\n    });\n    const fetchViewTopic = () => {\n        fetch(`${baseUrl}${api.showTopic}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                setTopic_name(result.topic.topic_name);\n                setTopic_article(result.topic.topic_article);\n                setTopic_content(result.topic.topic_content);\n                localStorage.setItem('topic_name', result.topic.topic_name);\n                setId(result.topic.id)\n\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n    useEffect(() => {\n        fetchViewTopic();\n    }, [])\n\n\n    const changeMultipleFiles = (e: any) => {\n        if (e.target.files) {\n            const fileArray: any = Array.from(e.target.files).map((file: any) =>\n                URL.createObjectURL(file)\n            );\n            setMultipleFiles((prevFiles) => prevFiles.concat(fileArray));\n        }\n    };\n\n\n    const onSubmit = (data: any) => {\n        var myHeaders = new Headers();\n        myHeaders.append(\"Authorization\", `Bearer ${localStorage.getItem(\"token\")}`);\n        const formData = new FormData();\n        for (const key of Object.keys(multipleFiles)) {\n            formData.append('files[]', data.file[key]);\n\n        }\n        formData.append('topic_name', topic_name)\n        var requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: formData,\n\n        };\n\n\n        fetch(`${baseUrl}${api.addTopicContent}`, requestOptions)\n            .then(response => response.json())\n            .then(res => {\n                if (res.status === true) {\n                    fetchViewTopic();\n                    setMultipleFiles([]);\n                    reset({\n                        file: ''\n                    })\n                    swal({\n                        title: \"Success!\",\n                        text: \"File upload successfully\",\n                        icon: \"success\",\n                    });\n                }\n            });\n\n\n\n\n\n    };\n\n\n    const updateTopic = () => {\n        let data = {\n            'topic_name': topic_name,\n\n        }\n        fetch(`${baseUrl}${api.updateTopic}${tid}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(data),\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    setTnError('')\n                    fetchViewTopic();\n                    swal({\n                        title: \"Success!\",\n                        text: \"Topic updated successfully\",\n                        icon: \"success\",\n                    });\n\n                }\n                else if (!topic_name) {\n                    setTnError(\"Topic name is Required\");\n\n\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText +\n                            \" - Topic not updated\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n            .catch(error => console.log('error', error));\n\n\n    }\n    const downloadFile = (id: any, file: any) => {\n        fetch(`${baseUrl}${api.downloadTopicContent}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            },\n\n        }).then(response => {\n            response.blob().then(blob => {\n                let url = window.URL.createObjectURL(blob);\n                let a = document.createElement('a');\n                a.href = url;\n                a.download = `${file}`;\n                a.click();\n            });\n\n        });\n    }\n\n    const deleteTopicContent = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteTopicContent}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n                .then(res => {\n                    if (res.status === 200) {\n                        fetchViewTopic();\n                        swal({\n                            title: \"Success!\",\n                            text: \"File deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - File not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    return (\n        <IonContent>\n            <IonCard>\n                <IonAccordionGroup>\n                    <IonAccordion value=\"first\">\n                        <IonItem slot=\"header\" color=\"light\">\n                            <IonLabel>Update Topic</IonLabel>\n                        </IonItem>\n\n                        <div className=\"ion-padding\" slot=\"content\">\n\n                            <IonItem>\n                                <IonLabel position=\"stacked\">Topic Name</IonLabel>\n                                <IonInput type=\"text\"\n                                    name=\"topic_name\"\n                                    value={topic_name}\n                                    onIonChange={(e: any) => setTopic_name(e.target.value)}\n                                    clearInput\n\n                                >\n                                </IonInput>\n                            </IonItem>\n                            <p style={{ color: \"red\" }}>\n                                {tnerror}\n                            </p>\n                            <hr />\n                            <div style={{ marginTop: \"3%\" }} className=\"text-center mb-5\">\n                                <IonButton color=\"primary\" onClick={updateTopic}>\n                                    Save\n                                </IonButton>\n\n                            </div>\n\n                        </div>\n                    </IonAccordion>\n                </IonAccordionGroup>\n\n            </IonCard>\n            <IonCard >\n\n                <IonAccordionGroup>\n                    <IonAccordion value=\"first\">\n                        <IonItem slot=\"header\" color=\"light\">\n                            <IonLabel>Topic Content</IonLabel>\n                        </IonItem>\n\n                        <div className=\"ion-padding\" slot=\"content\">\n                            <form onSubmit={handleSubmit(onSubmit)}>\n                                <input\n                                    type=\"file\"\n                                    multiple\n                                    {...register('file')}\n                                    onChange={changeMultipleFiles}\n\n                                />\n\n                                <p style={{ color: \"red\" }}>\n                                    <ErrorMessage errors={errors} name='file' />\n                                </p>\n\n\n                                <IonButton color=\"primary\" type=\"submit\">\n                                    Save\n                                </IonButton>\n                            </form>\n                            {topic_content.map((item: any, i: any) => (\n                                <IonItem key={i.toString()}>\n                                    <IonLabel > <button onClick={() => downloadFile(item.id, item.file)}>\n                                        {item.file} <i className=\"bi bi-download\"></i>\n                                    </button></IonLabel>\n\n                                    <button onClick={() => deleteTopicContent(item.id)}>\n                                        <i className=\"bi bi-trash\" title=\"delete\"></i>\n                                    </button>\n                                </IonItem>\n                            ))}\n                        </div>\n                    </IonAccordion>\n                </IonAccordionGroup>\n\n            </IonCard>\n            <IonCard >\n\n                <IonAccordionGroup>\n                    <IonAccordion value=\"first\">\n                        <IonItem slot=\"header\" color=\"light\">\n                            <IonLabel>Topic Article</IonLabel>\n                        </IonItem>\n\n                        <div className=\"ion-padding\" slot=\"content\">\n                            <TopicArticle topicArticle={topic_article} fetchViewTopic={() => fetchViewTopic()} topic_name={topic_name} />\n\n                        </div>\n                    </IonAccordion>\n                </IonAccordionGroup>\n\n            </IonCard>\n        </IonContent>\n    );\n}\n\n\nexport default ViewTopic;","/home/shama/elearning/elearnf/src/pages/teacher/QuizAttemptedList.tsx",["451","452"],[],"import React, { FC, useMemo, useState, useEffect } from 'react';\nimport MaterialReactTable, {\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    IconButton,\n    Tooltip,\n} from '@mui/material';\nimport { Autorenew } from '@mui/icons-material';\nimport baseUrl, { api } from '../../pages/Urls';\nimport { IonContent, IonItem, IonLabel } from '@ionic/react';\nimport swal from 'sweetalert';\ntype listData = {\n    id: string;\n    quiz_name: string;\n    name: string;\n    total_point: string;\n    total_question: string;\n\n};\n\nconst QuizAttemptedList: FC<{\n\n    courseId: string\n    course_name: string\n}> = (props) => {\n    const [attemptList, setAttemptList] = useState([]);\n\n    const fetchAtmList = () => {\n        fetch(`${baseUrl}${api.attemptHistory}${props.courseId}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(result => {\n                setAttemptList(result)\n\n            })\n    }\n    useEffect(() => {\n        fetchAtmList();\n\n    }, [])\n\n    const columns = useMemo<MRT_ColumnDef<listData>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'quiz_name',\n                header: 'Quiz Name',\n\n            },\n            {\n                accessorKey: 'name',\n                header: 'User Name',\n\n            },\n            {\n\n                accessorFn: (row) => `${row.total_point} / ${row.total_question}`,\n                id: 'total_point',\n                header: 'Total Mark',\n\n            },\n\n\n\n        ],\n        [],\n    );\n\n    const reAttempt = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n\n            fetch(`${baseUrl}${api.reAttempt}${id}`, {\n                method: 'PUT',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                },\n\n            }).then(res => {\n                if (res.status === 200) {\n\n                    fetchAtmList();\n                    swal({\n                        title: \"Success!\",\n                        text: \"Quiz reattempted successfully\",\n                        icon: \"success\",\n                    });\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText +\n                            \" - Quiz not reattempted\",\n                        icon: \"error\",\n                    });\n                }\n\n            })\n                .catch(error => console.log('error', error));\n\n        }\n    }\n    return (\n\n        <div className=\"container mt-2\">\n            <IonItem>\n                <IonLabel color=\"primary\">\n                    <h1>{props.course_name}</h1>\n                </IonLabel>\n            </IonItem>\n            <h1 className='text-center mb-2'>Quiz Attempted List</h1>\n            <MaterialReactTable\n                columns={columns}\n                data={attemptList}\n                getRowId={(row => `${row.id}`)}\n                enableRowActions\n                enableRowNumbers\n                enableColumnOrdering\n                renderRowActions={({ row, table }) => (\n                    <Box sx={{ display: 'flex', gap: '1rem' }}>\n\n                        <Tooltip arrow placement=\"right\" title=\"Re-attempt\">\n                            <IconButton style={{ color: \"green\" }} onClick={() => reAttempt(row.id)}>\n                                <Autorenew />\n                            </IconButton>\n                        </Tooltip>\n                    </Box>\n                )}\n\n            />\n\n        </div>\n\n\n    );\n\n};\n\nexport default QuizAttemptedList;","/home/shama/elearning/elearnf/src/pages/user/ucourse/ViewUserCourse.tsx",["453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470"],[],"import {\n    IonContent,\n    IonItem,\n    IonLabel,\n    IonCard,\n    IonAccordion,\n    IonAccordionGroup,\n    IonText,\n\n} from '@ionic/react';\nimport { IonButtons, IonButton, IonModal, IonHeader, IonTitle, IonToolbar } from '@ionic/react';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    IconButton,\n    Stack,\n    Typography,\n} from '@mui/material';\nimport { format } from 'date-fns'\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport baseUrl, { api } from '../../Urls';\n\nconst ViewUserCourse: React.FC<{\n    quiz: any[],\n    topic: any[],\n    course_name: string,\n    courseId: string,\n\n\n}> = (props) => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const history = useHistory();\n    const current_date = format(new Date(), 'yyyy-MM-dd HH:mm');\n    //console.log(current_date)\n    const downloadFile = (id: any, file: any) => {\n        fetch(`${baseUrl}${api.downloadTopicContent}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            },\n\n        }).then(response => {\n            response.blob().then(blob => {\n                let url = window.URL.createObjectURL(blob);\n                let a = document.createElement('a');\n                a.href = url;\n                a.download = `${file}`;\n                a.click();\n            });\n\n        });\n    }\n\n    // const preAttemptQuiz = (id: any) => {\n    //     let data = {\n    //         'quiz_id': id,\n\n    //     }\n\n    //     fetch(`${baseUrl}${api.preAttempt}`, {\n    //         method: 'POST',\n    //         headers: {\n    //             Accept: 'application/json',\n    //             'Content-Type': 'application/json',\n    //             'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n    //         },\n    //         body: JSON.stringify(data),\n    //     })\n\n\n\n    // }\n\n\n    return (\n        <>\n            <IonContent fullscreen={true}>\n\n                <IonText color=\"primary\">\n                    <h1 className='mx-2'>{props.course_name}</h1>\n                </IonText>\n\n                <>\n\n                    <IonCard >\n\n                        <IonAccordionGroup>\n                            <IonAccordion value=\"first\">\n                                <IonItem slot=\"header\" color=\"light\">\n                                    <IonLabel>Quizzes</IonLabel>\n                                </IonItem>\n\n                                <div className=\"ion-padding\" slot=\"content\">\n                                    {props.quiz.map((item: any, i: any) =>\n\n                                        <IonItem key={i.toString()}>\n                                            <IonLabel>\n                                                <Link className='text-decoration-none'\n                                                    onClick={() => {\n                                                        localStorage.setItem('test_end', item.test_end)\n                                                        localStorage.setItem('quiz_id', item.id)\n                                                        //preAttemptQuiz(item.id)\n                                                    }}\n\n                                                    to={format(new Date(item.start_date), 'yyyy-MM-dd HH:mm') <= current_date &&\n                                                        format(new Date(item.test_end), 'yyyy-MM-dd HH:mm') > current_date && item.ahistory.map((ah: any) => (ah.is_attempt)) != 1 ?\n                                                        `/dashboard/mycourse/${props.courseId}/quiz/${item.id}` : `/dashboard/mycourse/${props.courseId}`} >\n                                                    {item.quiz_name}\n\n                                                </Link>\n\n                                            </IonLabel>\n                                            {format(new Date(item.start_date), 'yyyy-MM-dd HH:mm') <= current_date &&\n                                                format(new Date(item.test_end), 'yyyy-MM-dd HH:mm') > current_date ?\n                                                <p className='text-info'>\n                                                    {item.ahistory.map((ah: any) => (ah.is_attempt)) == 1 ? \"You are already attempted\" : \"Now open\"}\n                                                </p> : <>\n                                                    {format(new Date(item.test_end), 'yyyy-MM-dd HH:mm') <= current_date &&\n                                                        item.ahistory.map((ah: any) => (ah.is_attempt)) != 1\n                                                        ? <p className='text-danger'>Expired</p> : <>\n                                                            {format(new Date(item.start_date), 'yyyy-MM-dd HH:mm') >= current_date ? <p className='text-success'>will start {format(new Date(item.start_date), 'yyyy-MM-dd HH:mm')} </p> :\n                                                                <p className='text-success'>You are already attempted</p>\n                                                            }\n                                                        </>}\n                                                </>\n                                            }\n\n                                        </IonItem>\n                                    )}\n                                </div>\n                            </IonAccordion>\n                        </IonAccordionGroup>\n\n                    </IonCard>\n                    {props.topic.map((item: any, i: any) =>\n                        <IonCard key={i.toString()}>\n\n                            <IonAccordionGroup>\n                                <IonAccordion value=\"first\">\n                                    <IonItem slot=\"header\" color=\"light\">\n                                        <IonLabel>{item.topic_name}</IonLabel>\n                                    </IonItem>\n\n                                    <div className=\"ion-padding\" slot=\"content\">\n                                        {item.topic_article.length == 0 && item.topic_content.length == 0 ? 'No data preview' :\n                                            <>\n                                                {item.topic_article.map((ta: any, i: any) =>\n                                                    <IonItem key={i.toString()}>\n                                                        <Link className='text-decoration-none'\n                                                            to={`/dashboard/mycourse/${props.courseId}/topic/${ta.slug}`} >\n                                                            {ta.name}</Link>\n                                                        {/* <IconButton onClick={() => setModalOpen(true)}>\n                                                            {ta.slug}\n                                                        </IconButton> */}\n\n\n                                                    </IonItem>\n\n\n\n                                                )}\n\n                                                {item.topic_content.map((tc: any, i: any) =>\n                                                    <IonItem key={i.toString()}>\n                                                        <IonLabel > <button onClick={() => downloadFile(tc.id, tc.file)}>\n                                                            {tc.file} <i className=\"bi bi-download\"></i>\n                                                        </button></IonLabel>\n                                                    </IonItem>\n\n                                                )}\n                                            </>\n\n                                        }\n                                    </div>\n                                </IonAccordion>\n                            </IonAccordionGroup>\n\n                        </IonCard>\n                    )}\n                </>\n\n            </ IonContent>\n\n        </>\n    );\n\n\n}\n\n\n// const ViewArticle: React.FC<{\n//     onClose: () => void;\n//     open: boolean;\n//     title: string;\n//     content: string;\n\n// }> = (props) => {\n//     return (\n//         <IonModal isOpen={props.open}>\n//             <IonHeader>\n//                 <IonToolbar>\n//                     <div className='text-center'>\n//                         Topic Article\n//                     </div>\n\n//                 </IonToolbar>\n//             </IonHeader>\n//             <IonContent className=\"ion-padding\">\n//                 <IonItem >\n//                     <h1 color=\"dark\">{props.title}</h1>\n\n//                 </IonItem>\n//                 <IonItem>\n//                     <p dangerouslySetInnerHTML={{ __html: props.content }}></p>\n//                 </IonItem>\n//             </IonContent>\n//             <div className='mb-3 text-end'>\n//                 <Button onClick={props.onClose}>Cancel</Button>\n//             </div>\n//         </IonModal>\n\n\n//     );\n// }\n\nconst ViewArticle: React.FC<{\n    onClose: () => void;\n    open: boolean;\n    title: string;\n    content: string;\n\n}> = (props) => {\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle > {props.title}</DialogTitle>\n            <DialogContent>\n                <Stack\n                    sx={{\n                        width: '100%',\n                        minWidth: { xs: '300px', sm: '360px', md: '400px' },\n                        gap: '1.5rem',\n                    }}\n                >\n\n                    <Typography gutterBottom dangerouslySetInnerHTML={{ __html: props.content }}>\n\n                    </Typography>\n\n                </Stack>\n            </DialogContent>\n\n            <DialogActions sx={{ p: '1.25rem' }}>\n                <Button onClick={props.onClose}>Cancel</Button>\n\n            </DialogActions>\n\n        </Dialog>\n    );\n}\nexport default ViewUserCourse;","/home/shama/elearning/elearnf/src/pages/user/ucourse/ViewTopicArticle.tsx",["471","472","473","474"],[],"\nimport {\n    IonCardHeader,\n    IonTitle,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonCardContent,\n    IonCard,\n    IonItem,\n    IonContent,\n\n\n} from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from \"react-router\";\nimport baseUrl, { api } from '../../../pages/Urls';\n\nconst ViewTopicArticle: React.FC = () => {\n    type ViewTopicArticleParams = {\n        slug: string;\n    };\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n\n\n    const history = useHistory();\n    const { slug } = useParams<ViewTopicArticleParams>();\n\n    const viewTopicArticle = () => {\n        fetch(`${baseUrl}${api.viewTopicArticle}${slug}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(result => {\n                setTitle(result.topicAticle.name);\n                setContent(result.topicAticle.content);\n\n            })\n    }\n    useEffect(() => {\n        viewTopicArticle();\n\n    }, [])\n\n    return (\n        <IonContent>\n\n            <IonCard>\n\n                <IonCardHeader>\n                    <IonToolbar>\n                        <div className=\"text-center\">\n                            <IonTitle >\n                                {title}\n                            </IonTitle>\n                        </div>\n                        {/* <IonButtons slot=\"start\">\n                            <IonButton onClick={() => history.goBack()} > <i className=\"bi bi-backspace\"> Back</i> </IonButton>\n                        </IonButtons> */}\n                    </IonToolbar>\n                </IonCardHeader>\n\n\n                <IonCardContent>\n                    <IonItem>\n                        <h1 color=\"dark\">{title}</h1>\n\n                    </IonItem>\n                    <IonItem>\n                        <h2 dangerouslySetInnerHTML={{ __html: content }}></h2>\n                    </IonItem>\n\n                </IonCardContent>\n\n            </IonCard>\n\n        </IonContent>\n\n    );\n};\nexport default ViewTopicArticle;","/home/shama/elearning/elearnf/src/pages/user/ucourse/QuizResult.tsx",["475"],[],"\nimport {\n    IonContent,\n    IonButton,\n    IonCardContent,\n    IonText,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonCardSubtitle,\n\n} from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\nimport baseUrl, { api } from '../../Urls';\nimport { useHistory } from 'react-router-dom';\nconst QuizResult: React.FC<{\n    courseId: string,\n\n}> = (props) => {\n\n\n    const [point, setPoint] = useState('');\n    const [total_question, setTotalQuestion] = useState('');\n    const [quiz_name, setQuiz_name] = useState('');\n    const [user, setUser] = useState('');\n    const history = useHistory();\n\n    useEffect(() => {\n        fetch(`${baseUrl}${api.quizResult}${localStorage.getItem('quiz_id')}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(result => {\n                // setResult(result)\n                setPoint(result.map((item: any) => (item.total_point)))\n                setTotalQuestion(result.map((item: any) => (item.total_question)))\n                setQuiz_name(result.map((item: any) => (item.quiz_name)))\n                setUser(result.map((item: any) => (item.name)))\n\n            })\n\n\n    }, []);\n\n\n    return (\n\n        <IonContent >\n            <IonCard>\n                <IonCardHeader>\n                    <div className='text-center mb-3'>\n                        <IonCardTitle>\n                            <IonText color=\"primary\">\n                                <h1>Congratulations!</h1>\n\n                            </IonText>\n                            <IonText color=\"dark\">\n                                <h1>{user}</h1>\n\n                            </IonText>\n\n                        </IonCardTitle>\n                        <IonCardSubtitle>You have finished <strong>{quiz_name}</strong> Successfully  </IonCardSubtitle>\n                    </div>\n\n                </IonCardHeader>\n\n                <IonCardContent>\n                    <div className='text-center'>\n                        <h1>Correct answer: {point} / {total_question}</h1>\n\n                    </div>\n                </IonCardContent>\n                <div className='text-center mt-3 mb-5'>\n                    <IonButton fill=\"outline\" href={`/dashboard/mycourse/${props.courseId}`}>Back to Course</IonButton>\n                </div>\n            </IonCard>\n        </IonContent>\n    )\n}\nexport default QuizResult;","/home/shama/elearning/elearnf/src/pages/user/ucourse/QuizQuestion.tsx",["476","477","478","479","480","481","482","483","484","485"],[],"import {\n    IonContent,\n    IonItem,\n    IonButton,\n    IonCardContent,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonLabel, IonList, IonRadio, IonRadioGroup, IonInput, IonCheckbox, IonItemGroup, IonItemDivider\n} from '@ionic/react';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useHistory, useParams, useLocation } from 'react-router-dom';\nimport { format } from 'date-fns'\nimport baseUrl, { api } from '../../Urls';\nimport '../../../pages/Style.css';\nimport ReactPaginate from \"react-paginate\";\n\n\nconst QuizQuestion: React.FC<{\n    courseId: string,\n\n}> = (props) => {\n    type QuizQuestion = {\n        id: string;\n    };\n    const { id } = useParams<QuizQuestion>();\n    const history = useHistory();\n    const [question, setQuestion] = useState([]);\n    const [isAns, setIsAns]: any[] = useState([]);\n    const [test_end, setTest_end] = useState(format(new Date(), 'yyyy-MM-dd HH:mm:ss'));\n    const [quizId, setQuizId] = useState('');\n    const [isAttempt, setIsAttempt] = useState('');\n\n\n\n\n\n    ////\n    useEffect(() => {\n        return history.listen(() => { // listen\n            if (history.action === \"POP\") {\n                history.replace(`/dashboard/mycourse/${localStorage.getItem(\"course_id\")}/quiz/${localStorage.getItem(\"quiz_id\")}`);\n            }\n        });\n    }, [history]);\n\n    useEffect(() => {\n\n\n        fetch(`${baseUrl}${api.viewQuiz}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(result => {\n                setQuestion(result.question)\n                setTest_end(result.question[0].test_end)\n                setQuizId(result.question.map((item: any) => (item.quiz_id)))\n                setIsAttempt(result.quiz.map((item: any) => (item.is_attempt)))\n                //localStorage.setItem('quiz_id', result.question[0].quiz_id)\n                //localStorage.setItem('test_end', result.question[0].test_end)\n                //history.replace(`/dashboard/mycourse/${props.courseId}/quiz/${localStorage.getItem(\"quiz_id\")}`)\n            })\n\n\n    }, []);\n\n    //console.log(question)\n    let attempt = {};\n    question.map((q: any, i) => {\n        attempt = { ...attempt, [q.id]: isAns[i] }\n    })\n    const handleChange = (e: any, i: any) => {\n        const inputdata = [...isAns];\n        inputdata[i] = e.target.value;\n        setIsAns(inputdata)\n\n    };\n\n\n    const submit = () => {\n        if (quizId && attempt) {\n            let data = {\n\n                'attemptans': attempt,\n                'quiz_id': quizId,\n\n            }\n\n            fetch(`${baseUrl}${api.quizAttempt}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(data),\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n                        //window.confirm('Want to submit?')\n                        window.location.href = `/dashboard/mycourse/${props.courseId}/quiz/result`;\n\n                    }\n                    else {\n                        throw Error([response.status, response.statusText].join(' '));\n                    }\n                })\n\n                .catch(error => console.log('error', error));\n\n\n        }\n\n    };\n\n\n\n    ///////////////////////////\n\n    const st = format(new Date(), 'yyyy-MM-dd HH:mm:ss');\n    const etm: any = localStorage.getItem(\"test_end\");\n    const et = format(new Date(etm), 'yyyy-MM-dd HH:mm:ss');\n    const end = new Date(et).getTime();\n    const start = new Date(st).getTime();\n    const ddd = end - start;\n    const [deadline] = useState(new Date(Date.now() + ddd));\n\n    const useCountdown = (deadline: Date) => {\n        // Time is in seconds\n        const [time, setTime] = useState(\n            Math.max(0, Math.floor((deadline.getTime() - Date.now()) / 1000))\n        );\n\n        const decrement = () =>\n            setTime((prevTime) => {\n                return prevTime === 0 ? 0 : prevTime - 1;\n            });\n\n        useEffect(() => {\n            //const ids = setInterval(decrement, 1000);\n            const ids = setInterval(() => {\n                decrement()\n                if (time == 0) {\n                    submit()\n                }\n\n            }, 1000);\n            return () => clearInterval(ids);\n        }, [time]);\n\n        const format = (num: number): string => {\n            return num < 10 ? '0' + num : num.toString();\n        };\n\n        return {\n            //days: format(Math.floor(time / (3600 * 24))),\n            hours: format(Math.floor((time / 3600) % 24)),\n            minutes: format(Math.floor((time / 60) % 60)),\n            seconds: format(time % 60),\n        };\n    };\n\n    const timer = useCountdown(deadline);\n\n    return (\n\n        <>\n            <IonContent>\n                {isAttempt != '1' ?\n                    <IonItemGroup>\n                        <IonItemDivider color=\"light\" sticky>\n                            <IonLabel>\n                                <h1>Total Question -- {question.length}</h1>\n                                <h1 className='mt-2'><i className=\"bi bi-alarm mx-2\"></i>\n                                    {timer.hours}:{timer.minutes}:{timer.seconds}\n                                </h1>\n\n                            </IonLabel>\n\n                        </IonItemDivider>\n                        {question\n                            .map((qstn: any, i: any) =>\n\n                                <IonCard key={i.toString()}>\n                                    <IonCardHeader>\n                                        <IonCardTitle>\n                                            <div className='mb-2'>\n                                                {i + 1} / {question.length} -- {qstn.title}\n                                            </div>\n\n\n                                            <h2 dangerouslySetInnerHTML={{ __html: qstn.q_content }}></h2>\n\n                                            <>\n                                                {\n                                                    (qstn.question_type != 'MCQ') ?\n                                                        <>\n                                                            <IonItem>\n                                                                <IonInput name='isAns'\n                                                                    value={isAns[i]}\n                                                                    placeholder=\"enter answer\"\n                                                                    onIonChange={(e) => handleChange(e, i)}\n\n                                                                >\n\n                                                                </IonInput>\n\n                                                            </IonItem>\n                                                        </> :\n                                                        <>\n                                                            <IonList>\n\n                                                                <IonRadioGroup name='isAns'\n                                                                    value={isAns[i]}\n                                                                    onIonChange={(e) => handleChange(e, i)}\n\n                                                                >\n                                                                    {qstn.option.map((op: any, index: any) => {\n                                                                        return (\n\n                                                                            <IonItem key={`option-${index}`}>\n                                                                                <IonLabel >{op.option}</IonLabel>\n                                                                                <IonRadio slot=\"start\" value={op.option} >\n                                                                                </IonRadio>\n\n                                                                            </IonItem>\n\n                                                                        );\n                                                                    })}\n                                                                </IonRadioGroup>\n                                                            </IonList>\n                                                        </>\n                                                }\n\n\n                                            </>\n                                        </IonCardTitle>\n                                    </IonCardHeader>\n                                </IonCard>\n\n\n                            )}\n\n\n                        <div className='text-center mt-3 mb-5'>\n                            <IonButton id=\"quiz_submit\" fill=\"outline\" onClick={submit}>submit</IonButton>\n                        </div>\n                    </IonItemGroup>\n                    :\n                    <IonCard>\n                        <IonCardHeader>\n                            <IonCardTitle>\n                                <div className='text-center mt-3 mb-5'>\n                                    You Already Finished your Quiz\n                                </div>\n                            </IonCardTitle>\n                        </IonCardHeader>\n\n                        <IonCardContent>\n                            <div className='text-center mt-3 mb-5'>\n                                <IonButton fill=\"outline\" href={`/dashboard/mycourse/${props.courseId}`}>Back to Course</IonButton>\n                            </div>\n                        </IonCardContent>\n                    </IonCard>\n                }\n\n            </IonContent>\n\n        </>\n    );\n};\n\n\nexport default QuizQuestion;","/home/shama/elearning/elearnf/src/pages/teacher/TopicArticle.tsx",["486","487","488"],[],"import {\n\n    IonButton,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonCardContent,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonToolbar,\n    IonTitle,\n\n\n} from \"@ionic/react\";\nimport React, { FC, useMemo, useState, useEffect } from 'react';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport MaterialReactTable, {\n\n    MRT_ColumnDef,\n\n} from 'material-react-table';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Stack,\n    Tooltip,\n} from '@mui/material';\nimport { Delete, Edit, Add, Visibility } from '@mui/icons-material';\nimport baseUrl, { api, tinyMceKey } from '../../pages/Urls';\nimport { Collapse } from 'react-bootstrap'\nimport { Editor } from '@tinymce/tinymce-react';\nimport swal from 'sweetalert';\ntype articleData = {\n    id: string;\n    name: string;\n    slug: string;\n\n};\n\nconst TopicArticle: FC<{\n    fetchViewTopic: () => void;\n    topicArticle: any\n    topic_name: string\n}> = (props) => {\n    const [articleData, setArticleData] = useState({});\n    const [collapse, setCollapse] = useState(false);\n    const [modalOpen, setModalOpen] = useState(false);\n    const [error, setError] = useState('');\n    const [tAid, setTAId] = useState('');\n    const type = tAid ? \"E\" : \"C\";\n    const {\n        handleSubmit,\n        register,\n        formState: { errors },\n        reset,\n        control,\n        setValue,\n        clearErrors\n    } = useForm({\n        defaultValues: {\n            id: '',\n            topic_name: localStorage.getItem(\"topic_name\"),\n            name: '',\n            content: '',\n            slug: '',\n\n        }\n    });\n\n    const columns = useMemo<MRT_ColumnDef<articleData>[]>(\n        () => [\n\n\n            {\n                accessorKey: 'name',\n                header: 'Article Name',\n\n            },\n            {\n                accessorKey: 'slug',\n                header: 'Article Slug',\n\n            },\n\n\n        ],\n        [],\n    );\n\n    const makeSlug = (e: any) => {\n\n        let data = {\n            'name': e.target.value,\n        }\n        fetch(`${baseUrl}${api.topicArticleSlug}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(data),\n        }).then(res => res.json())\n            .then((res) => {\n                setValue('slug', res)\n            })\n\n\n\n    }\n    const handleChange = (e: any) => {\n\n        const slg = e.target.value;\n\n        if (slg) {\n            fetch(`${baseUrl}${api.slugChecking}${slg}`, {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n            })\n                .then(resp => resp.json())\n                .then(res => {\n                    if (Object.keys(res).length != 0) {\n                        setError('Slug already exists')\n                    } else {\n                        setError('');\n                    }\n                })\n        }\n\n\n\n    }\n\n    const editTopicArticle = (id: any) => {\n        setTAId(id)\n        fetch(`${baseUrl}${api.showTopicArticle}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                setValue('name', result.topicAticle.name);\n                setValue('content', result.topicAticle.content);\n                setValue('id', result.topicAticle.id);\n\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n\n\n    }\n    const addTopicArticle = (e: any) => {\n        {\n\n            fetch(`${baseUrl}${api.addTopicArticle}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(e),\n\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n                        props.fetchViewTopic();\n                        setCollapse(false)\n                        swal({\n                            title: \"Success!\",\n                            text: \"Topic Article Created successfully\",\n                            icon: \"success\",\n                        });\n\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: response.status + ' ' + response.statusText + \" - Topic Article not Created\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n\n                .catch(error => console.log('error', error));\n\n        }\n\n    }\n    const updateTopicArticle = (e: any) => {\n\n        fetch(`${baseUrl}${api.updateTopicArticle}${e.id}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(e),\n\n        })\n\n            .then(res => {\n                if (res.status === 200) {\n                    props.fetchViewTopic();\n                    setCollapse(false)\n                    swal({\n                        title: \"Success!\",\n                        text: \"Topic Article updated successfully\",\n                        icon: \"success\",\n                    });\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: res.status + ' ' + res.statusText +\n                            \" - Topic Article not updated\",\n                        icon: \"error\",\n                    });\n                }\n            })\n\n            .catch(error => console.log('error', error));\n\n\n\n    }\n    const onSubmit = (e: any) => {\n        type === \"C\" ? addTopicArticle(e) : updateTopicArticle(e);\n    }\n    const deleteTopicArticle = (id: any) => {\n        if (window.confirm('Are you sure?')) {\n            fetch(`${baseUrl}${api.deleteTopicArticle}${id}`, {\n                method: 'DELETE',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n                }\n\n            })\n\n                .then(res => {\n                    if (res.status === 200) {\n                        props.fetchViewTopic();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Topic Article deleted successfully\",\n                            icon: \"success\",\n                        });\n                    } else {\n                        swal({\n                            title: \"Error!\",\n                            text: res.status + ' ' + res.statusText +\n                                \" - Topic Article not deleted\",\n                            icon: \"error\",\n                        });\n                    }\n\n                })\n                .catch(error => console.log('error', error));\n        }\n    }\n    return (\n        <>\n            <div className=\"container mt-5\">\n                <Collapse in={collapse}>\n\n                    <div>\n                        <IonCard>\n                            <IonCardHeader>\n                                <IonCardTitle>\n                                    <IonToolbar>\n                                        <IonTitle><h1 className=\"text-center display-6\">{type === \"C\" ? \"Create\" : \"Edit\"} Topic Article</h1></IonTitle>\n                                    </IonToolbar>\n                                </IonCardTitle>\n                            </IonCardHeader>\n\n                            <IonCardContent>\n\n                                <form onSubmit={handleSubmit(onSubmit)}>\n                                    {type === 'C' ?\n                                        <>\n                                            <IonItem>\n                                                <IonLabel position=\"stacked\">Title</IonLabel>\n                                                <IonInput placeholder=\"name\"\n                                                    type=\"text\"\n                                                    {...register(\"name\", { required: \"Name Is Required\" })}\n                                                    onBlur={(e: any) => {\n\n                                                        setValue('name', e.target.value)\n                                                        makeSlug(e)\n                                                    }}\n                                                >\n                                                </IonInput>\n                                            </IonItem>\n                                            <p style={{ color: \"red\" }}>\n                                                <ErrorMessage errors={errors} name=\"name\" />\n                                            </p>\n                                            <IonItem>\n                                                <IonLabel position=\"stacked\">Slug</IonLabel>\n                                                <IonInput placeholder=\"slug\"\n                                                    type=\"text\"\n\n                                                    {...register(\"slug\", { required: \"Slug Is Required\" })}\n                                                    onIonChange={(e: any) => handleChange(e)}\n                                                >\n                                                </IonInput>\n                                            </IonItem>\n                                            <p style={{ color: \"red\" }}>\n                                                <ErrorMessage errors={errors} name=\"slug\" />\n                                            </p>\n                                            <p style={{ color: \"red\" }}>\n                                                {error ? error : ''}\n                                            </p>\n                                        </>\n                                        :\n                                        <>\n                                            <IonItem>\n                                                <IonLabel position=\"stacked\">Title</IonLabel>\n                                                <IonInput placeholder=\"name\"\n                                                    type=\"text\"\n                                                    {...register(\"name\", { required: \"Name Is Required\" })}\n                                                    onBlur={(e: any) => {\n\n                                                        setValue('name', e.target.value)\n                                                        makeSlug(e)\n                                                    }}\n                                                >\n                                                </IonInput>\n                                            </IonItem>\n                                            <p style={{ color: \"red\" }}>\n                                                <ErrorMessage errors={errors} name=\"name\" />\n                                            </p>\n                                        </>\n                                    }\n                                    <IonItem>\n                                        <IonLabel position=\"stacked\" >Content</IonLabel>\n                                        <div style={{ marginTop: \"3%\", marginBottom: \"3%\" }}>\n                                            <Controller\n                                                name=\"content\"\n                                                control={control}\n                                                rules={{\n                                                    required: 'Content is required',\n                                                }}\n                                                render={({ field: { ...rest } }) => (\n                                                    <Editor\n                                                        apiKey={tinyMceKey}\n                                                        textareaName=\"content\"\n                                                        value={rest.value}\n\n                                                        init={{\n                                                            height: 500,\n                                                            width: 1030,\n                                                            menubar: true,\n                                                            plugins: [\n\n                                                                'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',\n                                                                'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',\n                                                                'insertdatetime', 'media', 'table', 'code', 'help', 'wordcount'\n\n                                                            ],\n\n                                                            toolbar: 'undo redo | blocks | ' +\n                                                                'bold italic forecolor | alignleft aligncenter ' +\n                                                                'alignright alignjustify | bullist numlist outdent indent | ' +\n                                                                'removeformat | help',\n                                                            content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\n\n                                                        }}\n                                                        onEditorChange={(e) => {\n                                                            setValue('content', e)\n                                                        }}\n                                                    />\n\n                                                )}\n                                            />\n                                        </div>\n\n                                    </IonItem>\n                                    <p style={{ color: \"red\" }}>\n                                        <ErrorMessage errors={errors} name=\"content\" />\n                                    </p>\n\n                                    <div style={{ marginTop: \"3%\" }} className=\"text-center mb-5\">\n                                        <IonButton color=\"danger\" onClick={() => setCollapse(false)}>Cancel</IonButton>\n                                        <IonButton color=\"primary\" type=\"submit\">\n                                            {type === \"C\" ? \"Create\" : \"Save\"}\n                                        </IonButton>\n\n                                    </div>\n                                </form>\n                            </IonCardContent>\n                        </IonCard>\n                    </div>\n\n                </Collapse>\n\n                <h1 className='text-center mb-2'>List of Topic Articles</h1>\n                <MaterialReactTable\n                    columns={columns}\n                    data={props.topicArticle}\n                    getRowId={(row => `${row.id}`)}\n\n                    enableRowActions\n                    enableRowNumbers\n                    renderRowActions={({ row, table }) => (\n                        <Box sx={{ display: 'flex', gap: '1rem' }}>\n                            <Tooltip arrow placement=\"left\" title=\"Edit\">\n                                <IconButton aria-expanded={collapse} onClick={() => {\n                                    editTopicArticle(row.id)\n                                    setCollapse(!collapse);\n                                    clearErrors([\n                                        'name',\n                                        'content',\n                                        'slug'\n\n                                    ])\n                                }}>\n                                    <Edit />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"left\" title=\"View\" >\n                                <IconButton onClick={() => {\n\n                                    setModalOpen(true);\n                                    setArticleData(row.original)\n                                }}>\n\n                                    <Visibility />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip arrow placement=\"right\" title=\"Delete\">\n                                <IconButton color=\"error\" onClick={() => deleteTopicArticle(row.id)}>\n                                    <Delete />\n                                </IconButton>\n                            </Tooltip>\n                        </Box>\n                    )}\n                    renderTopToolbarCustomActions={() => (\n                        <Tooltip title=\"Add-Article\">\n                            <IconButton aria-expanded={collapse} onClick={() => {\n                                setCollapse(!collapse)\n                                setTAId('')\n                                reset({\n                                    name: '',\n                                    slug: '',\n                                    content: '',\n                                    topic_name: localStorage.getItem(\"topic_name\"),\n                                })\n                            }}>\n                                Create <Add />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                />\n                <ViewArticle\n                    open={modalOpen}\n                    onClose={() => {\n                        setModalOpen(false)\n\n                    }}\n\n                    articleData={articleData}\n                />\n            </div>\n        </>\n\n    );\n\n\n};\n\n\nconst ViewArticle: FC<{\n    onClose: () => void;\n\n    open: boolean;\n    articleData: any;\n\n}> = (props) => {\n\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle textAlign=\"center\">View Article</DialogTitle>\n            <DialogContent>\n                <Stack\n                    sx={{\n                        width: '100%',\n                        minWidth: { xs: '300px', sm: '360px', md: '400px' },\n                        //gap: '1.5rem',\n                    }}\n                >\n                    <IonItem>\n                        <IonLabel>\n                            <h2 className=\"mb-3 text-center\">{props.articleData.name}</h2>\n\n                        </IonLabel>\n                    </IonItem>\n\n                    <IonItem>\n                        <IonLabel>\n\n                            <p dangerouslySetInnerHTML={{ __html: props.articleData.content }}></p>\n                        </IonLabel>\n                    </IonItem>\n\n                </Stack>\n\n            </DialogContent>\n            <DialogActions sx={{ p: '1.25rem' }}>\n                <Button onClick={props.onClose}>Cancel</Button>\n\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nexport default TopicArticle;","/home/shama/elearning/elearnf/src/pages/teacher/AddQuestion.tsx",["489","490","491"],[],"import {\n    IonButton,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonCardContent,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonToolbar,\n    IonTitle,\n    IonText,\n} from \"@ionic/react\";\nimport {\n    Box,\n    FormControl,\n    NativeSelect,\n} from '@mui/material';\nimport React, { useState, useEffect } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport { Collapse } from 'react-bootstrap'\nimport baseUrl, { api } from '../../pages/Urls';\nimport Select from 'react-select';\nimport swal from 'sweetalert';\nimport { useForm, Controller, useFieldArray } from \"react-hook-form\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nconst AddQuestion: React.FC<{\n\n    level: any[]\n    collapse: boolean\n    onClose: () => void;\n    course_name: string\n    fetchShowCourse: () => void\n}> = (props) => {\n    const [qType, setQType] = useState('');\n    const [error, setError] = useState('');\n    const [topic, setTopic] = useState([]);\n    const [levelOptions, setLevelOptions] = useState([{}]);\n\n    const {\n        handleSubmit,\n        register,\n        formState: { errors },\n        reset,\n        control,\n        setValue,\n        watch,\n        getValues\n    } = useForm({\n        defaultValues: {\n\n            level_name: {},\n            topic_name: {},\n            title: '',\n            q_content: '',\n            question_type: '',\n            answer: '',\n            option: [{ data: '' }, { data: '' }]\n\n\n        }\n\n    });\n    const { fields, remove, append } = useFieldArray({\n        name: 'option',\n        control,\n    });\n\n    useEffect(() => {\n        setLevelOptions(props.level.map((item: any) => ({\n            label: item.level_name,\n            value: item.level_name,\n\n        })))\n    }, [props.level])\n    useEffect(() => {\n        setQType('');\n        setError('')\n        reset({\n            level_name: '',\n            topic_name: '',\n            title: '',\n            q_content: '',\n            question_type: '',\n            answer: '',\n            option: [{ data: '' }, { data: '' }]\n        })\n    }, [props.collapse])\n\n    const handleSelectChange = (e: any) => {\n        let data = {\n            'level_name': e.value,\n        }\n\n        fetch(`${baseUrl}${api.LevelTopic}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            },\n            body: JSON.stringify(data),\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setTopic(resp.map((item: any) => ({\n                    label: item.topic_name,\n                    value: item.topic_name\n                })))\n            })\n\n\n    }\n\n    const addQuestion = (e: any) => {\n\n        {\n\n            fetch(`${baseUrl}${api.addQuestion}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(e),\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n                        props.fetchShowCourse();\n                        props.onClose();\n                        swal({\n                            title: \"Success!\",\n                            text: \"Question Created successfully\",\n                            icon: \"success\",\n                        });\n\n                    } else if (response.status === 406) {\n                        setError('At least two option is required')\n                    }\n                    else {\n\n                        throw Error([response.status, response.statusText].join(' '));\n                    }\n                })\n\n                .catch(error => console.log('error', error));\n\n        }\n    }\n\n    return (\n        <Collapse in={props.collapse}>\n            <div className=\"container mt-5 mb-5 \">\n\n                <IonCard>\n                    <IonCardHeader>\n                        <IonCardTitle>\n                            <IonToolbar>\n                                <IonTitle><h1 className=\"text-center display-6\">add Question</h1></IonTitle>\n                            </IonToolbar>\n                        </IonCardTitle>\n                    </IonCardHeader>\n                    <hr />\n                    <IonCardContent>\n                        <form onSubmit={handleSubmit(addQuestion)}>\n                            <IonItem>\n                                <IonLabel position=\"stacked\">Level</IonLabel>\n                                <div className=\"mt-2\" style={{ width: '100%' }}>\n\n                                    <Controller\n                                        control={control}\n                                        name=\"level_name\"\n                                        rules={{\n                                            required: 'Level name is required',\n                                        }}\n\n                                        render={() => (\n                                            <Select\n\n                                                menuPortalTarget={document.body}\n                                                options={levelOptions}\n                                                value={getValues('level_name')}\n                                                placeholder={<i className=\"bi bi-search\"> Select Level</i>}\n                                                onChange={(e: any) => {\n                                                    setValue('level_name', e)\n                                                    handleSelectChange(e)\n                                                }}\n\n\n                                            />\n\n                                        )}\n\n                                    />\n\n\n                                </div>\n\n                            </IonItem>\n                            <p style={{ color: \"red\" }}>\n                                <ErrorMessage errors={errors} name='level_id' />\n                            </p>\n                            <IonItem>\n                                <IonLabel position=\"stacked\">Topic</IonLabel>\n                                <div className=\"mt-2\" style={{ width: '100%' }}>\n\n                                    <Controller\n                                        control={control}\n                                        name=\"topic_name\"\n                                        rules={{\n                                            required: 'Topic name is required',\n                                        }}\n                                        render={() => (\n                                            <Select\n\n                                                menuPortalTarget={document.body}\n                                                options={topic}\n                                                value={getValues('topic_name')}\n                                                placeholder={<i className=\"bi bi-search\"> Select Topic</i>}\n                                                onChange={(e: any) => setValue('topic_name', e)}\n\n                                            />\n\n                                        )}\n\n                                    />\n                                </div>\n\n                            </IonItem>\n                            <p style={{ color: \"red\" }}>\n                                <ErrorMessage errors={errors} name='topic_name' />\n                            </p>\n                            <IonItem>\n                                <IonLabel position=\"stacked\">Question Type</IonLabel>\n                                <Box sx={{ width: '100%' }}>\n                                    <FormControl fullWidth sx={{ mt: 1 }}>\n                                        <NativeSelect\n                                            {...register(\"question_type\", { required: \"Question type Is Required\" })}\n                                            onChange={(e: any) => setQType(e.target.value)}\n                                        >\n                                            <option value='MCQ'>MCQ</option>\n                                            <option value='SQ'>Short Question</option>\n\n\n                                        </NativeSelect>\n                                    </FormControl>\n                                </Box>\n\n\n                            </IonItem>\n                            <p style={{ color: \"red\" }}>\n                                <ErrorMessage errors={errors} name='question_type' />\n                            </p>\n                            <IonItem>\n                                <IonLabel position=\"stacked\">Question</IonLabel>\n                                <IonInput type=\"text\"\n\n                                    {...register(\"title\", { required: \"Question Title Is Required\" })}></IonInput>\n                            </IonItem>\n                            <p style={{ color: \"red\" }}>\n                                <ErrorMessage errors={errors} name='title' />\n                            </p>\n                            <IonItem>\n                                <IonLabel position=\"stacked\" >Content</IonLabel>\n                                <div style={{ marginTop: \"3%\", marginBottom: \"3%\" }}>\n                                    <Controller\n                                        name=\"q_content\"\n                                        control={control}\n\n                                        render={({ field: { ...rest } }) => (\n                                            <Editor\n                                                textareaName=\"q_content\"\n                                                value={rest.value}\n\n                                                init={{\n                                                    height: 500,\n                                                    width: 1030,\n                                                    menubar: true,\n                                                    plugins: [\n\n                                                        'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',\n                                                        'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',\n                                                        'insertdatetime', 'media', 'table', 'code', 'help', 'wordcount'\n\n                                                    ],\n\n                                                    toolbar: 'undo redo | blocks | ' +\n                                                        'bold italic forecolor | alignleft aligncenter ' +\n                                                        'alignright alignjustify | bullist numlist outdent indent | ' +\n                                                        'removeformat | help',\n                                                    content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\n\n                                                }}\n                                                onEditorChange={(e) => {\n                                                    setValue('q_content', e)\n                                                }}\n                                            />\n\n                                        )}\n                                    />\n                                </div>\n\n                            </IonItem>\n                            {qType === 'MCQ' ?\n                                <>\n                                    <IonItem>\n                                        <IonText color=\"primary\">\n                                            <h2 className=\"mt-3 mb-3\">Add Question Option</h2>\n                                        </IonText>\n\n                                    </IonItem>\n                                    <IonItem>\n                                        <input type='hidden'\n                                            {...register('answer', { required: \"Select one Answer\" })}\n                                        >\n                                        </input>\n\n                                        <div>\n\n                                            {\n\n                                                fields.map((x, i) => {\n\n                                                    return (\n                                                        <div key={x.id} className=\"row mb-3 mt-3\">\n                                                            <div className=\" col-md-1\">\n\n                                                                <input className=\"mx-2 mt-4\"\n                                                                    type=\"radio\"\n                                                                    name=\"answer\"\n                                                                    onChange={(e: any) => {\n                                                                        setValue('answer', watch(`option.${i}.data`))\n                                                                    }}\n                                                                />\n\n                                                            </div>\n                                                            <div className=\" col-md-6\">\n\n                                                                <IonItem>\n                                                                    <IonLabel position=\"stacked\">Option</IonLabel>\n                                                                    <IonInput type=\"text\"\n\n                                                                        {...register(`option.${i}.data` as const, { required: \"Option Is Required\" })}\n\n                                                                    >\n                                                                    </IonInput>\n                                                                </IonItem>\n\n                                                                <p style={{ color: \"red\" }}>\n                                                                    <ErrorMessage errors={errors} name={`option.${i}.data`} />\n                                                                </p>\n\n                                                            </div>\n                                                            <div className=\"col-md-3 mt-4\">\n                                                                {\n                                                                    fields.length !== 1 &&\n                                                                    <button onClick={() => remove(i)}>X</button>\n                                                                }\n                                                                {\n                                                                    fields.length - 1 == i &&\n                                                                    <button onClick={() => append({ data: '' })}>\n                                                                        <i className=\"bi bi-plus-circle-fill\" title=\"add-option\"></i>\n                                                                    </button>\n                                                                }\n\n\n                                                            </div>\n\n\n\n                                                        </div>\n                                                    );\n                                                })}\n\n                                        </div>\n\n                                    </IonItem>\n                                    <p style={{ color: \"red\" }}>\n                                        <ErrorMessage errors={errors} name='answer' />\n                                        <br />\n                                        {error ? error : ''}\n                                    </p>\n\n                                </>\n                                :\n                                <>\n                                    <IonItem>\n                                        <IonLabel position=\"stacked\">Answer</IonLabel>\n                                        <IonInput type=\"text\"\n\n                                            {...register('answer', { required: \"Answer Is Required\" })}></IonInput>\n                                    </IonItem>\n                                    <p style={{ color: \"red\" }}>\n                                        <ErrorMessage errors={errors} name='answer' />\n                                    </p>\n                                </>\n                            }\n                            <hr />\n                            <div style={{ marginTop: \"3%\" }} className=\"text-center mb-5\">\n                                <IonButton color=\"danger\" onClick={() => {\n                                    props.onClose();\n\n                                }}>\n                                    Cancel\n                                </IonButton>\n                                <IonButton color=\"primary\" type=\"submit\">\n                                    Create\n                                </IonButton>\n\n                            </div>\n                        </form>\n                    </IonCardContent>\n                </IonCard>\n\n            </div>\n\n        </Collapse >\n    )\n}\nexport default AddQuestion;",{"ruleId":"492","severity":1,"message":"493","line":16,"column":16,"nodeType":"494","messageId":"495","endLine":16,"endColumn":24},{"ruleId":"492","severity":1,"message":"496","line":27,"column":12,"nodeType":"494","messageId":"495","endLine":27,"endColumn":22},{"ruleId":"497","severity":1,"message":"498","line":32,"column":8,"nodeType":"499","endLine":32,"endColumn":10,"suggestions":"500"},{"ruleId":"492","severity":1,"message":"501","line":15,"column":27,"nodeType":"494","messageId":"495","endLine":15,"endColumn":36},{"ruleId":"492","severity":1,"message":"502","line":19,"column":19,"nodeType":"494","messageId":"495","endLine":19,"endColumn":29},{"ruleId":"492","severity":1,"message":"503","line":41,"column":9,"nodeType":"494","messageId":"495","endLine":41,"endColumn":14},{"ruleId":"504","severity":1,"message":"505","line":68,"column":49,"nodeType":"506","messageId":"507","endLine":68,"endColumn":51},{"ruleId":"504","severity":1,"message":"508","line":91,"column":37,"nodeType":"506","messageId":"507","endLine":91,"endColumn":39},{"ruleId":"492","severity":1,"message":"509","line":19,"column":17,"nodeType":"494","messageId":"495","endLine":19,"endColumn":25},{"ruleId":"492","severity":1,"message":"501","line":19,"column":27,"nodeType":"494","messageId":"495","endLine":19,"endColumn":36},{"ruleId":"504","severity":1,"message":"508","line":47,"column":49,"nodeType":"506","messageId":"507","endLine":47,"endColumn":51},{"ruleId":"504","severity":1,"message":"508","line":48,"column":38,"nodeType":"506","messageId":"507","endLine":48,"endColumn":40},{"ruleId":"504","severity":1,"message":"508","line":49,"column":38,"nodeType":"506","messageId":"507","endLine":49,"endColumn":40},{"ruleId":"504","severity":1,"message":"508","line":50,"column":38,"nodeType":"506","messageId":"507","endLine":50,"endColumn":40},{"ruleId":"504","severity":1,"message":"508","line":51,"column":51,"nodeType":"506","messageId":"507","endLine":51,"endColumn":53},{"ruleId":"504","severity":1,"message":"508","line":52,"column":48,"nodeType":"506","messageId":"507","endLine":52,"endColumn":50},{"ruleId":"492","severity":1,"message":"510","line":142,"column":11,"nodeType":"494","messageId":"495","endLine":142,"endColumn":19},{"ruleId":"504","severity":1,"message":"508","line":275,"column":42,"nodeType":"506","messageId":"507","endLine":275,"endColumn":44},{"ruleId":"492","severity":1,"message":"511","line":4,"column":5,"nodeType":"494","messageId":"495","endLine":4,"endColumn":13},{"ruleId":"492","severity":1,"message":"512","line":17,"column":24,"nodeType":"494","messageId":"495","endLine":17,"endColumn":27},{"ruleId":"492","severity":1,"message":"513","line":62,"column":12,"nodeType":"494","messageId":"495","endLine":62,"endColumn":17},{"ruleId":"492","severity":1,"message":"514","line":63,"column":12,"nodeType":"494","messageId":"495","endLine":63,"endColumn":19},{"ruleId":"492","severity":1,"message":"515","line":64,"column":12,"nodeType":"494","messageId":"495","endLine":64,"endColumn":16},{"ruleId":"492","severity":1,"message":"516","line":65,"column":12,"nodeType":"494","messageId":"495","endLine":65,"endColumn":20},{"ruleId":"497","severity":1,"message":"517","line":92,"column":8,"nodeType":"499","endLine":92,"endColumn":10,"suggestions":"518"},{"ruleId":"492","severity":1,"message":"519","line":21,"column":12,"nodeType":"494","messageId":"495","endLine":21,"endColumn":17},{"ruleId":"492","severity":1,"message":"520","line":21,"column":19,"nodeType":"494","messageId":"495","endLine":21,"endColumn":27},{"ruleId":"504","severity":1,"message":"508","line":110,"column":47,"nodeType":"506","messageId":"507","endLine":110,"endColumn":49},{"ruleId":"492","severity":1,"message":"521","line":5,"column":8,"nodeType":"494","messageId":"495","endLine":5,"endColumn":13},{"ruleId":"492","severity":1,"message":"522","line":6,"column":8,"nodeType":"494","messageId":"495","endLine":6,"endColumn":17},{"ruleId":"492","severity":1,"message":"523","line":7,"column":8,"nodeType":"494","messageId":"495","endLine":7,"endColumn":17},{"ruleId":"492","severity":1,"message":"524","line":8,"column":8,"nodeType":"494","messageId":"495","endLine":8,"endColumn":22},{"ruleId":"492","severity":1,"message":"525","line":9,"column":8,"nodeType":"494","messageId":"495","endLine":9,"endColumn":17},{"ruleId":"492","severity":1,"message":"526","line":10,"column":8,"nodeType":"494","messageId":"495","endLine":10,"endColumn":16},{"ruleId":"492","severity":1,"message":"527","line":11,"column":8,"nodeType":"494","messageId":"495","endLine":11,"endColumn":13},{"ruleId":"492","severity":1,"message":"528","line":16,"column":8,"nodeType":"494","messageId":"495","endLine":16,"endColumn":23},{"ruleId":"504","severity":1,"message":"505","line":84,"column":37,"nodeType":"506","messageId":"507","endLine":84,"endColumn":39},{"ruleId":"504","severity":1,"message":"505","line":123,"column":33,"nodeType":"506","messageId":"507","endLine":123,"endColumn":35},{"ruleId":"492","severity":1,"message":"529","line":12,"column":32,"nodeType":"494","messageId":"495","endLine":12,"endColumn":42},{"ruleId":"492","severity":1,"message":"530","line":29,"column":11,"nodeType":"494","messageId":"495","endLine":29,"endColumn":18},{"ruleId":"497","severity":1,"message":"531","line":60,"column":8,"nodeType":"499","endLine":60,"endColumn":10,"suggestions":"532"},{"ruleId":"492","severity":1,"message":"533","line":95,"column":11,"nodeType":"494","messageId":"495","endLine":95,"endColumn":19},{"ruleId":"504","severity":1,"message":"508","line":162,"column":54,"nodeType":"506","messageId":"507","endLine":162,"endColumn":56},{"ruleId":"534","severity":1,"message":"535","line":174,"column":9,"nodeType":"536","messageId":"537","endLine":214,"endColumn":10},{"ruleId":"534","severity":1,"message":"535","line":258,"column":9,"nodeType":"536","messageId":"537","endLine":268,"endColumn":10},{"ruleId":"497","severity":1,"message":"538","line":269,"column":8,"nodeType":"499","endLine":269,"endColumn":25,"suggestions":"539"},{"ruleId":"504","severity":1,"message":"508","line":173,"column":57,"nodeType":"506","messageId":"507","endLine":173,"endColumn":59},{"ruleId":"492","severity":1,"message":"540","line":181,"column":9,"nodeType":"494","messageId":"495","endLine":181,"endColumn":20},{"ruleId":"534","severity":1,"message":"535","line":187,"column":9,"nodeType":"536","messageId":"537","endLine":217,"endColumn":10},{"ruleId":"504","severity":1,"message":"505","line":285,"column":49,"nodeType":"506","messageId":"507","endLine":285,"endColumn":51},{"ruleId":"534","severity":1,"message":"535","line":302,"column":9,"nodeType":"536","messageId":"537","endLine":315,"endColumn":10},{"ruleId":"497","severity":1,"message":"538","line":316,"column":8,"nodeType":"499","endLine":316,"endColumn":28,"suggestions":"541"},{"ruleId":"492","severity":1,"message":"542","line":3,"column":30,"nodeType":"494","messageId":"495","endLine":3,"endColumn":43},{"ruleId":"492","severity":1,"message":"543","line":3,"column":45,"nodeType":"494","messageId":"495","endLine":3,"endColumn":57},{"ruleId":"492","severity":1,"message":"544","line":5,"column":5,"nodeType":"494","messageId":"495","endLine":5,"endColumn":12},{"ruleId":"492","severity":1,"message":"545","line":5,"column":14,"nodeType":"494","messageId":"495","endLine":5,"endColumn":23},{"ruleId":"492","severity":1,"message":"546","line":23,"column":12,"nodeType":"494","messageId":"495","endLine":23,"endColumn":23},{"ruleId":"492","severity":1,"message":"547","line":23,"column":25,"nodeType":"494","messageId":"495","endLine":23,"endColumn":39},{"ruleId":"492","severity":1,"message":"548","line":24,"column":12,"nodeType":"494","messageId":"495","endLine":24,"endColumn":16},{"ruleId":"492","severity":1,"message":"549","line":24,"column":18,"nodeType":"494","messageId":"495","endLine":24,"endColumn":25},{"ruleId":"492","severity":1,"message":"530","line":25,"column":11,"nodeType":"494","messageId":"495","endLine":25,"endColumn":18},{"ruleId":"504","severity":1,"message":"505","line":91,"column":48,"nodeType":"506","messageId":"507","endLine":91,"endColumn":50},{"ruleId":"504","severity":1,"message":"505","line":157,"column":41,"nodeType":"506","messageId":"507","endLine":157,"endColumn":43},{"ruleId":"492","severity":1,"message":"542","line":3,"column":30,"nodeType":"494","messageId":"495","endLine":3,"endColumn":43},{"ruleId":"492","severity":1,"message":"543","line":3,"column":45,"nodeType":"494","messageId":"495","endLine":3,"endColumn":57},{"ruleId":"492","severity":1,"message":"544","line":8,"column":5,"nodeType":"494","messageId":"495","endLine":8,"endColumn":12},{"ruleId":"492","severity":1,"message":"545","line":8,"column":14,"nodeType":"494","messageId":"495","endLine":8,"endColumn":23},{"ruleId":"497","severity":1,"message":"550","line":59,"column":8,"nodeType":"499","endLine":59,"endColumn":14,"suggestions":"551"},{"ruleId":"504","severity":1,"message":"505","line":95,"column":48,"nodeType":"506","messageId":"507","endLine":95,"endColumn":50},{"ruleId":"504","severity":1,"message":"505","line":160,"column":41,"nodeType":"506","messageId":"507","endLine":160,"endColumn":43},{"ruleId":"492","severity":1,"message":"552","line":7,"column":28,"nodeType":"494","messageId":"495","endLine":7,"endColumn":39},{"ruleId":"497","severity":1,"message":"553","line":41,"column":8,"nodeType":"499","endLine":41,"endColumn":10,"suggestions":"554"},{"ruleId":"492","severity":1,"message":"555","line":1,"column":51,"nodeType":"494","messageId":"495","endLine":1,"endColumn":57},{"ruleId":"492","severity":1,"message":"556","line":2,"column":10,"nodeType":"494","messageId":"495","endLine":2,"endColumn":17},{"ruleId":"504","severity":1,"message":"508","line":169,"column":60,"nodeType":"506","messageId":"507","endLine":169,"endColumn":62},{"ruleId":"504","severity":1,"message":"508","line":176,"column":68,"nodeType":"506","messageId":"507","endLine":176,"endColumn":70},{"ruleId":"492","severity":1,"message":"555","line":1,"column":55,"nodeType":"494","messageId":"495","endLine":1,"endColumn":61},{"ruleId":"492","severity":1,"message":"545","line":3,"column":5,"nodeType":"494","messageId":"495","endLine":3,"endColumn":14},{"ruleId":"492","severity":1,"message":"557","line":4,"column":5,"nodeType":"494","messageId":"495","endLine":4,"endColumn":13},{"ruleId":"492","severity":1,"message":"544","line":5,"column":5,"nodeType":"494","messageId":"495","endLine":5,"endColumn":12},{"ruleId":"492","severity":1,"message":"558","line":6,"column":5,"nodeType":"494","messageId":"495","endLine":6,"endColumn":13},{"ruleId":"492","severity":1,"message":"559","line":7,"column":5,"nodeType":"494","messageId":"495","endLine":7,"endColumn":19},{"ruleId":"492","severity":1,"message":"560","line":8,"column":5,"nodeType":"494","messageId":"495","endLine":8,"endColumn":12},{"ruleId":"492","severity":1,"message":"542","line":9,"column":5,"nodeType":"494","messageId":"495","endLine":9,"endColumn":18},{"ruleId":"492","severity":1,"message":"543","line":10,"column":5,"nodeType":"494","messageId":"495","endLine":10,"endColumn":17},{"ruleId":"492","severity":1,"message":"561","line":11,"column":5,"nodeType":"494","messageId":"495","endLine":11,"endColumn":15},{"ruleId":"492","severity":1,"message":"511","line":12,"column":5,"nodeType":"494","messageId":"495","endLine":12,"endColumn":13},{"ruleId":"492","severity":1,"message":"562","line":18,"column":5,"nodeType":"494","messageId":"495","endLine":18,"endColumn":11},{"ruleId":"492","severity":1,"message":"563","line":20,"column":5,"nodeType":"494","messageId":"495","endLine":20,"endColumn":18},{"ruleId":"492","severity":1,"message":"564","line":24,"column":5,"nodeType":"494","messageId":"495","endLine":24,"endColumn":16},{"ruleId":"492","severity":1,"message":"565","line":25,"column":5,"nodeType":"494","messageId":"495","endLine":25,"endColumn":17},{"ruleId":"492","severity":1,"message":"566","line":26,"column":5,"nodeType":"494","messageId":"495","endLine":26,"endColumn":10},{"ruleId":"492","severity":1,"message":"567","line":28,"column":5,"nodeType":"494","messageId":"495","endLine":28,"endColumn":15},{"ruleId":"492","severity":1,"message":"568","line":30,"column":8,"nodeType":"494","messageId":"495","endLine":30,"endColumn":16},{"ruleId":"492","severity":1,"message":"569","line":33,"column":10,"nodeType":"494","messageId":"495","endLine":33,"endColumn":16},{"ruleId":"492","severity":1,"message":"570","line":33,"column":18,"nodeType":"494","messageId":"495","endLine":33,"endColumn":22},{"ruleId":"492","severity":1,"message":"571","line":34,"column":8,"nodeType":"494","messageId":"495","endLine":34,"endColumn":14},{"ruleId":"492","severity":1,"message":"572","line":78,"column":7,"nodeType":"494","messageId":"495","endLine":78,"endColumn":16},{"ruleId":"573","severity":1,"message":"574","line":106,"column":25,"nodeType":"575","endLine":106,"endColumn":52},{"ruleId":"497","severity":1,"message":"576","line":130,"column":8,"nodeType":"499","endLine":130,"endColumn":10,"suggestions":"577"},{"ruleId":"573","severity":1,"message":"574","line":315,"column":60,"nodeType":"575","endLine":315,"endColumn":100},{"ruleId":"534","severity":1,"message":"535","line":161,"column":9,"nodeType":"536","messageId":"537","endLine":196,"endColumn":10},{"ruleId":"492","severity":1,"message":"555","line":1,"column":51,"nodeType":"494","messageId":"495","endLine":1,"endColumn":57},{"ruleId":"492","severity":1,"message":"578","line":19,"column":24,"nodeType":"494","messageId":"495","endLine":19,"endColumn":27},{"ruleId":"492","severity":1,"message":"579","line":163,"column":12,"nodeType":"494","messageId":"495","endLine":163,"endColumn":22},{"ruleId":"492","severity":1,"message":"580","line":163,"column":24,"nodeType":"494","messageId":"495","endLine":163,"endColumn":37},{"ruleId":"492","severity":1,"message":"519","line":164,"column":12,"nodeType":"494","messageId":"495","endLine":164,"endColumn":17},{"ruleId":"492","severity":1,"message":"520","line":164,"column":19,"nodeType":"494","messageId":"495","endLine":164,"endColumn":27},{"ruleId":"492","severity":1,"message":"581","line":169,"column":9,"nodeType":"494","messageId":"495","endLine":169,"endColumn":14},{"ruleId":"492","severity":1,"message":"582","line":170,"column":9,"nodeType":"494","messageId":"495","endLine":170,"endColumn":16},{"ruleId":"492","severity":1,"message":"540","line":172,"column":9,"nodeType":"494","messageId":"495","endLine":172,"endColumn":20},{"ruleId":"492","severity":1,"message":"583","line":173,"column":9,"nodeType":"494","messageId":"495","endLine":173,"endColumn":18},{"ruleId":"497","severity":1,"message":"584","line":187,"column":8,"nodeType":"499","endLine":187,"endColumn":25,"suggestions":"585"},{"ruleId":"492","severity":1,"message":"555","line":16,"column":51,"nodeType":"494","messageId":"495","endLine":16,"endColumn":57},{"ruleId":"492","severity":1,"message":"567","line":32,"column":5,"nodeType":"494","messageId":"495","endLine":32,"endColumn":15},{"ruleId":"492","severity":1,"message":"586","line":46,"column":10,"nodeType":"494","messageId":"495","endLine":46,"endColumn":21},{"ruleId":"492","severity":1,"message":"587","line":47,"column":13,"nodeType":"494","messageId":"495","endLine":47,"endColumn":16},{"ruleId":"588","severity":1,"message":"589","line":178,"column":53,"nodeType":"590","messageId":"591","endLine":178,"endColumn":55},{"ruleId":"588","severity":1,"message":"589","line":178,"column":66,"nodeType":"590","messageId":"591","endLine":178,"endColumn":68},{"ruleId":"588","severity":1,"message":"592","line":178,"column":66,"nodeType":"590","messageId":"591","endLine":178,"endColumn":68},{"ruleId":"588","severity":1,"message":"592","line":179,"column":53,"nodeType":"590","messageId":"591","endLine":179,"endColumn":55},{"ruleId":"588","severity":1,"message":"592","line":179,"column":64,"nodeType":"590","messageId":"591","endLine":179,"endColumn":66},{"ruleId":"588","severity":1,"message":"592","line":180,"column":53,"nodeType":"590","messageId":"591","endLine":180,"endColumn":55},{"ruleId":"504","severity":1,"message":"505","line":213,"column":49,"nodeType":"506","messageId":"507","endLine":213,"endColumn":51},{"ruleId":"534","severity":1,"message":"535","line":298,"column":9,"nodeType":"536","messageId":"537","endLine":330,"endColumn":10},{"ruleId":"504","severity":1,"message":"508","line":609,"column":88,"nodeType":"506","messageId":"507","endLine":609,"endColumn":90},{"ruleId":"504","severity":1,"message":"508","line":694,"column":60,"nodeType":"506","messageId":"507","endLine":694,"endColumn":62},{"ruleId":"504","severity":1,"message":"508","line":730,"column":60,"nodeType":"506","messageId":"507","endLine":730,"endColumn":62},{"ruleId":"588","severity":1,"message":"589","line":823,"column":66,"nodeType":"590","messageId":"591","endLine":823,"endColumn":68},{"ruleId":"588","severity":1,"message":"589","line":823,"column":79,"nodeType":"590","messageId":"591","endLine":823,"endColumn":81},{"ruleId":"588","severity":1,"message":"592","line":823,"column":79,"nodeType":"590","messageId":"591","endLine":823,"endColumn":81},{"ruleId":"588","severity":1,"message":"592","line":824,"column":66,"nodeType":"590","messageId":"591","endLine":824,"endColumn":68},{"ruleId":"588","severity":1,"message":"592","line":824,"column":77,"nodeType":"590","messageId":"591","endLine":824,"endColumn":79},{"ruleId":"588","severity":1,"message":"592","line":825,"column":66,"nodeType":"590","messageId":"591","endLine":825,"endColumn":68},{"ruleId":"504","severity":1,"message":"508","line":874,"column":48,"nodeType":"506","messageId":"507","endLine":874,"endColumn":50},{"ruleId":"492","severity":1,"message":"555","line":16,"column":51,"nodeType":"494","messageId":"495","endLine":16,"endColumn":57},{"ruleId":"492","severity":1,"message":"581","line":66,"column":9,"nodeType":"494","messageId":"495","endLine":66,"endColumn":14},{"ruleId":"492","severity":1,"message":"593","line":61,"column":12,"nodeType":"494","messageId":"495","endLine":61,"endColumn":14},{"ruleId":"492","severity":1,"message":"594","line":61,"column":16,"nodeType":"494","messageId":"495","endLine":61,"endColumn":21},{"ruleId":"492","severity":1,"message":"581","line":74,"column":9,"nodeType":"494","messageId":"495","endLine":74,"endColumn":14},{"ruleId":"492","severity":1,"message":"595","line":14,"column":5,"nodeType":"494","messageId":"495","endLine":14,"endColumn":14},{"ruleId":"492","severity":1,"message":"596","line":15,"column":5,"nodeType":"494","messageId":"495","endLine":15,"endColumn":20},{"ruleId":"492","severity":1,"message":"555","line":19,"column":51,"nodeType":"494","messageId":"495","endLine":19,"endColumn":57},{"ruleId":"492","severity":1,"message":"519","line":61,"column":12,"nodeType":"494","messageId":"495","endLine":61,"endColumn":17},{"ruleId":"492","severity":1,"message":"520","line":61,"column":19,"nodeType":"494","messageId":"495","endLine":61,"endColumn":27},{"ruleId":"588","severity":1,"message":"589","line":133,"column":54,"nodeType":"590","messageId":"591","endLine":133,"endColumn":56},{"ruleId":"588","severity":1,"message":"589","line":133,"column":74,"nodeType":"590","messageId":"591","endLine":133,"endColumn":76},{"ruleId":"588","severity":1,"message":"592","line":133,"column":74,"nodeType":"590","messageId":"591","endLine":133,"endColumn":76},{"ruleId":"588","severity":1,"message":"592","line":134,"column":55,"nodeType":"590","messageId":"591","endLine":134,"endColumn":57},{"ruleId":"534","severity":1,"message":"535","line":169,"column":17,"nodeType":"536","messageId":"537","endLine":176,"endColumn":18},{"ruleId":"588","severity":1,"message":"589","line":492,"column":76,"nodeType":"590","messageId":"591","endLine":492,"endColumn":78},{"ruleId":"588","severity":1,"message":"589","line":492,"column":96,"nodeType":"590","messageId":"591","endLine":492,"endColumn":98},{"ruleId":"588","severity":1,"message":"592","line":492,"column":96,"nodeType":"590","messageId":"591","endLine":492,"endColumn":98},{"ruleId":"588","severity":1,"message":"592","line":493,"column":80,"nodeType":"590","messageId":"591","endLine":493,"endColumn":82},{"ruleId":"492","severity":1,"message":"560","line":20,"column":5,"nodeType":"494","messageId":"495","endLine":20,"endColumn":12},{"ruleId":"492","severity":1,"message":"559","line":21,"column":5,"nodeType":"494","messageId":"495","endLine":21,"endColumn":19},{"ruleId":"492","severity":1,"message":"542","line":22,"column":5,"nodeType":"494","messageId":"495","endLine":22,"endColumn":18},{"ruleId":"492","severity":1,"message":"545","line":23,"column":5,"nodeType":"494","messageId":"495","endLine":23,"endColumn":14},{"ruleId":"492","severity":1,"message":"561","line":24,"column":5,"nodeType":"494","messageId":"495","endLine":24,"endColumn":15},{"ruleId":"492","severity":1,"message":"511","line":25,"column":5,"nodeType":"494","messageId":"495","endLine":25,"endColumn":13},{"ruleId":"492","severity":1,"message":"557","line":26,"column":5,"nodeType":"494","messageId":"495","endLine":26,"endColumn":13},{"ruleId":"492","severity":1,"message":"544","line":27,"column":5,"nodeType":"494","messageId":"495","endLine":27,"endColumn":12},{"ruleId":"492","severity":1,"message":"558","line":28,"column":5,"nodeType":"494","messageId":"495","endLine":28,"endColumn":13},{"ruleId":"492","severity":1,"message":"597","line":29,"column":5,"nodeType":"494","messageId":"495","endLine":29,"endColumn":14},{"ruleId":"492","severity":1,"message":"586","line":38,"column":10,"nodeType":"494","messageId":"495","endLine":38,"endColumn":21},{"ruleId":"492","severity":1,"message":"587","line":39,"column":13,"nodeType":"494","messageId":"495","endLine":39,"endColumn":16},{"ruleId":"504","severity":1,"message":"508","line":185,"column":59,"nodeType":"506","messageId":"507","endLine":185,"endColumn":61},{"ruleId":"504","severity":1,"message":"505","line":211,"column":49,"nodeType":"506","messageId":"507","endLine":211,"endColumn":51},{"ruleId":"534","severity":1,"message":"535","line":221,"column":9,"nodeType":"536","messageId":"537","endLine":250,"endColumn":10},{"ruleId":"534","severity":1,"message":"535","line":292,"column":9,"nodeType":"536","messageId":"537","endLine":303,"endColumn":10},{"ruleId":"497","severity":1,"message":"538","line":304,"column":8,"nodeType":"499","endLine":304,"endColumn":30,"suggestions":"598"},{"ruleId":"492","severity":1,"message":"599","line":12,"column":20,"nodeType":"494","messageId":"495","endLine":12,"endColumn":25},{"ruleId":"492","severity":1,"message":"600","line":21,"column":10,"nodeType":"494","messageId":"495","endLine":21,"endColumn":20},{"ruleId":"492","severity":1,"message":"601","line":38,"column":18,"nodeType":"494","messageId":"495","endLine":38,"endColumn":27},{"ruleId":"534","severity":1,"message":"535","line":182,"column":9,"nodeType":"536","messageId":"537","endLine":219,"endColumn":10},{"ruleId":"534","severity":1,"message":"535","line":141,"column":9,"nodeType":"536","messageId":"537","endLine":183,"endColumn":10},{"ruleId":"492","severity":1,"message":"519","line":62,"column":12,"nodeType":"494","messageId":"495","endLine":62,"endColumn":17},{"ruleId":"492","severity":1,"message":"520","line":62,"column":19,"nodeType":"494","messageId":"495","endLine":62,"endColumn":27},{"ruleId":"534","severity":1,"message":"535","line":143,"column":17,"nodeType":"536","messageId":"537","endLine":150,"endColumn":18},{"ruleId":"588","severity":1,"message":"589","line":481,"column":76,"nodeType":"590","messageId":"591","endLine":481,"endColumn":78},{"ruleId":"588","severity":1,"message":"589","line":481,"column":96,"nodeType":"590","messageId":"591","endLine":481,"endColumn":98},{"ruleId":"588","severity":1,"message":"592","line":481,"column":96,"nodeType":"590","messageId":"591","endLine":481,"endColumn":98},{"ruleId":"588","severity":1,"message":"592","line":482,"column":80,"nodeType":"590","messageId":"591","endLine":482,"endColumn":82},{"ruleId":"504","severity":1,"message":"505","line":40,"column":39,"nodeType":"506","messageId":"507","endLine":40,"endColumn":41},{"ruleId":"504","severity":1,"message":"505","line":41,"column":39,"nodeType":"506","messageId":"507","endLine":41,"endColumn":41},{"ruleId":"504","severity":1,"message":"505","line":42,"column":39,"nodeType":"506","messageId":"507","endLine":42,"endColumn":41},{"ruleId":"504","severity":1,"message":"505","line":43,"column":39,"nodeType":"506","messageId":"507","endLine":43,"endColumn":41},{"ruleId":"504","severity":1,"message":"505","line":44,"column":39,"nodeType":"506","messageId":"507","endLine":44,"endColumn":41},{"ruleId":"504","severity":1,"message":"505","line":45,"column":39,"nodeType":"506","messageId":"507","endLine":45,"endColumn":41},{"ruleId":"504","severity":1,"message":"505","line":46,"column":39,"nodeType":"506","messageId":"507","endLine":46,"endColumn":41},{"ruleId":"504","severity":1,"message":"505","line":47,"column":39,"nodeType":"506","messageId":"507","endLine":47,"endColumn":41},{"ruleId":"492","severity":1,"message":"602","line":78,"column":9,"nodeType":"494","messageId":"495","endLine":78,"endColumn":18},{"ruleId":"492","severity":1,"message":"520","line":80,"column":9,"nodeType":"494","messageId":"495","endLine":80,"endColumn":17},{"ruleId":"497","severity":1,"message":"603","line":109,"column":8,"nodeType":"499","endLine":109,"endColumn":10,"suggestions":"604"},{"ruleId":"492","severity":1,"message":"600","line":13,"column":10,"nodeType":"494","messageId":"495","endLine":13,"endColumn":20},{"ruleId":"497","severity":1,"message":"605","line":50,"column":8,"nodeType":"499","endLine":50,"endColumn":10,"suggestions":"606"},{"ruleId":"492","severity":1,"message":"607","line":11,"column":10,"nodeType":"494","messageId":"495","endLine":11,"endColumn":20},{"ruleId":"492","severity":1,"message":"545","line":11,"column":22,"nodeType":"494","messageId":"495","endLine":11,"endColumn":31},{"ruleId":"492","severity":1,"message":"608","line":11,"column":33,"nodeType":"494","messageId":"495","endLine":11,"endColumn":41},{"ruleId":"492","severity":1,"message":"597","line":11,"column":43,"nodeType":"494","messageId":"495","endLine":11,"endColumn":52},{"ruleId":"492","severity":1,"message":"511","line":11,"column":54,"nodeType":"494","messageId":"495","endLine":11,"endColumn":62},{"ruleId":"492","severity":1,"message":"561","line":11,"column":64,"nodeType":"494","messageId":"495","endLine":11,"endColumn":74},{"ruleId":"492","severity":1,"message":"609","line":17,"column":5,"nodeType":"494","messageId":"495","endLine":17,"endColumn":22},{"ruleId":"492","severity":1,"message":"610","line":19,"column":5,"nodeType":"494","messageId":"495","endLine":19,"endColumn":15},{"ruleId":"492","severity":1,"message":"501","line":24,"column":27,"nodeType":"494","messageId":"495","endLine":24,"endColumn":36},{"ruleId":"492","severity":1,"message":"611","line":37,"column":12,"nodeType":"494","messageId":"495","endLine":37,"endColumn":21},{"ruleId":"492","severity":1,"message":"612","line":37,"column":23,"nodeType":"494","messageId":"495","endLine":37,"endColumn":35},{"ruleId":"492","severity":1,"message":"530","line":38,"column":11,"nodeType":"494","messageId":"495","endLine":38,"endColumn":18},{"ruleId":"504","severity":1,"message":"505","line":115,"column":175,"nodeType":"506","messageId":"507","endLine":115,"endColumn":177},{"ruleId":"504","severity":1,"message":"508","line":125,"column":102,"nodeType":"506","messageId":"507","endLine":125,"endColumn":104},{"ruleId":"504","severity":1,"message":"505","line":128,"column":105,"nodeType":"506","messageId":"507","endLine":128,"endColumn":107},{"ruleId":"504","severity":1,"message":"508","line":154,"column":68,"nodeType":"506","messageId":"507","endLine":154,"endColumn":70},{"ruleId":"504","severity":1,"message":"508","line":154,"column":102,"nodeType":"506","messageId":"507","endLine":154,"endColumn":104},{"ruleId":"492","severity":1,"message":"613","line":235,"column":7,"nodeType":"494","messageId":"495","endLine":241,"endColumn":3},{"ruleId":"492","severity":1,"message":"607","line":6,"column":5,"nodeType":"494","messageId":"495","endLine":6,"endColumn":15},{"ruleId":"492","severity":1,"message":"545","line":7,"column":5,"nodeType":"494","messageId":"495","endLine":7,"endColumn":14},{"ruleId":"492","severity":1,"message":"530","line":27,"column":11,"nodeType":"494","messageId":"495","endLine":27,"endColumn":18},{"ruleId":"497","severity":1,"message":"614","line":50,"column":8,"nodeType":"499","endLine":50,"endColumn":10,"suggestions":"615"},{"ruleId":"492","severity":1,"message":"530","line":26,"column":11,"nodeType":"494","messageId":"495","endLine":26,"endColumn":18},{"ruleId":"492","severity":1,"message":"616","line":9,"column":59,"nodeType":"494","messageId":"495","endLine":9,"endColumn":70},{"ruleId":"492","severity":1,"message":"617","line":11,"column":38,"nodeType":"494","messageId":"495","endLine":11,"endColumn":45},{"ruleId":"492","severity":1,"message":"552","line":12,"column":33,"nodeType":"494","messageId":"495","endLine":12,"endColumn":44},{"ruleId":"492","severity":1,"message":"618","line":16,"column":8,"nodeType":"494","messageId":"495","endLine":16,"endColumn":21},{"ruleId":"492","severity":1,"message":"619","line":30,"column":12,"nodeType":"494","messageId":"495","endLine":30,"endColumn":20},{"ruleId":"497","severity":1,"message":"553","line":71,"column":8,"nodeType":"499","endLine":71,"endColumn":10,"suggestions":"620"},{"ruleId":"621","severity":1,"message":"622","line":75,"column":30,"nodeType":"623","messageId":"624","endLine":75,"endColumn":32},{"ruleId":"504","severity":1,"message":"508","line":150,"column":26,"nodeType":"506","messageId":"507","endLine":150,"endColumn":28},{"ruleId":"504","severity":1,"message":"505","line":176,"column":28,"nodeType":"506","messageId":"507","endLine":176,"endColumn":30},{"ruleId":"504","severity":1,"message":"505","line":203,"column":73,"nodeType":"506","messageId":"507","endLine":203,"endColumn":75},{"ruleId":"492","severity":1,"message":"501","line":16,"column":40,"nodeType":"494","messageId":"495","endLine":16,"endColumn":49},{"ruleId":"504","severity":1,"message":"505","line":133,"column":49,"nodeType":"506","messageId":"507","endLine":133,"endColumn":51},{"ruleId":"534","severity":1,"message":"535","line":170,"column":9,"nodeType":"536","messageId":"537","endLine":205,"endColumn":10},{"ruleId":"497","severity":1,"message":"625","line":88,"column":8,"nodeType":"499","endLine":88,"endColumn":24,"suggestions":"626"},{"ruleId":"534","severity":1,"message":"535","line":118,"column":9,"nodeType":"536","messageId":"537","endLine":151,"endColumn":10},{"ruleId":"504","severity":1,"message":"508","line":363,"column":87,"nodeType":"506","messageId":"507","endLine":363,"endColumn":89},"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'loginState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["627"],"'useEffect' is defined but never used.","'Controller' is defined but never used.","'watch' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useState' is defined but never used.","'pathname' is assigned a value but never used.","'IonTitle' is defined but never used.","'web' is defined but never used.","'title' is assigned a value but never used.","'content' is assigned a value but never used.","'date' is assigned a value but never used.","'category' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'viewArticle'. Either include it or remove the dependency array.",["628"],"'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'Paper' is defined but never used.","'TablePagination' is defined but never used.","'Typography' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchShowCourse'. Either include it or remove the dependency array.",["629"],"'location' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has missing dependencies: 'reset' and 'type'. Either include them or remove the dependency array.",["630"],"'clearErrors' is assigned a value but never used.",["631"],"'IonCardHeader' is defined but never used.","'IonCardTitle' is defined but never used.","'IonItem' is defined but never used.","'IonButton' is defined but never used.","'allCategory' is assigned a value but never used.","'setAllCategory' is assigned a value but never used.","'slug' is assigned a value but never used.","'setSlug' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchCategoryBolg'. Either include it or remove the dependency array.",["632"],"'useLocation' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["633"],"'useRef' is defined but never used.","'useForm' is defined but never used.","'IonInput' is defined but never used.","'IonLabel' is defined but never used.","'IonCardContent' is defined but never used.","'IonCard' is defined but never used.","'IonToolbar' is defined but never used.","'Button' is defined but never used.","'DialogActions' is defined but never used.","'FormControl' is defined but never used.","'NativeSelect' is defined but never used.","'Stack' is defined but never used.","'InputLabel' is defined but never used.","'Dropzone' is defined but never used.","'Delete' is defined but never used.","'Edit' is defined but never used.","'Popper' is defined but never used.","'useStyles' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useCallback has missing dependencies: 'formData' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["634"],"'Add' is defined but never used.","'topic_name' is assigned a value but never used.","'setTopic_name' is assigned a value but never used.","'reset' is assigned a value but never used.","'control' is assigned a value but never used.","'getValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["635"],"'yupResolver' is defined but never used.","'yup' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","'id' is assigned a value but never used.","'setId' is assigned a value but never used.","'IonSelect' is defined but never used.","'IonSelectOption' is defined but never used.","'IonHeader' is defined but never used.",["636"],"'Input' is defined but never used.","'IonContent' is defined but never used.","'formatISO' is defined but never used.","'formState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchViewTopic'. Either include it or remove the dependency array.",["637"],"React Hook useEffect has a missing dependency: 'fetchAtmList'. Either include it or remove the dependency array.",["638"],"'IonButtons' is defined but never used.","'IonModal' is defined but never used.","'DialogContentText' is defined but never used.","'IconButton' is defined but never used.","'modalOpen' is assigned a value but never used.","'setModalOpen' is assigned a value but never used.","'ViewArticle' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'viewTopicArticle'. Either include it or remove the dependency array.",["639"],"'IonCheckbox' is defined but never used.","'useMemo' is defined but never used.","'ReactPaginate' is defined but never used.","'test_end' is assigned a value but never used.",["640"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array.",["641"],{"desc":"642","fix":"643"},{"desc":"644","fix":"645"},{"desc":"646","fix":"647"},{"desc":"648","fix":"649"},{"desc":"650","fix":"651"},{"desc":"652","fix":"653"},{"desc":"654","fix":"655"},{"desc":"656","fix":"657"},{"desc":"658","fix":"659"},{"desc":"660","fix":"661"},{"desc":"662","fix":"663"},{"desc":"664","fix":"665"},{"desc":"666","fix":"667"},{"desc":"654","fix":"668"},{"desc":"669","fix":"670"},"Update the dependencies array to be: [history]",{"range":"671","text":"672"},"Update the dependencies array to be: [viewArticle]",{"range":"673","text":"674"},"Update the dependencies array to be: [fetchShowCourse]",{"range":"675","text":"676"},"Update the dependencies array to be: [props.groupData, reset, type]",{"range":"677","text":"678"},"Update the dependencies array to be: [props.categoryData, reset, type]",{"range":"679","text":"680"},"Update the dependencies array to be: [fetchCategoryBolg, slug]",{"range":"681","text":"682"},"Update the dependencies array to be: [id]",{"range":"683","text":"684"},"Update the dependencies array to be: [formData, props]",{"range":"685","text":"686"},"Update the dependencies array to be: [props.topicData, setValue]",{"range":"687","text":"688"},"Update the dependencies array to be: [props.instructorData, reset, type]",{"range":"689","text":"690"},"Update the dependencies array to be: [fetchViewTopic]",{"range":"691","text":"692"},"Update the dependencies array to be: [fetchAtmList]",{"range":"693","text":"694"},"Update the dependencies array to be: [viewTopicArticle]",{"range":"695","text":"696"},{"range":"697","text":"684"},"Update the dependencies array to be: [props.collapse, reset]",{"range":"698","text":"699"},[866,868],"[history]",[2166,2168],"[viewArticle]",[1895,1897],"[fetchShowCourse]",[8253,8270],"[props.groupData, reset, type]",[9370,9390],"[props.categoryData, reset, type]",[1804,1810],"[fetchCategoryBolg, slug]",[1371,1373],"[id]",[3143,3145],"[formData, props]",[5267,5284],"[props.topicData, setValue]",[9129,9151],"[props.instructorData, reset, type]",[3690,3692],"[fetchViewTopic]",[1223,1225],"[fetchAtmList]",[1231,1233],"[viewTopicArticle]",[2283,2285],[2068,2084],"[props.collapse, reset]"]