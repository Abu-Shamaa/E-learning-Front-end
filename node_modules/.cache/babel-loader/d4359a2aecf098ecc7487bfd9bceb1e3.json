{"ast":null,"code":"var _jsxFileName = \"/home/shama/webapps/ionicblog/src/components/user/uquiz/ViewQuestion.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport baseUrl, { api } from '../../../pages/Urls';\nimport { useHistory, useParams } from \"react-router\";\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewQuestion = props => {\n  _s();\n\n  const [duration, setDuration] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [total_question, setTotalQuestion] = useState('');\n  const [minutes, setMinutes] = useState(1);\n  const [seconds, setSeconds] = useState(0);\n  const [isAns, setIsAns] = useState([]); //const [attempt_ans, setAttempt_ans] = useState('');\n  //const [quizlevel, setQuizlevel] = useState('')\n\n  const location = useLocation();\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  let attempt = {}; // locationState.questions.map((q: any, i) => {\n  //     attempt = { ...attempt, [q.id]: isAns[i] }\n  // })\n\n  useEffect(() => {\n    if (location.state) {\n      let _state = location.state;\n      window.localStorage.setItem('level', JSON.stringify(_state));\n    }\n  }, [location]);\n  useEffect(() => {\n    const data = window.localStorage.getItem('level');\n\n    if (data !== null) {\n      setQuestions(JSON.parse(data));\n    }\n\n    ;\n  }, []); //console.log(questions);\n  // useEffect(() => {\n  //     fetch(`${baseUrl}${api.editQuizlevel}${id}`, {\n  //         method: 'GET',\n  //         headers: {\n  //             Accept: 'application/json',\n  //             'Content-Type': 'application/json',\n  //             'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n  //         },\n  //     })\n  //         .then(res => res.json())\n  //         .then(result => {\n  //             setDuration(result.quizLevel.duration);\n  //         })\n  //         .catch(function (error) {\n  //             console.log(error);\n  //         })\n  // }, [])\n  // console.log(duration)\n\n  const submit = e => {\n    if (window.confirm(\"want to submit?\")) {\n      e.preventDefault();\n      let data = {\n        'attemptans': attempt\n      };\n      fetch(`${baseUrl}${api.attemptQuiz}`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify(data)\n      }).then(response => {\n        if (response.status === 200) {\n          window.location.href = `/dashboard/quiz/result/${id}`;\n        } else {\n          throw Error([response.status, response.statusText].join(' '));\n        }\n      }).catch(error => console.log('error', error));\n    }\n  };\n\n  const handleChange = (e, i) => {\n    const inputdata = [...isAns];\n    inputdata[i] = e.target.value;\n    setIsAns(inputdata); //console.log(e.target.value)\n  }; //console.log('att', attempt)\n  // useEffect(() => {\n  //     fetch(`${baseUrl}${api.viewQuestion}${id}`, {\n  //         method: 'GET',\n  //         headers: {\n  //             Accept: 'application/json',\n  //             'Content-Type': 'application/json',\n  //             'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n  //         },\n  //     })\n  //         .then(res => res.json())\n  //         .then(result => {\n  //             setQuestions(result);\n  //             //setLid(result.map((op: any) => (op.quizlevel_id)))\n  //             setTotalQuestion(result.length);\n  //         })\n  //         .catch(function (error) {\n  //             console.log(error);\n  //         })\n  // }, [])\n  //console.log('Q', lid);\n\n\n  useEffect(() => {\n    let myInterval = setInterval(() => {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n      }\n\n      if (seconds === 0) {\n        if (minutes === 0) {\n          clearInterval(myInterval);\n        } else {\n          setMinutes(minutes - 1);\n          setSeconds(59);\n        }\n      }\n    }, 1000);\n    return () => {\n      clearInterval(myInterval);\n    };\n  }); //console.log('op', question_id)\n  // return (\n  //     <>\n  //         <IonCard>\n  //             <IonCardHeader>\n  //                 <IonCardTitle>\n  //                     <IonGrid>\n  //                         <IonRow>\n  //                             <IonCol>Total Question -- {total_question} Time={duration}</IonCol>\n  //                             <IonCol>\n  //                                 {minutes === 0 && seconds === 0\n  //                                     ? ''\n  //                                     : <h1> {minutes < 10 ? `0${minutes}` : minutes}:{seconds < 10 ? `0${seconds}` : seconds}</h1>\n  //                                 }\n  //                             </IonCol>\n  //                         </IonRow>\n  //                     </IonGrid>\n  //                 </IonCardTitle>\n  //             </IonCardHeader>\n  //             <IonCardContent>\n  //                 {questions.map((qstn: any, i: any) =>\n  //                     <IonCard key={i.toString()}>\n  //                         <IonCardHeader>\n  //                             <IonCardTitle>\n  //                                 <div className='mb-2'>\n  //                                     {i + 1} / {total_question}\n  //                                 </div>\n  //                                 {qstn.question}\n  //                                 <h2 dangerouslySetInnerHTML={{ __html: qstn.q_content }}></h2>\n  //                                 <>\n  //                                     {\n  //                                         (qstn.question_type != 'MCQ') ?\n  //                                             <>\n  //                                                 <IonItem>\n  //                                                     <IonInput name='attemptans' value={isAns[i]} placeholder=\"enter answer\" onIonChange={(e) => handleChange(e, i)}></IonInput>\n  //                                                 </IonItem>\n  //                                             </> :\n  //                                             <>\n  //                                                 <IonList>\n  //                                                     <IonRadioGroup name='attemptans' value={isAns[i]} onIonChange={(e) => handleChange(e, i)} >\n  //                                                         {qstn.option.map((op: any, i: any) => {\n  //                                                             return (\n  //                                                                 <IonItem key={i}>\n  //                                                                     <IonLabel >{op.option}</IonLabel>\n  //                                                                     <IonRadio slot=\"start\" value={op.option} ></IonRadio>\n  //                                                                 </IonItem>\n  //                                                             );\n  //                                                         })}\n  //                                                     </IonRadioGroup>\n  //                                                 </IonList>\n  //                                             </>\n  //                                     }\n  //                                 </>\n  //                             </IonCardTitle>\n  //                         </IonCardHeader>\n  //                     </IonCard>\n  //                 )}\n  //                 <div className='text-center mt-3 mb-5'>\n  //                     <IonButton fill=\"outline\" onClick={(e) => submit(e)}>submit</IonButton>\n  //                 </div>\n  //             </IonCardContent>\n  //         </IonCard>\n  //     </>\n  // );\n\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"question\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ViewQuestion, \"yvREBNsFzP1vP89ueFHPO6Tlthc=\", false, function () {\n  return [useLocation, useParams, useHistory];\n});\n\n_c = ViewQuestion;\nexport default ViewQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewQuestion\");","map":{"version":3,"names":["React","useState","useEffect","baseUrl","api","useHistory","useParams","useLocation","ViewQuestion","props","duration","setDuration","questions","setQuestions","total_question","setTotalQuestion","minutes","setMinutes","seconds","setSeconds","isAns","setIsAns","location","id","history","attempt","state","_state","window","localStorage","setItem","JSON","stringify","data","getItem","parse","submit","e","confirm","preventDefault","fetch","attemptQuiz","method","headers","Accept","body","then","response","status","href","Error","statusText","join","catch","error","console","log","handleChange","i","inputdata","target","value","myInterval","setInterval","clearInterval"],"sources":["/home/shama/webapps/ionicblog/src/components/user/uquiz/ViewQuestion.tsx"],"sourcesContent":["import {\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonContent,\n    IonItem,\n    IonButtons,\n    IonButton,\n    IonCardContent,\n    IonModal,\n    IonText,\n    IonGrid,\n    IonRow,\n    IonCol,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonCardSubtitle,\n    IonLabel, IonList, IonRadio, IonRadioGroup, IonInput, IonCheckbox\n} from '@ionic/react';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport baseUrl, { api } from '../../../pages/Urls';\nimport { useHistory, useParams } from \"react-router\";\nimport { Link, useLocation } from 'react-router-dom';\nconst ViewQuestion: React.FC = (props) => {\n    type ViewQuestionParams = {\n        id: string;\n    };\n\n\n    const [duration, setDuration] = useState(null);\n    const [questions, setQuestions] = useState([]);\n    const [total_question, setTotalQuestion] = useState('');\n    const [minutes, setMinutes] = useState(1);\n    const [seconds, setSeconds] = useState(0);\n    const [isAns, setIsAns]: any[] = useState([]);\n\n    //const [attempt_ans, setAttempt_ans] = useState('');\n    //const [quizlevel, setQuizlevel] = useState('')\n    const location = useLocation()\n    const { id } = useParams<ViewQuestionParams>();\n    const history = useHistory();\n\n    let attempt = {};\n\n    // locationState.questions.map((q: any, i) => {\n    //     attempt = { ...attempt, [q.id]: isAns[i] }\n    // })\n    useEffect(() => {\n        if (location.state) {\n            let _state = location.state as any\n            window.localStorage.setItem('level', JSON.stringify(_state))\n\n        }\n    }, [location])\n    useEffect(() => {\n\n        const data = window.localStorage.getItem('level');\n        if (data !== null) {\n            setQuestions(JSON.parse(data))\n        };\n    }, [])\n    //console.log(questions);\n    // useEffect(() => {\n\n    //     fetch(`${baseUrl}${api.editQuizlevel}${id}`, {\n    //         method: 'GET',\n    //         headers: {\n    //             Accept: 'application/json',\n    //             'Content-Type': 'application/json',\n    //             'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n    //         },\n    //     })\n    //         .then(res => res.json())\n    //         .then(result => {\n    //             setDuration(result.quizLevel.duration);\n\n    //         })\n\n\n    //         .catch(function (error) {\n    //             console.log(error);\n    //         })\n    // }, [])\n\n    // console.log(duration)\n    const submit = (e: any) => {\n\n        if (window.confirm(\"want to submit?\")) {\n\n            e.preventDefault();\n            let data = {\n\n                'attemptans': attempt,\n\n            }\n            fetch(`${baseUrl}${api.attemptQuiz}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(data),\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n\n                        window.location.href = `/dashboard/quiz/result/${id}`;\n\n                    }\n                    else {\n                        throw Error([response.status, response.statusText].join(' '));\n                    }\n                })\n\n                .catch(error => console.log('error', error));\n\n\n        }\n    };\n    const handleChange = (e: any, i: any) => {\n\n        const inputdata = [...isAns]\n        inputdata[i] = e.target.value;\n        setIsAns(inputdata)\n        //console.log(e.target.value)\n\n    };\n\n\n    //console.log('att', attempt)\n\n    // useEffect(() => {\n\n    //     fetch(`${baseUrl}${api.viewQuestion}${id}`, {\n    //         method: 'GET',\n    //         headers: {\n    //             Accept: 'application/json',\n    //             'Content-Type': 'application/json',\n    //             'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n    //         },\n    //     })\n    //         .then(res => res.json())\n    //         .then(result => {\n    //             setQuestions(result);\n    //             //setLid(result.map((op: any) => (op.quizlevel_id)))\n    //             setTotalQuestion(result.length);\n\n    //         })\n\n\n    //         .catch(function (error) {\n    //             console.log(error);\n    //         })\n\n\n    // }, [])\n    //console.log('Q', lid);\n\n    useEffect(() => {\n        let myInterval = setInterval(() => {\n            if (seconds > 0) {\n                setSeconds(seconds - 1);\n            }\n            if (seconds === 0) {\n                if (minutes === 0) {\n                    clearInterval(myInterval)\n                } else {\n                    setMinutes(minutes - 1);\n                    setSeconds(59);\n                }\n            }\n        }, 1000)\n        return () => {\n            clearInterval(myInterval);\n        };\n    });\n    //console.log('op', question_id)\n\n    // return (\n\n    //     <>\n    //         <IonCard>\n    //             <IonCardHeader>\n    //                 <IonCardTitle>\n    //                     <IonGrid>\n    //                         <IonRow>\n    //                             <IonCol>Total Question -- {total_question} Time={duration}</IonCol>\n\n    //                             <IonCol>\n    //                                 {minutes === 0 && seconds === 0\n    //                                     ? ''\n    //                                     : <h1> {minutes < 10 ? `0${minutes}` : minutes}:{seconds < 10 ? `0${seconds}` : seconds}</h1>\n    //                                 }\n    //                             </IonCol>\n    //                         </IonRow>\n    //                     </IonGrid>\n    //                 </IonCardTitle>\n    //             </IonCardHeader>\n\n    //             <IonCardContent>\n\n    //                 {questions.map((qstn: any, i: any) =>\n\n    //                     <IonCard key={i.toString()}>\n    //                         <IonCardHeader>\n    //                             <IonCardTitle>\n    //                                 <div className='mb-2'>\n    //                                     {i + 1} / {total_question}\n    //                                 </div>\n\n    //                                 {qstn.question}\n    //                                 <h2 dangerouslySetInnerHTML={{ __html: qstn.q_content }}></h2>\n\n    //                                 <>\n    //                                     {\n    //                                         (qstn.question_type != 'MCQ') ?\n    //                                             <>\n    //                                                 <IonItem>\n    //                                                     <IonInput name='attemptans' value={isAns[i]} placeholder=\"enter answer\" onIonChange={(e) => handleChange(e, i)}></IonInput>\n\n    //                                                 </IonItem>\n    //                                             </> :\n    //                                             <>\n    //                                                 <IonList>\n\n    //                                                     <IonRadioGroup name='attemptans' value={isAns[i]} onIonChange={(e) => handleChange(e, i)} >\n    //                                                         {qstn.option.map((op: any, i: any) => {\n    //                                                             return (\n\n    //                                                                 <IonItem key={i}>\n    //                                                                     <IonLabel >{op.option}</IonLabel>\n    //                                                                     <IonRadio slot=\"start\" value={op.option} ></IonRadio>\n\n    //                                                                 </IonItem>\n\n    //                                                             );\n    //                                                         })}\n    //                                                     </IonRadioGroup>\n    //                                                 </IonList>\n    //                                             </>\n    //                                     }\n\n\n    //                                 </>\n    //                             </IonCardTitle>\n    //                         </IonCardHeader>\n    //                     </IonCard>\n\n\n    //                 )}\n\n    //                 <div className='text-center mt-3 mb-5'>\n    //                     <IonButton fill=\"outline\" onClick={(e) => submit(e)}>submit</IonButton>\n    //                 </div>\n    //             </IonCardContent>\n\n    //         </IonCard>\n\n\n\n    //     </>\n\n    // );\n\n    return (\n        <h1>question</h1>\n    );\n}\nexport default ViewQuestion;"],"mappings":";;;AAqBA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAAmD,OAAnD;AACA,OAAOC,OAAP,IAAkBC,GAAlB,QAA6B,qBAA7B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,cAAtC;AACA,SAAeC,WAAf,QAAkC,kBAAlC;;;AACA,MAAMC,YAAsB,GAAIC,KAAD,IAAW;EAAA;;EAMtC,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC;EACA,MAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAM,CAACa,cAAD,EAAiBC,gBAAjB,IAAqCd,QAAQ,CAAC,EAAD,CAAnD;EACA,MAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,CAAD,CAAtC;EACA,MAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,CAAD,CAAtC;EACA,MAAM,CAACmB,KAAD,EAAQC,QAAR,IAA2BpB,QAAQ,CAAC,EAAD,CAAzC,CAXsC,CAatC;EACA;;EACA,MAAMqB,QAAQ,GAAGf,WAAW,EAA5B;EACA,MAAM;IAAEgB;EAAF,IAASjB,SAAS,EAAxB;EACA,MAAMkB,OAAO,GAAGnB,UAAU,EAA1B;EAEA,IAAIoB,OAAO,GAAG,EAAd,CAnBsC,CAqBtC;EACA;EACA;;EACAvB,SAAS,CAAC,MAAM;IACZ,IAAIoB,QAAQ,CAACI,KAAb,EAAoB;MAChB,IAAIC,MAAM,GAAGL,QAAQ,CAACI,KAAtB;MACAE,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAArC;IAEH;EACJ,CANQ,EAMN,CAACL,QAAD,CANM,CAAT;EAOApB,SAAS,CAAC,MAAM;IAEZ,MAAM+B,IAAI,GAAGL,MAAM,CAACC,YAAP,CAAoBK,OAApB,CAA4B,OAA5B,CAAb;;IACA,IAAID,IAAI,KAAK,IAAb,EAAmB;MACfpB,YAAY,CAACkB,IAAI,CAACI,KAAL,CAAWF,IAAX,CAAD,CAAZ;IACH;;IAAA;EACJ,CANQ,EAMN,EANM,CAAT,CA/BsC,CAsCtC;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAGA;EACA;EACA;EACA;EAEA;;EACA,MAAMG,MAAM,GAAIC,CAAD,IAAY;IAEvB,IAAIT,MAAM,CAACU,OAAP,CAAe,iBAAf,CAAJ,EAAuC;MAEnCD,CAAC,CAACE,cAAF;MACA,IAAIN,IAAI,GAAG;QAEP,cAAcR;MAFP,CAAX;MAKAe,KAAK,CAAE,GAAErC,OAAQ,GAAEC,GAAG,CAACqC,WAAY,EAA9B,EAAiC;QAClCC,MAAM,EAAE,MAD0B;QAElCC,OAAO,EAAE;UACLC,MAAM,EAAE,kBADH;UAEL,gBAAgB,kBAFX;UAGL,iBAAkB,UAASf,YAAY,CAACK,OAAb,CAAqB,OAArB,CAA8B;QAHpD,CAFyB;QAOlCW,IAAI,EAAEd,IAAI,CAACC,SAAL,CAAeC,IAAf;MAP4B,CAAjC,CAAL,CAUKa,IAVL,CAUUC,QAAQ,IAAI;QACd,IAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;UAEzBpB,MAAM,CAACN,QAAP,CAAgB2B,IAAhB,GAAwB,0BAAyB1B,EAAG,EAApD;QAEH,CAJD,MAKK;UACD,MAAM2B,KAAK,CAAC,CAACH,QAAQ,CAACC,MAAV,EAAkBD,QAAQ,CAACI,UAA3B,EAAuCC,IAAvC,CAA4C,GAA5C,CAAD,CAAX;QACH;MACJ,CAnBL,EAqBKC,KArBL,CAqBWC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB,CArBpB;IAwBH;EACJ,CAnCD;;EAoCA,MAAMG,YAAY,GAAG,CAACpB,CAAD,EAASqB,CAAT,KAAoB;IAErC,MAAMC,SAAS,GAAG,CAAC,GAAGvC,KAAJ,CAAlB;IACAuC,SAAS,CAACD,CAAD,CAAT,GAAerB,CAAC,CAACuB,MAAF,CAASC,KAAxB;IACAxC,QAAQ,CAACsC,SAAD,CAAR,CAJqC,CAKrC;EAEH,CAPD,CAlGsC,CA4GtC;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAGA;EACA;EACA;EAGA;EACA;;;EAEAzD,SAAS,CAAC,MAAM;IACZ,IAAI4D,UAAU,GAAGC,WAAW,CAAC,MAAM;MAC/B,IAAI7C,OAAO,GAAG,CAAd,EAAiB;QACbC,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;MACH;;MACD,IAAIA,OAAO,KAAK,CAAhB,EAAmB;QACf,IAAIF,OAAO,KAAK,CAAhB,EAAmB;UACfgD,aAAa,CAACF,UAAD,CAAb;QACH,CAFD,MAEO;UACH7C,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;UACAG,UAAU,CAAC,EAAD,CAAV;QACH;MACJ;IACJ,CAZ2B,EAYzB,IAZyB,CAA5B;IAaA,OAAO,MAAM;MACT6C,aAAa,CAACF,UAAD,CAAb;IACH,CAFD;EAGH,CAjBQ,CAAT,CAzIsC,CA2JtC;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;EAGA;EAEA;EACA;EACA;EACA;EAEA;EAIA;EAEA;;EAEA,oBACI;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAGH,CAtPD;;GAAMtD,Y;UAeeD,W,EACFD,S,EACCD,U;;;KAjBdG,Y;AAuPN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}