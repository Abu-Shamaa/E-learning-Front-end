{"ast":null,"code":"import _slicedToArray from \"/mnt/disk2/ionicapps/elearn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/mnt/disk2/ionicapps/elearn/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _toPropertyKey from \"/mnt/disk2/ionicapps/elearn/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js\";\nimport _createForOfIteratorHelper from \"/mnt/disk2/ionicapps/elearn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/mnt/disk2/ionicapps/elearn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/mnt/disk2/ionicapps/elearn/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/mnt/disk2/ionicapps/elearn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// Is this type a tuple?\n// If this type is a tuple, what indices are allowed?\n///\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\n\nfunction noop() {//\n}\n\nfunction makeStateUpdater(key, instance) {\n  return function (updater) {\n    instance.setState(function (old) {\n      return _objectSpread(_objectSpread({}, old), {}, _defineProperty({}, key, functionalUpdate(updater, old[key])));\n    });\n  };\n}\n\nfunction isFunction(d) {\n  return d instanceof Function;\n}\n\nfunction flattenBy(arr, getChildren) {\n  var flat = [];\n\n  var recurse = function recurse(subArr) {\n    subArr.forEach(function (item) {\n      flat.push(item);\n      var children = getChildren(item);\n\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n\n  recurse(arr);\n  return flat;\n}\n\nfunction memo(getDeps, fn, opts) {\n  var deps = [];\n  var result;\n  return function () {\n    var depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    var newDeps = getDeps();\n    var depsChanged = newDeps.length !== deps.length || newDeps.some(function (dep, index) {\n      return deps[index] !== dep;\n    });\n\n    if (!depsChanged) {\n      return result;\n    }\n\n    deps = newDeps;\n    var resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn.apply(void 0, _toConsumableArray(newDeps));\n    opts == null ? void 0 : opts.onChange == null ? void 0 : opts.onChange(result);\n\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        var depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        var resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        var resultFpsPercentage = resultEndTime / 16;\n\n        var pad = function pad(str, num) {\n          str = String(str);\n\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n\n          return str;\n        };\n\n        console.info(\"%c\\u23F1 \".concat(pad(resultEndTime, 5), \" /\").concat(pad(depEndTime, 5), \" ms\"), \"\\n            font-size: .6rem;\\n            font-weight: bold;\\n            color: hsl(\".concat(Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120)), \"deg 100% 31%);\"), opts == null ? void 0 : opts.key);\n      }\n    }\n\n    return result;\n  };\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n\n  var defaultColumn = table._getDefaultColumnDef();\n\n  var resolvedColumnDef = _objectSpread(_objectSpread({}, defaultColumn), columnDef);\n\n  var accessorKey = resolvedColumnDef.accessorKey;\n  var id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  var accessorFn;\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = function accessorFn(originalRow) {\n        var result = originalRow;\n\n        var _iterator = _createForOfIteratorHelper(accessorKey.split('.')),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var key = _step.value;\n            result = result[key];\n\n            if (process.env.NODE_ENV !== 'production' && result === undefined) {\n              throw new Error(\"\\\"\".concat(key, \"\\\" in deeply nested key \\\"\").concat(accessorKey, \"\\\" returned undefined.\"));\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return result;\n      };\n    } else {\n      accessorFn = function accessorFn(originalRow) {\n        return originalRow[resolvedColumnDef.accessorKey];\n      };\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? \"Columns require an id when using an accessorFn\" : \"Columns require an id when using a non-string header\");\n    }\n\n    throw new Error();\n  }\n\n  var column = {\n    id: \"\".concat(String(id)),\n    accessorFn: accessorFn,\n    parent: parent,\n    depth: depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(function () {\n      return [true];\n    }, function () {\n      var _column$columns;\n\n      return [column].concat(_toConsumableArray((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(function (d) {\n        return d.getFlatColumns();\n      })));\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      }\n    }),\n    getLeafColumns: memo(function () {\n      return [table._getOrderColumnsFn()];\n    }, function (orderColumns) {\n      var _column$columns2;\n\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        var leafColumns = column.columns.flatMap(function (column) {\n          return column.getLeafColumns();\n        });\n        return orderColumns(leafColumns);\n      }\n\n      return [column];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n      debug: function debug() {\n        var _table$options$debugA2;\n\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    })\n  };\n  column = table._features.reduce(function (obj, feature) {\n    return Object.assign(obj, feature.createColumn == null ? void 0 : feature.createColumn(column, table));\n  }, column); // Yes, we have to convert table to uknown, because we know more than the compiler here.\n\n  return column;\n} //\n\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n\n  var id = (_options$id = options.id) != null ? _options$id : column.id;\n  var header = {\n    id: id,\n    column: column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: function getLeafHeaders() {\n      var leafHeaders = [];\n\n      var recurseHeader = function recurseHeader(h) {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n\n        leafHeaders.push(h);\n      };\n\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: function getContext() {\n      return {\n        table: table,\n        header: header,\n        column: column\n      };\n    }\n  };\n\n  table._features.forEach(function (feature) {\n    Object.assign(header, feature.createHeader == null ? void 0 : feature.createHeader(header, table));\n  });\n\n  return header;\n}\n\nvar Headers = {\n  createTable: function createTable(table) {\n    return {\n      // Header Groups\n      getHeaderGroups: memo(function () {\n        return [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right];\n      }, function (allColumns, leafColumns, left, right) {\n        var _left$map$filter, _right$map$filter;\n\n        var leftColumns = (_left$map$filter = left == null ? void 0 : left.map(function (columnId) {\n          return leafColumns.find(function (d) {\n            return d.id === columnId;\n          });\n        }).filter(Boolean)) != null ? _left$map$filter : [];\n        var rightColumns = (_right$map$filter = right == null ? void 0 : right.map(function (columnId) {\n          return leafColumns.find(function (d) {\n            return d.id === columnId;\n          });\n        }).filter(Boolean)) != null ? _right$map$filter : [];\n        var centerColumns = leafColumns.filter(function (column) {\n          return !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id));\n        });\n        var headerGroups = buildHeaderGroups(allColumns, [].concat(_toConsumableArray(leftColumns), _toConsumableArray(centerColumns), _toConsumableArray(rightColumns)), table);\n        return headerGroups;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: function debug() {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugHeaders;\n        }\n      }),\n      getCenterHeaderGroups: memo(function () {\n        return [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right];\n      }, function (allColumns, leafColumns, left, right) {\n        leafColumns = leafColumns.filter(function (column) {\n          return !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id));\n        });\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: function debug() {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugHeaders;\n        }\n      }),\n      getLeftHeaderGroups: memo(function () {\n        return [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left];\n      }, function (allColumns, leafColumns, left) {\n        var _left$map$filter2;\n\n        var orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(function (columnId) {\n          return leafColumns.find(function (d) {\n            return d.id === columnId;\n          });\n        }).filter(Boolean)) != null ? _left$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: function debug() {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugHeaders;\n        }\n      }),\n      getRightHeaderGroups: memo(function () {\n        return [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right];\n      }, function (allColumns, leafColumns, right) {\n        var _right$map$filter2;\n\n        var orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(function (columnId) {\n          return leafColumns.find(function (d) {\n            return d.id === columnId;\n          });\n        }).filter(Boolean)) != null ? _right$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: function debug() {\n          var _table$options$debugA4;\n\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugHeaders;\n        }\n      }),\n      // Footer Groups\n      getFooterGroups: memo(function () {\n        return [table.getHeaderGroups()];\n      }, function (headerGroups) {\n        return _toConsumableArray(headerGroups).reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: function debug() {\n          var _table$options$debugA5;\n\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFooterGroups: memo(function () {\n        return [table.getLeftHeaderGroups()];\n      }, function (headerGroups) {\n        return _toConsumableArray(headerGroups).reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: function debug() {\n          var _table$options$debugA6;\n\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFooterGroups: memo(function () {\n        return [table.getCenterHeaderGroups()];\n      }, function (headerGroups) {\n        return _toConsumableArray(headerGroups).reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: function debug() {\n          var _table$options$debugA7;\n\n          return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugHeaders;\n        }\n      }),\n      getRightFooterGroups: memo(function () {\n        return [table.getRightHeaderGroups()];\n      }, function (headerGroups) {\n        return _toConsumableArray(headerGroups).reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: function debug() {\n          var _table$options$debugA8;\n\n          return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugHeaders;\n        }\n      }),\n      // Flat Headers\n      getFlatHeaders: memo(function () {\n        return [table.getHeaderGroups()];\n      }, function (headerGroups) {\n        return headerGroups.map(function (headerGroup) {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: function debug() {\n          var _table$options$debugA9;\n\n          return (_table$options$debugA9 = table.options.debugAll) != null ? _table$options$debugA9 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFlatHeaders: memo(function () {\n        return [table.getLeftHeaderGroups()];\n      }, function (left) {\n        return left.map(function (headerGroup) {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: function debug() {\n          var _table$options$debugA10;\n\n          return (_table$options$debugA10 = table.options.debugAll) != null ? _table$options$debugA10 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFlatHeaders: memo(function () {\n        return [table.getCenterHeaderGroups()];\n      }, function (left) {\n        return left.map(function (headerGroup) {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: function debug() {\n          var _table$options$debugA11;\n\n          return (_table$options$debugA11 = table.options.debugAll) != null ? _table$options$debugA11 : table.options.debugHeaders;\n        }\n      }),\n      getRightFlatHeaders: memo(function () {\n        return [table.getRightHeaderGroups()];\n      }, function (left) {\n        return left.map(function (headerGroup) {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: function debug() {\n          var _table$options$debugA12;\n\n          return (_table$options$debugA12 = table.options.debugAll) != null ? _table$options$debugA12 : table.options.debugHeaders;\n        }\n      }),\n      // Leaf Headers\n      getCenterLeafHeaders: memo(function () {\n        return [table.getCenterFlatHeaders()];\n      }, function (flatHeaders) {\n        return flatHeaders.filter(function (header) {\n          var _header$subHeaders;\n\n          return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: function debug() {\n          var _table$options$debugA13;\n\n          return (_table$options$debugA13 = table.options.debugAll) != null ? _table$options$debugA13 : table.options.debugHeaders;\n        }\n      }),\n      getLeftLeafHeaders: memo(function () {\n        return [table.getLeftFlatHeaders()];\n      }, function (flatHeaders) {\n        return flatHeaders.filter(function (header) {\n          var _header$subHeaders2;\n\n          return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: function debug() {\n          var _table$options$debugA14;\n\n          return (_table$options$debugA14 = table.options.debugAll) != null ? _table$options$debugA14 : table.options.debugHeaders;\n        }\n      }),\n      getRightLeafHeaders: memo(function () {\n        return [table.getRightFlatHeaders()];\n      }, function (flatHeaders) {\n        return flatHeaders.filter(function (header) {\n          var _header$subHeaders3;\n\n          return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: function debug() {\n          var _table$options$debugA15;\n\n          return (_table$options$debugA15 = table.options.debugAll) != null ? _table$options$debugA15 : table.options.debugHeaders;\n        }\n      }),\n      getLeafHeaders: memo(function () {\n        return [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()];\n      }, function (left, center, right) {\n        var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n\n        return [].concat(_toConsumableArray((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), _toConsumableArray((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), _toConsumableArray((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])).map(function (header) {\n          return header.getLeafHeaders();\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: function debug() {\n          var _table$options$debugA16;\n\n          return (_table$options$debugA16 = table.options.debugAll) != null ? _table$options$debugA16 : table.options.debugHeaders;\n        }\n      })\n    };\n  }\n};\n\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$; // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n\n  var maxDepth = 0;\n\n  var findMaxDepth = function findMaxDepth(columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(function (column) {\n      return column.getIsVisible();\n    }).forEach(function (column) {\n      var _column$columns;\n\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n\n  findMaxDepth(allColumns);\n  var headerGroups = [];\n\n  var createHeaderGroup = function createHeaderGroup(headersToGroup, depth) {\n    // The header group we are creating\n    var headerGroup = {\n      depth: depth,\n      id: [headerFamily, \"\".concat(depth)].filter(Boolean).join('_'),\n      headers: []\n    }; // The parent columns we're going to scan next\n\n    var pendingParentHeaders = []; // Scan each column for parents\n\n    headersToGroup.forEach(function (headerToGroup) {\n      // What is the latest (last) parent column?\n      var latestPendingParentHeader = [].concat(pendingParentHeaders).reverse()[0];\n      var isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      var column;\n      var isPlaceholder = false;\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        var header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder: isPlaceholder,\n          placeholderId: isPlaceholder ? \"\".concat(pendingParentHeaders.filter(function (d) {\n            return d.column === column;\n          }).length) : undefined,\n          depth: depth,\n          index: pendingParentHeaders.length\n        }); // Add the headerToGroup as a subHeader of the new header\n\n        header.subHeaders.push(headerToGroup); // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n\n        pendingParentHeaders.push(header);\n      }\n\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n\n  var bottomHeaders = columnsToGroup.map(function (column, index) {\n    return createHeader(table, column, {\n      depth: maxDepth,\n      index: index\n    });\n  });\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse(); // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  var recurseHeadersForSpans = function recurseHeadersForSpans(headers) {\n    var filteredHeaders = headers.filter(function (header) {\n      return header.column.getIsVisible();\n    });\n    return filteredHeaders.map(function (header) {\n      var colSpan = 0;\n      var rowSpan = 0;\n      var childRowSpans = [0];\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(function (_ref) {\n          var childColSpan = _ref.colSpan,\n              childRowSpan = _ref.rowSpan;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n\n      var minChildRowSpan = Math.min.apply(Math, _toConsumableArray(childRowSpans));\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan: colSpan,\n        rowSpan: rowSpan\n      };\n    });\n  };\n\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n} //\n\n\nvar defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\n\nvar getDefaultColumnSizingInfoState = function getDefaultColumnSizingInfoState() {\n  return {\n    startOffset: null,\n    startSize: null,\n    deltaOffset: null,\n    deltaPercentage: null,\n    isResizingColumn: false,\n    columnSizingStart: []\n  };\n};\n\nvar ColumnSizing = {\n  getDefaultColumnDef: function getDefaultColumnDef() {\n    return defaultColumnSizing;\n  },\n  getInitialState: function getInitialState(state) {\n    return _objectSpread({\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState()\n    }, state);\n  },\n  getDefaultOptions: function getDefaultOptions(table) {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: function createColumn(column, table) {\n    return {\n      getSize: function getSize() {\n        var _column$columnDef$min, _ref, _column$columnDef$max;\n\n        var columnSize = table.getState().columnSizing[column.id];\n        return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n      },\n      getStart: function getStart(position) {\n        var columns = !position ? table.getVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n        var index = columns.findIndex(function (d) {\n          return d.id === column.id;\n        });\n\n        if (index > 0) {\n          var prevSiblingColumn = columns[index - 1];\n          return prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize();\n        }\n\n        return 0;\n      },\n      resetSize: function resetSize() {\n        table.setColumnSizing(function (_ref2) {\n          var _column$id = column.id,\n              _ = _ref2[_column$id],\n              rest = _objectWithoutProperties(_ref2, [_column$id].map(_toPropertyKey));\n\n          return rest;\n        });\n      },\n      getCanResize: function getCanResize() {\n        var _column$columnDef$ena, _table$options$enable;\n\n        return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n      },\n      getIsResizing: function getIsResizing() {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id;\n      }\n    };\n  },\n  createHeader: function createHeader(header, table) {\n    return {\n      getSize: function getSize() {\n        var sum = 0;\n\n        var recurse = function recurse(header) {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse);\n          } else {\n            var _header$column$getSiz;\n\n            sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n          }\n        };\n\n        recurse(header);\n        return sum;\n      },\n      getStart: function getStart() {\n        if (header.index > 0) {\n          var prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n        }\n\n        return 0;\n      },\n      getResizeHandler: function getResizeHandler() {\n        var column = table.getColumn(header.column.id);\n        var canResize = column.getCanResize();\n        return function (e) {\n          if (!canResize) {\n            return;\n          }\n\n          e.persist == null ? void 0 : e.persist();\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return;\n            }\n          }\n\n          var startSize = header.getSize();\n          var columnSizingStart = header ? header.getLeafHeaders().map(function (d) {\n            return [d.column.id, d.column.getSize()];\n          }) : [[column.id, column.getSize()]];\n          var clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n\n          var updateOffset = function updateOffset(eventType, clientXPos) {\n            if (typeof clientXPos !== 'number') {\n              return;\n            }\n\n            var newColumnSizing = {};\n            table.setColumnSizingInfo(function (old) {\n              var _old$startOffset, _old$startSize;\n\n              var deltaOffset = clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0);\n              var deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n              old.columnSizingStart.forEach(function (_ref3) {\n                var _ref4 = _slicedToArray(_ref3, 2),\n                    columnId = _ref4[0],\n                    headerSize = _ref4[1];\n\n                newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n              });\n              return _objectSpread(_objectSpread({}, old), {}, {\n                deltaOffset: deltaOffset,\n                deltaPercentage: deltaPercentage\n              });\n            });\n\n            if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n              table.setColumnSizing(function (old) {\n                return _objectSpread(_objectSpread({}, old), newColumnSizing);\n              });\n            }\n          };\n\n          var onMove = function onMove(clientXPos) {\n            return updateOffset('move', clientXPos);\n          };\n\n          var onEnd = function onEnd(clientXPos) {\n            updateOffset('end', clientXPos);\n            table.setColumnSizingInfo(function (old) {\n              return _objectSpread(_objectSpread({}, old), {}, {\n                isResizingColumn: false,\n                startOffset: null,\n                startSize: null,\n                deltaOffset: null,\n                deltaPercentage: null,\n                columnSizingStart: []\n              });\n            });\n          };\n\n          var mouseEvents = {\n            moveHandler: function moveHandler(e) {\n              return onMove(e.clientX);\n            },\n            upHandler: function upHandler(e) {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler);\n              document.removeEventListener('mouseup', mouseEvents.upHandler);\n              onEnd(e.clientX);\n            }\n          };\n          var touchEvents = {\n            moveHandler: function moveHandler(e) {\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n\n              onMove(e.touches[0].clientX);\n              return false;\n            },\n            upHandler: function upHandler(e) {\n              var _e$touches$;\n\n              document.removeEventListener('touchmove', touchEvents.moveHandler);\n              document.removeEventListener('touchend', touchEvents.upHandler);\n\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n\n              onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\n            }\n          };\n          var passiveIfSupported = passiveEventSupported() ? {\n            passive: false\n          } : false;\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n          } else {\n            document.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n          }\n\n          table.setColumnSizingInfo(function (old) {\n            return _objectSpread(_objectSpread({}, old), {}, {\n              startOffset: clientX,\n              startSize: startSize,\n              deltaOffset: 0,\n              deltaPercentage: 0,\n              columnSizingStart: columnSizingStart,\n              isResizingColumn: column.id\n            });\n          });\n        };\n      }\n    };\n  },\n  createTable: function createTable(table) {\n    return {\n      setColumnSizing: function setColumnSizing(updater) {\n        return table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater);\n      },\n      setColumnSizingInfo: function setColumnSizingInfo(updater) {\n        return table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater);\n      },\n      resetColumnSizing: function resetColumnSizing(defaultState) {\n        var _table$initialState$c;\n\n        table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n      },\n      resetHeaderSizeInfo: function resetHeaderSizeInfo(defaultState) {\n        var _table$initialState$c2;\n\n        table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n      },\n      getTotalSize: function getTotalSize() {\n        var _table$getHeaderGroup, _table$getHeaderGroup2;\n\n        return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce(function (sum, header) {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getHeaderGroup : 0;\n      },\n      getLeftTotalSize: function getLeftTotalSize() {\n        var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n\n        return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce(function (sum, header) {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getLeftHeaderG : 0;\n      },\n      getCenterTotalSize: function getCenterTotalSize() {\n        var _table$getCenterHeade, _table$getCenterHeade2;\n\n        return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce(function (sum, header) {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getCenterHeade : 0;\n      },\n      getRightTotalSize: function getRightTotalSize() {\n        var _table$getRightHeader, _table$getRightHeader2;\n\n        return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce(function (sum, header) {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getRightHeader : 0;\n      }\n    };\n  }\n};\nvar passiveSupported = null;\n\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  var supported = false;\n\n  try {\n    var options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n\n    };\n\n    var _noop = function _noop() {};\n\n    window.addEventListener('test', _noop, options);\n    window.removeEventListener('test', _noop);\n  } catch (err) {\n    supported = false;\n  }\n\n  passiveSupported = supported;\n  return passiveSupported;\n}\n\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n} //\n\n\nvar Expanding = {\n  getInitialState: function getInitialState(state) {\n    return _objectSpread({\n      expanded: {}\n    }, state);\n  },\n  getDefaultOptions: function getDefaultOptions(table) {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: function createTable(table) {\n    var registered = false;\n    var queued = false;\n    return {\n      _autoResetExpanded: function _autoResetExpanded() {\n        var _ref, _table$options$autoRe;\n\n        if (!registered) {\n          table._queue(function () {\n            registered = true;\n          });\n\n          return;\n        }\n\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n          if (queued) return;\n          queued = true;\n\n          table._queue(function () {\n            table.resetExpanded();\n            queued = false;\n          });\n        }\n      },\n      setExpanded: function setExpanded(updater) {\n        return table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater);\n      },\n      toggleAllRowsExpanded: function toggleAllRowsExpanded(expanded) {\n        if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true);\n        } else {\n          table.setExpanded({});\n        }\n      },\n      resetExpanded: function resetExpanded(defaultState) {\n        var _table$initialState$e, _table$initialState;\n\n        table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n      },\n      getCanSomeRowsExpand: function getCanSomeRowsExpand() {\n        return table.getRowModel().flatRows.some(function (row) {\n          return row.getCanExpand();\n        });\n      },\n      getToggleAllRowsExpandedHandler: function getToggleAllRowsExpandedHandler() {\n        return function (e) {\n          e.persist == null ? void 0 : e.persist();\n          table.toggleAllRowsExpanded();\n        };\n      },\n      getIsSomeRowsExpanded: function getIsSomeRowsExpanded() {\n        var expanded = table.getState().expanded;\n        return expanded === true || Object.values(expanded).some(Boolean);\n      },\n      getIsAllRowsExpanded: function getIsAllRowsExpanded() {\n        var expanded = table.getState().expanded; // If expanded is true, save some cycles and return true\n\n        if (typeof expanded === 'boolean') {\n          return expanded === true;\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false;\n        } // If any row is not expanded, return false\n\n\n        if (table.getRowModel().flatRows.some(function (row) {\n          return !row.getIsExpanded();\n        })) {\n          return false;\n        } // They must all be expanded :shrug:\n\n\n        return true;\n      },\n      getExpandedDepth: function getExpandedDepth() {\n        var maxDepth = 0;\n        var rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n        rowIds.forEach(function (id) {\n          var splitId = id.split('.');\n          maxDepth = Math.max(maxDepth, splitId.length);\n        });\n        return maxDepth;\n      },\n      getPreExpandedRowModel: function getPreExpandedRowModel() {\n        return table.getSortedRowModel();\n      },\n      getExpandedRowModel: function getExpandedRowModel() {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel();\n        }\n\n        return table._getExpandedRowModel();\n      }\n    };\n  },\n  createRow: function createRow(row, table) {\n    return {\n      toggleExpanded: function toggleExpanded(expanded) {\n        table.setExpanded(function (old) {\n          var _expanded;\n\n          var exists = old === true ? true : !!(old != null && old[row.id]);\n          var oldExpanded = {};\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(function (rowId) {\n              oldExpanded[rowId] = true;\n            });\n          } else {\n            oldExpanded = old;\n          }\n\n          expanded = (_expanded = expanded) != null ? _expanded : !exists;\n\n          if (!exists && expanded) {\n            return _objectSpread(_objectSpread({}, oldExpanded), {}, _defineProperty({}, row.id, true));\n          }\n\n          if (exists && !expanded) {\n            var _oldExpanded = oldExpanded,\n                _row$id = row.id,\n                _ = _oldExpanded[_row$id],\n                rest = _objectWithoutProperties(_oldExpanded, [_row$id].map(_toPropertyKey));\n\n            return rest;\n          }\n\n          return old;\n        });\n      },\n      getIsExpanded: function getIsExpanded() {\n        var _table$options$getIsR;\n\n        var expanded = table.getState().expanded;\n        return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n      },\n      getCanExpand: function getCanExpand() {\n        var _table$options$getRow, _table$options$enable, _row$subRows;\n\n        return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      },\n      getToggleExpandedHandler: function getToggleExpandedHandler() {\n        var canExpand = row.getCanExpand();\n        return function () {\n          if (!canExpand) return;\n          row.toggleExpanded();\n        };\n      }\n    };\n  }\n};\n\nvar includesString = function includesString(row, columnId, filterValue) {\n  var _row$getValue;\n\n  var search = filterValue.toLowerCase();\n  return Boolean((_row$getValue = row.getValue(columnId)) == null ? void 0 : _row$getValue.toLowerCase().includes(search));\n};\n\nincludesString.autoRemove = function (val) {\n  return testFalsey(val);\n};\n\nvar includesStringSensitive = function includesStringSensitive(row, columnId, filterValue) {\n  var _row$getValue2;\n\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null ? void 0 : _row$getValue2.includes(filterValue));\n};\n\nincludesStringSensitive.autoRemove = function (val) {\n  return testFalsey(val);\n};\n\nvar equalsString = function equalsString(row, columnId, filterValue) {\n  var _row$getValue3;\n\n  return ((_row$getValue3 = row.getValue(columnId)) == null ? void 0 : _row$getValue3.toLowerCase()) === filterValue.toLowerCase();\n};\n\nequalsString.autoRemove = function (val) {\n  return testFalsey(val);\n};\n\nvar arrIncludes = function arrIncludes(row, columnId, filterValue) {\n  var _row$getValue4;\n\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\n\narrIncludes.autoRemove = function (val) {\n  return testFalsey(val) || !(val != null && val.length);\n};\n\nvar arrIncludesAll = function arrIncludesAll(row, columnId, filterValue) {\n  return !filterValue.some(function (val) {\n    var _row$getValue5;\n\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\n\narrIncludesAll.autoRemove = function (val) {\n  return testFalsey(val) || !(val != null && val.length);\n};\n\nvar arrIncludesSome = function arrIncludesSome(row, columnId, filterValue) {\n  return filterValue.some(function (val) {\n    var _row$getValue6;\n\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\n\narrIncludesSome.autoRemove = function (val) {\n  return testFalsey(val) || !(val != null && val.length);\n};\n\nvar equals = function equals(row, columnId, filterValue) {\n  return row.getValue(columnId) === filterValue;\n};\n\nequals.autoRemove = function (val) {\n  return testFalsey(val);\n};\n\nvar weakEquals = function weakEquals(row, columnId, filterValue) {\n  return row.getValue(columnId) == filterValue;\n};\n\nweakEquals.autoRemove = function (val) {\n  return testFalsey(val);\n};\n\nvar inNumberRange = function inNumberRange(row, columnId, filterValue) {\n  var _filterValue = _slicedToArray(filterValue, 2),\n      min = _filterValue[0],\n      max = _filterValue[1];\n\n  var rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\n\ninNumberRange.resolveFilterValue = function (val) {\n  var _val = _slicedToArray(val, 2),\n      unsafeMin = _val[0],\n      unsafeMax = _val[1];\n\n  var parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  var parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  var min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  var max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n\n  if (min > max) {\n    var temp = min;\n    min = max;\n    max = temp;\n  }\n\n  return [min, max];\n};\n\ninNumberRange.autoRemove = function (val) {\n  return testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n}; // Export\n\n\nvar filterFns = {\n  includesString: includesString,\n  includesStringSensitive: includesStringSensitive,\n  equalsString: equalsString,\n  arrIncludes: arrIncludes,\n  arrIncludesAll: arrIncludesAll,\n  arrIncludesSome: arrIncludesSome,\n  equals: equals,\n  weakEquals: weakEquals,\n  inNumberRange: inNumberRange\n}; // Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n} //\n\n\nvar Filters = {\n  getDefaultColumnDef: function getDefaultColumnDef() {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: function getInitialState(state) {\n    return _objectSpread({\n      columnFilters: [],\n      globalFilter: undefined\n    }, state);\n  },\n  getDefaultOptions: function getDefaultOptions(table) {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: function getColumnCanGlobalFilter(column) {\n        var _table$getCoreRowMode, _table$getCoreRowMode2;\n\n        var value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null ? void 0 : (_table$getCoreRowMode2 = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode2.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: function createColumn(column, table) {\n    return {\n      getAutoFilterFn: function getAutoFilterFn() {\n        var firstRow = table.getCoreRowModel().flatRows[0];\n        var value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'string') {\n          return filterFns.includesString;\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange;\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals;\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals;\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes;\n        }\n\n        return filterFns.weakEquals;\n      },\n      getFilterFn: function getFilterFn() {\n        var _table$options$filter, _table$options$filter2;\n\n        return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() // @ts-ignore\n        : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n      },\n      getCanFilter: function getCanFilter() {\n        var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n\n        return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n      },\n      getCanGlobalFilter: function getCanGlobalFilter() {\n        var _column$columnDef$ena2, _table$options$enable3, _table$options$enable4, _table$options$getCol;\n\n        return ((_column$columnDef$ena2 = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena2 : true) && ((_table$options$enable3 = table.options.enableGlobalFilter) != null ? _table$options$enable3 : true) && ((_table$options$enable4 = table.options.enableFilters) != null ? _table$options$enable4 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n      },\n      getIsFiltered: function getIsFiltered() {\n        return column.getFilterIndex() > -1;\n      },\n      getFilterValue: function getFilterValue() {\n        var _table$getState$colum, _table$getState$colum2;\n\n        return (_table$getState$colum = table.getState().columnFilters) == null ? void 0 : (_table$getState$colum2 = _table$getState$colum.find(function (d) {\n          return d.id === column.id;\n        })) == null ? void 0 : _table$getState$colum2.value;\n      },\n      getFilterIndex: function getFilterIndex() {\n        var _table$getState$colum3, _table$getState$colum4;\n\n        return (_table$getState$colum3 = (_table$getState$colum4 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum4.findIndex(function (d) {\n          return d.id === column.id;\n        })) != null ? _table$getState$colum3 : -1;\n      },\n      setFilterValue: function setFilterValue(value) {\n        table.setColumnFilters(function (old) {\n          var filterFn = column.getFilterFn();\n          var previousfilter = old == null ? void 0 : old.find(function (d) {\n            return d.id === column.id;\n          });\n          var newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : undefined); //\n\n          if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n            var _old$filter;\n\n            return (_old$filter = old == null ? void 0 : old.filter(function (d) {\n              return d.id !== column.id;\n            })) != null ? _old$filter : [];\n          }\n\n          var newFilterObj = {\n            id: column.id,\n            value: newFilter\n          };\n\n          if (previousfilter) {\n            var _old$map;\n\n            return (_old$map = old == null ? void 0 : old.map(function (d) {\n              if (d.id === column.id) {\n                return newFilterObj;\n              }\n\n              return d;\n            })) != null ? _old$map : [];\n          }\n\n          if (old != null && old.length) {\n            return [].concat(_toConsumableArray(old), [newFilterObj]);\n          }\n\n          return [newFilterObj];\n        });\n      },\n      _getFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: function getFacetedRowModel() {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return column._getFacetedRowModel();\n      },\n      _getFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: function getFacetedUniqueValues() {\n        if (!column._getFacetedUniqueValues) {\n          return new Map();\n        }\n\n        return column._getFacetedUniqueValues();\n      },\n      _getFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: function getFacetedMinMaxValues() {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined;\n        }\n\n        return column._getFacetedMinMaxValues();\n      } // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n\n    };\n  },\n  createRow: function createRow(row, table) {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {}\n    };\n  },\n  createTable: function createTable(table) {\n    return {\n      getGlobalAutoFilterFn: function getGlobalAutoFilterFn() {\n        return filterFns.includesString;\n      },\n      getGlobalFilterFn: function getGlobalFilterFn() {\n        var _table$options$filter3, _table$options$filter4;\n\n        var globalFilterFn = table.options.globalFilterFn;\n        return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() // @ts-ignore\n        : (_table$options$filter3 = (_table$options$filter4 = table.options.filterFns) == null ? void 0 : _table$options$filter4[globalFilterFn]) != null ? _table$options$filter3 : filterFns[globalFilterFn];\n      },\n      setColumnFilters: function setColumnFilters(updater) {\n        var leafColumns = table.getAllLeafColumns();\n\n        var updateFn = function updateFn(old) {\n          var _functionalUpdate;\n\n          return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(function (filter) {\n            var column = leafColumns.find(function (d) {\n              return d.id === filter.id;\n            });\n\n            if (column) {\n              var filterFn = column.getFilterFn();\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false;\n              }\n            }\n\n            return true;\n          });\n        };\n\n        table.options.onColumnFiltersChange == null ? void 0 : table.options.onColumnFiltersChange(updateFn);\n      },\n      setGlobalFilter: function setGlobalFilter(updater) {\n        table.options.onGlobalFilterChange == null ? void 0 : table.options.onGlobalFilterChange(updater);\n      },\n      resetGlobalFilter: function resetGlobalFilter(defaultState) {\n        table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n      },\n      resetColumnFilters: function resetColumnFilters(defaultState) {\n        var _table$initialState$c, _table$initialState;\n\n        table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n      },\n      getPreFilteredRowModel: function getPreFilteredRowModel() {\n        return table.getCoreRowModel();\n      },\n      getFilteredRowModel: function getFilteredRowModel() {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return table._getFilteredRowModel();\n      },\n      _getGlobalFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__'),\n      getGlobalFacetedRowModel: function getGlobalFacetedRowModel() {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return table._getGlobalFacetedRowModel();\n      },\n      _getGlobalFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: function getGlobalFacetedUniqueValues() {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map();\n        }\n\n        return table._getGlobalFacetedUniqueValues();\n      },\n      _getGlobalFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: function getGlobalFacetedMinMaxValues() {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return;\n        }\n\n        return table._getGlobalFacetedMinMaxValues();\n      }\n    };\n  }\n};\n\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nvar sum = function sum(columnId, _leafRows, childRows) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce(function (sum, next) {\n    var nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\n\nvar min = function min(columnId, _leafRows, childRows) {\n  var min;\n  childRows.forEach(function (row) {\n    var value = row.getValue(columnId);\n\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\n\nvar max = function max(columnId, _leafRows, childRows) {\n  var max;\n  childRows.forEach(function (row) {\n    var value = row.getValue(columnId);\n\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\n\nvar extent = function extent(columnId, _leafRows, childRows) {\n  var min;\n  var max;\n  childRows.forEach(function (row) {\n    var value = row.getValue(columnId);\n\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\n\nvar mean = function mean(columnId, leafRows) {\n  var count = 0;\n  var sum = 0;\n  leafRows.forEach(function (row) {\n    var value = row.getValue(columnId);\n\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\n\nvar median = function median(columnId, leafRows) {\n  if (!leafRows.length) {\n    return;\n  }\n\n  var min = 0;\n  var max = 0;\n  leafRows.forEach(function (row) {\n    var value = row.getValue(columnId);\n\n    if (typeof value === 'number') {\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n  });\n  return (min + max) / 2;\n};\n\nvar unique = function unique(columnId, leafRows) {\n  return Array.from(new Set(leafRows.map(function (d) {\n    return d.getValue(columnId);\n  })).values());\n};\n\nvar uniqueCount = function uniqueCount(columnId, leafRows) {\n  return new Set(leafRows.map(function (d) {\n    return d.getValue(columnId);\n  })).size;\n};\n\nvar count = function count(_columnId, leafRows) {\n  return leafRows.length;\n};\n\nvar aggregationFns = {\n  sum: sum,\n  min: min,\n  max: max,\n  extent: extent,\n  mean: mean,\n  median: median,\n  unique: unique,\n  uniqueCount: uniqueCount,\n  count: count\n}; //\n\nvar Grouping = {\n  getDefaultColumnDef: function getDefaultColumnDef() {\n    return {\n      aggregatedCell: function aggregatedCell(props) {\n        var _toString, _props$getValue;\n\n        return (_toString = (_props$getValue = props.getValue()) == null ? void 0 : _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: function getInitialState(state) {\n    return _objectSpread({\n      grouping: []\n    }, state);\n  },\n  getDefaultOptions: function getDefaultOptions(table) {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: function createColumn(column, table) {\n    return {\n      toggleGrouping: function toggleGrouping() {\n        table.setGrouping(function (old) {\n          // Find any existing grouping for this column\n          if (old != null && old.includes(column.id)) {\n            return old.filter(function (d) {\n              return d !== column.id;\n            });\n          }\n\n          return [].concat(_toConsumableArray(old != null ? old : []), [column.id]);\n        });\n      },\n      getCanGroup: function getCanGroup() {\n        var _ref, _ref2, _ref3, _column$columnDef$ena;\n\n        return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;\n      },\n      getIsGrouped: function getIsGrouped() {\n        var _table$getState$group;\n\n        return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n      },\n      getGroupedIndex: function getGroupedIndex() {\n        var _table$getState$group2;\n\n        return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n      },\n      getToggleGroupingHandler: function getToggleGroupingHandler() {\n        var canGroup = column.getCanGroup();\n        return function () {\n          if (!canGroup) return;\n          column.toggleGrouping();\n        };\n      },\n      getAutoAggregationFn: function getAutoAggregationFn() {\n        var firstRow = table.getCoreRowModel().flatRows[0];\n        var value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum;\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent;\n        }\n      },\n      getAggregationFn: function getAggregationFn() {\n        var _table$options$aggreg, _table$options$aggreg2;\n\n        if (!column) {\n          throw new Error();\n        }\n\n        return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n      }\n    };\n  },\n  createTable: function createTable(table) {\n    return {\n      setGrouping: function setGrouping(updater) {\n        return table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater);\n      },\n      resetGrouping: function resetGrouping(defaultState) {\n        var _table$initialState$g, _table$initialState;\n\n        table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n      },\n      getPreGroupedRowModel: function getPreGroupedRowModel() {\n        return table.getFilteredRowModel();\n      },\n      getGroupedRowModel: function getGroupedRowModel() {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel();\n        }\n\n        return table._getGroupedRowModel();\n      }\n    };\n  },\n  createRow: function createRow(row) {\n    return {\n      getIsGrouped: function getIsGrouped() {\n        return !!row.groupingColumnId;\n      },\n      _groupingValuesCache: {}\n    };\n  },\n  createCell: function createCell(cell, column, row, table) {\n    return {\n      getIsGrouped: function getIsGrouped() {\n        return column.getIsGrouped() && column.id === row.groupingColumnId;\n      },\n      getIsPlaceholder: function getIsPlaceholder() {\n        return !cell.getIsGrouped() && column.getIsGrouped();\n      },\n      getIsAggregated: function getIsAggregated() {\n        var _row$subRows;\n\n        return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      }\n    };\n  }\n};\n\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n\n  var nonGroupingColumns = leafColumns.filter(function (col) {\n    return !grouping.includes(col.id);\n  });\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n\n  var groupingColumns = grouping.map(function (g) {\n    return leafColumns.find(function (col) {\n      return col.id === g;\n    });\n  }).filter(Boolean);\n  return [].concat(_toConsumableArray(groupingColumns), _toConsumableArray(nonGroupingColumns));\n} //\n\n\nvar Ordering = {\n  getInitialState: function getInitialState(state) {\n    return _objectSpread({\n      columnOrder: []\n    }, state);\n  },\n  getDefaultOptions: function getDefaultOptions(table) {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createTable: function createTable(table) {\n    return {\n      setColumnOrder: function setColumnOrder(updater) {\n        return table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater);\n      },\n      resetColumnOrder: function resetColumnOrder(defaultState) {\n        var _table$initialState$c;\n\n        table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n      },\n      _getOrderColumnsFn: memo(function () {\n        return [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode];\n      }, function (columnOrder, grouping, groupedColumnMode) {\n        return function (columns) {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          var orderedColumns = []; // If there is no order, return the normal columns\n\n          if (!(columnOrder != null && columnOrder.length)) {\n            orderedColumns = columns;\n          } else {\n            var columnOrderCopy = _toConsumableArray(columnOrder); // If there is an order, make a copy of the columns\n\n\n            var columnsCopy = _toConsumableArray(columns); // And make a new ordered array of the columns\n            // Loop over the columns and place them in order into the new array\n\n\n            var _loop = function _loop() {\n              var targetColumnId = columnOrderCopy.shift();\n              var foundIndex = columnsCopy.findIndex(function (d) {\n                return d.id === targetColumnId;\n              });\n\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n              }\n            };\n\n            while (columnsCopy.length && columnOrderCopy.length) {\n              _loop();\n            } // If there are any columns left, add them to the end\n\n\n            orderedColumns = [].concat(_toConsumableArray(orderedColumns), _toConsumableArray(columnsCopy));\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode);\n        };\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn' // debug: () => table.options.debugAll ?? table.options.debugTable,\n\n      })\n    };\n  }\n}; //\n\nvar defaultPageIndex = 0;\nvar defaultPageSize = 10;\n\nvar getDefaultPaginationState = function getDefaultPaginationState() {\n  return {\n    pageIndex: defaultPageIndex,\n    pageSize: defaultPageSize\n  };\n};\n\nvar Pagination = {\n  getInitialState: function getInitialState(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      pagination: _objectSpread(_objectSpread({}, getDefaultPaginationState()), state == null ? void 0 : state.pagination)\n    });\n  },\n  getDefaultOptions: function getDefaultOptions(table) {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: function createTable(table) {\n    var registered = false;\n    var queued = false;\n    return {\n      _autoResetPageIndex: function _autoResetPageIndex() {\n        var _ref, _table$options$autoRe;\n\n        if (!registered) {\n          table._queue(function () {\n            registered = true;\n          });\n\n          return;\n        }\n\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n          if (queued) return;\n          queued = true;\n\n          table._queue(function () {\n            table.resetPageIndex();\n            queued = false;\n          });\n        }\n      },\n      setPagination: function setPagination(updater) {\n        var safeUpdater = function safeUpdater(old) {\n          var newState = functionalUpdate(updater, old);\n          return newState;\n        };\n\n        return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n      },\n      resetPagination: function resetPagination(defaultState) {\n        var _table$initialState$p;\n\n        table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n      },\n      setPageIndex: function setPageIndex(updater) {\n        table.setPagination(function (old) {\n          var pageIndex = functionalUpdate(updater, old.pageIndex);\n          var maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n          return _objectSpread(_objectSpread({}, old), {}, {\n            pageIndex: pageIndex\n          });\n        });\n      },\n      resetPageIndex: function resetPageIndex(defaultState) {\n        var _table$initialState$p2, _table$initialState, _table$initialState$p3;\n\n        table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null ? void 0 : (_table$initialState$p3 = _table$initialState.pagination) == null ? void 0 : _table$initialState$p3.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n      },\n      resetPageSize: function resetPageSize(defaultState) {\n        var _table$initialState$p4, _table$initialState2, _table$initialState2$;\n\n        table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p4 = (_table$initialState2 = table.initialState) == null ? void 0 : (_table$initialState2$ = _table$initialState2.pagination) == null ? void 0 : _table$initialState2$.pageSize) != null ? _table$initialState$p4 : defaultPageSize);\n      },\n      setPageSize: function setPageSize(updater) {\n        table.setPagination(function (old) {\n          var pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n          var topRowIndex = old.pageSize * old.pageIndex;\n          var pageIndex = Math.floor(topRowIndex / pageSize);\n          return _objectSpread(_objectSpread({}, old), {}, {\n            pageIndex: pageIndex,\n            pageSize: pageSize\n          });\n        });\n      },\n      setPageCount: function setPageCount(updater) {\n        return table.setPagination(function (old) {\n          var _table$options$pageCo;\n\n          var newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount);\n          }\n\n          return _objectSpread(_objectSpread({}, old), {}, {\n            pageCount: newPageCount\n          });\n        });\n      },\n      getPageOptions: memo(function () {\n        return [table.getPageCount()];\n      }, function (pageCount) {\n        var pageOptions = [];\n\n        if (pageCount && pageCount > 0) {\n          pageOptions = _toConsumableArray(new Array(pageCount)).fill(null).map(function (_, i) {\n            return i;\n          });\n        }\n\n        return pageOptions;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: function debug() {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getCanPreviousPage: function getCanPreviousPage() {\n        return table.getState().pagination.pageIndex > 0;\n      },\n      getCanNextPage: function getCanNextPage() {\n        var pageIndex = table.getState().pagination.pageIndex;\n        var pageCount = table.getPageCount();\n\n        if (pageCount === -1) {\n          return true;\n        }\n\n        if (pageCount === 0) {\n          return false;\n        }\n\n        return pageIndex < pageCount - 1;\n      },\n      previousPage: function previousPage() {\n        return table.setPageIndex(function (old) {\n          return old - 1;\n        });\n      },\n      nextPage: function nextPage() {\n        return table.setPageIndex(function (old) {\n          return old + 1;\n        });\n      },\n      getPrePaginationRowModel: function getPrePaginationRowModel() {\n        return table.getExpandedRowModel();\n      },\n      getPaginationRowModel: function getPaginationRowModel() {\n        if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n          table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel();\n        }\n\n        return table._getPaginationRowModel();\n      },\n      getPageCount: function getPageCount() {\n        var _table$options$pageCo2;\n\n        return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);\n      }\n    };\n  }\n}; //\n\nvar getDefaultPinningState = function getDefaultPinningState() {\n  return {\n    left: [],\n    right: []\n  };\n};\n\nvar Pinning = {\n  getInitialState: function getInitialState(state) {\n    return _objectSpread({\n      columnPinning: getDefaultPinningState()\n    }, state);\n  },\n  getDefaultOptions: function getDefaultOptions(table) {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: function createColumn(column, table) {\n    return {\n      pin: function pin(position) {\n        var columnIds = column.getLeafColumns().map(function (d) {\n          return d.id;\n        }).filter(Boolean);\n        table.setColumnPinning(function (old) {\n          var _old$left3, _old$right3;\n\n          if (position === 'right') {\n            var _old$left, _old$right;\n\n            return {\n              left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(function (d) {\n                return !(columnIds != null && columnIds.includes(d));\n              }),\n              right: [].concat(_toConsumableArray(((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(function (d) {\n                return !(columnIds != null && columnIds.includes(d));\n              })), _toConsumableArray(columnIds))\n            };\n          }\n\n          if (position === 'left') {\n            var _old$left2, _old$right2;\n\n            return {\n              left: [].concat(_toConsumableArray(((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(function (d) {\n                return !(columnIds != null && columnIds.includes(d));\n              })), _toConsumableArray(columnIds)),\n              right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(function (d) {\n                return !(columnIds != null && columnIds.includes(d));\n              })\n            };\n          }\n\n          return {\n            left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(function (d) {\n              return !(columnIds != null && columnIds.includes(d));\n            }),\n            right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(function (d) {\n              return !(columnIds != null && columnIds.includes(d));\n            })\n          };\n        });\n      },\n      getCanPin: function getCanPin() {\n        var leafColumns = column.getLeafColumns();\n        return leafColumns.some(function (d) {\n          var _d$columnDef$enablePi, _table$options$enable;\n\n          return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_table$options$enable = table.options.enablePinning) != null ? _table$options$enable : true);\n        });\n      },\n      getIsPinned: function getIsPinned() {\n        var leafColumnIds = column.getLeafColumns().map(function (d) {\n          return d.id;\n        });\n        var _table$getState$colum5 = table.getState().columnPinning,\n            left = _table$getState$colum5.left,\n            right = _table$getState$colum5.right;\n        var isLeft = leafColumnIds.some(function (d) {\n          return left == null ? void 0 : left.includes(d);\n        });\n        var isRight = leafColumnIds.some(function (d) {\n          return right == null ? void 0 : right.includes(d);\n        });\n        return isLeft ? 'left' : isRight ? 'right' : false;\n      },\n      getPinnedIndex: function getPinnedIndex() {\n        var _table$getState$colum, _table$getState$colum2, _table$getState$colum3;\n\n        var position = column.getIsPinned();\n        return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null ? void 0 : (_table$getState$colum3 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum3.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n      }\n    };\n  },\n  createRow: function createRow(row, table) {\n    return {\n      getCenterVisibleCells: memo(function () {\n        return [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right];\n      }, function (allCells, left, right) {\n        var leftAndRight = [].concat(_toConsumableArray(left != null ? left : []), _toConsumableArray(right != null ? right : []));\n        return allCells.filter(function (d) {\n          return !leftAndRight.includes(d.column.id);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: function debug() {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getLeftVisibleCells: memo(function () {\n        return [row._getAllVisibleCells(), table.getState().columnPinning.left,,];\n      }, function (allCells, left) {\n        var cells = (left != null ? left : []).map(function (columnId) {\n          return allCells.find(function (cell) {\n            return cell.column.id === columnId;\n          });\n        }).filter(Boolean).map(function (d) {\n          return _objectSpread(_objectSpread({}, d), {}, {\n            position: 'left'\n          });\n        });\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: function debug() {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      }),\n      getRightVisibleCells: memo(function () {\n        return [row._getAllVisibleCells(), table.getState().columnPinning.right];\n      }, function (allCells, right) {\n        var cells = (right != null ? right : []).map(function (columnId) {\n          return allCells.find(function (cell) {\n            return cell.column.id === columnId;\n          });\n        }).filter(Boolean).map(function (d) {\n          return _objectSpread(_objectSpread({}, d), {}, {\n            position: 'right'\n          });\n        });\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: function debug() {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: function createTable(table) {\n    return {\n      setColumnPinning: function setColumnPinning(updater) {\n        return table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater);\n      },\n      resetColumnPinning: function resetColumnPinning(defaultState) {\n        var _table$initialState$c, _table$initialState;\n\n        return table.setColumnPinning(defaultState ? getDefaultPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultPinningState());\n      },\n      getIsSomeColumnsPinned: function getIsSomeColumnsPinned(position) {\n        var _pinningState$positio;\n\n        var pinningState = table.getState().columnPinning;\n\n        if (!position) {\n          var _pinningState$left, _pinningState$right;\n\n          return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n        }\n\n        return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n      },\n      getLeftLeafColumns: memo(function () {\n        return [table.getAllLeafColumns(), table.getState().columnPinning.left];\n      }, function (allColumns, left) {\n        return (left != null ? left : []).map(function (columnId) {\n          return allColumns.find(function (column) {\n            return column.id === columnId;\n          });\n        }).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: function debug() {\n          var _table$options$debugA4;\n\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n        }\n      }),\n      getRightLeafColumns: memo(function () {\n        return [table.getAllLeafColumns(), table.getState().columnPinning.right];\n      }, function (allColumns, right) {\n        return (right != null ? right : []).map(function (columnId) {\n          return allColumns.find(function (column) {\n            return column.id === columnId;\n          });\n        }).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: function debug() {\n          var _table$options$debugA5;\n\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n        }\n      }),\n      getCenterLeafColumns: memo(function () {\n        return [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right];\n      }, function (allColumns, left, right) {\n        var leftAndRight = [].concat(_toConsumableArray(left != null ? left : []), _toConsumableArray(right != null ? right : []));\n        return allColumns.filter(function (d) {\n          return !leftAndRight.includes(d.id);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: function debug() {\n          var _table$options$debugA6;\n\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugColumns;\n        }\n      })\n    };\n  }\n}; //\n\nvar RowSelection = {\n  getInitialState: function getInitialState(state) {\n    return _objectSpread({\n      rowSelection: {}\n    }, state);\n  },\n  getDefaultOptions: function getDefaultOptions(table) {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n\n    };\n  },\n  createTable: function createTable(table) {\n    return {\n      setRowSelection: function setRowSelection(updater) {\n        return table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater);\n      },\n      resetRowSelection: function resetRowSelection(defaultState) {\n        var _table$initialState$r;\n\n        return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n      },\n      toggleAllRowsSelected: function toggleAllRowsSelected(value) {\n        table.setRowSelection(function (old) {\n          value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n\n          var rowSelection = _objectSpread({}, old);\n\n          var preGroupedFlatRows = table.getPreGroupedRowModel().flatRows; // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n\n          if (value) {\n            preGroupedFlatRows.forEach(function (row) {\n              if (!row.getCanSelect()) {\n                return;\n              }\n\n              rowSelection[row.id] = true;\n            });\n          } else {\n            preGroupedFlatRows.forEach(function (row) {\n              delete rowSelection[row.id];\n            });\n          }\n\n          return rowSelection;\n        });\n      },\n      toggleAllPageRowsSelected: function toggleAllPageRowsSelected(value) {\n        return table.setRowSelection(function (old) {\n          var resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n\n          var rowSelection = _objectSpread({}, old);\n\n          table.getRowModel().rows.forEach(function (row) {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table);\n          });\n          return rowSelection;\n        });\n      },\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n      //   let include = false\n      //   const selectedRowIds = {}\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: function getPreSelectedRowModel() {\n        return table.getCoreRowModel();\n      },\n      getSelectedRowModel: memo(function () {\n        return [table.getState().rowSelection, table.getCoreRowModel()];\n      }, function (rowSelection, rowModel) {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: function debug() {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getFilteredSelectedRowModel: memo(function () {\n        return [table.getState().rowSelection, table.getFilteredRowModel()];\n      }, function (rowSelection, rowModel) {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getFilteredSelectedRowModel',\n        debug: function debug() {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;\n        }\n      }),\n      getGroupedSelectedRowModel: memo(function () {\n        return [table.getState().rowSelection, table.getSortedRowModel()];\n      }, function (rowSelection, rowModel) {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: function debug() {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;\n        }\n      }),\n      ///\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n      getIsAllRowsSelected: function getIsAllRowsSelected() {\n        var preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n\n        var _table$getState = table.getState(),\n            rowSelection = _table$getState.rowSelection;\n\n        var isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n\n        if (isAllRowsSelected) {\n          if (preGroupedFlatRows.some(function (row) {\n            return row.getCanSelect() && !rowSelection[row.id];\n          })) {\n            isAllRowsSelected = false;\n          }\n        }\n\n        return isAllRowsSelected;\n      },\n      getIsAllPageRowsSelected: function getIsAllPageRowsSelected() {\n        var paginationFlatRows = table.getPaginationRowModel().flatRows;\n\n        var _table$getState2 = table.getState(),\n            rowSelection = _table$getState2.rowSelection;\n\n        var isAllPageRowsSelected = !!paginationFlatRows.length;\n\n        if (isAllPageRowsSelected && paginationFlatRows.some(function (row) {\n          return !rowSelection[row.id];\n        })) {\n          isAllPageRowsSelected = false;\n        }\n\n        return isAllPageRowsSelected;\n      },\n      getIsSomeRowsSelected: function getIsSomeRowsSelected() {\n        var _table$getState$rowSe;\n\n        var totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n        return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n      },\n      getIsSomePageRowsSelected: function getIsSomePageRowsSelected() {\n        var paginationFlatRows = table.getPaginationRowModel().flatRows;\n        return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.some(function (d) {\n          return d.getIsSelected() || d.getIsSomeSelected();\n        });\n      },\n      getToggleAllRowsSelectedHandler: function getToggleAllRowsSelectedHandler() {\n        return function (e) {\n          table.toggleAllRowsSelected(e.target.checked);\n        };\n      },\n      getToggleAllPageRowsSelectedHandler: function getToggleAllPageRowsSelectedHandler() {\n        return function (e) {\n          table.toggleAllPageRowsSelected(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: function createRow(row, table) {\n    return {\n      toggleSelected: function toggleSelected(value) {\n        var isSelected = row.getIsSelected();\n        table.setRowSelection(function (old) {\n          value = typeof value !== 'undefined' ? value : !isSelected;\n\n          if (isSelected === value) {\n            return old;\n          }\n\n          var selectedRowIds = _objectSpread({}, old);\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table);\n          return selectedRowIds;\n        });\n      },\n      getIsSelected: function getIsSelected() {\n        var _table$getState3 = table.getState(),\n            rowSelection = _table$getState3.rowSelection;\n\n        return isRowSelected(row, rowSelection);\n      },\n      getIsSomeSelected: function getIsSomeSelected() {\n        var _table$getState4 = table.getState(),\n            rowSelection = _table$getState4.rowSelection;\n\n        return isSubRowSelected(row, rowSelection) === 'some';\n      },\n      getIsAllSubRowsSelected: function getIsAllSubRowsSelected() {\n        var _table$getState5 = table.getState(),\n            rowSelection = _table$getState5.rowSelection;\n\n        return isSubRowSelected(row, rowSelection) === 'all';\n      },\n      getCanSelect: function getCanSelect() {\n        var _table$options$enable;\n\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row);\n        }\n\n        return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n      },\n      getCanSelectSubRows: function getCanSelectSubRows() {\n        var _table$options$enable2;\n\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row);\n        }\n\n        return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n      },\n      getCanMultiSelect: function getCanMultiSelect() {\n        var _table$options$enable3;\n\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row);\n        }\n\n        return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n      },\n      getToggleSelectedHandler: function getToggleSelectedHandler() {\n        var canSelect = row.getCanSelect();\n        return function (e) {\n          var _target;\n\n          if (!canSelect) return;\n          row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\n\nvar mutateRowIsSelected = function mutateRowIsSelected(selectedRowIds, id, value, table) {\n  var _row$subRows;\n\n  var row = table.getRow(id); // const isGrouped = row.getIsGrouped()\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(function (key) {\n        return delete selectedRowIds[key];\n      });\n    }\n\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  } // }\n\n\n  if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(function (row) {\n      return mutateRowIsSelected(selectedRowIds, row.id, value, table);\n    });\n  }\n};\n\nfunction selectRowsFn(table, rowModel) {\n  var rowSelection = table.getState().rowSelection;\n  var newSelectedFlatRows = [];\n  var newSelectedRowsById = {}; // Filters top level and nested rows\n\n  var recurseRows = function recurseRows(rows, depth) {\n    return rows.map(function (row) {\n      var _row$subRows2;\n\n      var isSelected = isRowSelected(row, rowSelection);\n\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = _objectSpread(_objectSpread({}, row), {}, {\n          subRows: recurseRows(row.subRows)\n        });\n      }\n\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\n\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\n\nfunction isSubRowSelected(row, selection, table) {\n  if (row.subRows && row.subRows.length) {\n    var allChildrenSelected = true;\n    var someSelected = false;\n    row.subRows.forEach(function (subRow) {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n  }\n\n  return false;\n}\n\nvar reSplitAlphaNumeric = /([0-9]+)/gm;\n\nvar alphanumeric = function alphanumeric(rowA, rowB, columnId) {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\nvar alphanumericCaseSensitive = function alphanumericCaseSensitive(rowA, rowB, columnId) {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n}; // The text filter is more basic (less numeric support)\n// but is much faster\n\n\nvar text = function text(rowA, rowB, columnId) {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n}; // The text filter is more basic (less numeric support)\n// but is much faster\n\n\nvar textCaseSensitive = function textCaseSensitive(rowA, rowB, columnId) {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\nvar datetime = function datetime(rowA, rowB, columnId) {\n  var a = rowA.getValue(columnId);\n  var b = rowB.getValue(columnId); // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n\n  return a > b ? 1 : a < b ? -1 : 0;\n};\n\nvar basic = function basic(rowA, rowB, columnId) {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n}; // Utils\n\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n\n    return String(a);\n  }\n\n  if (typeof a === 'string') {\n    return a;\n  }\n\n  return '';\n} // Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\n\n\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  var a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  var b = bStr.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n  while (a.length && b.length) {\n    var aa = a.shift();\n    var bb = b.shift();\n    var an = parseInt(aa, 10);\n    var bn = parseInt(bb, 10);\n    var combo = [an, bn].sort(); // Both are string\n\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    } // One is a string, one is a number\n\n\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    } // Both are numbers\n\n\n    if (an > bn) {\n      return 1;\n    }\n\n    if (bn > an) {\n      return -1;\n    }\n  }\n\n  return a.length - b.length;\n} // Exports\n\n\nvar sortingFns = {\n  alphanumeric: alphanumeric,\n  alphanumericCaseSensitive: alphanumericCaseSensitive,\n  text: text,\n  textCaseSensitive: textCaseSensitive,\n  datetime: datetime,\n  basic: basic\n}; //\n\nvar Sorting = {\n  getInitialState: function getInitialState(state) {\n    return _objectSpread({\n      sorting: []\n    }, state);\n  },\n  getDefaultColumnDef: function getDefaultColumnDef() {\n    return {\n      sortingFn: 'auto'\n    };\n  },\n  getDefaultOptions: function getDefaultOptions(table) {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: function isMultiSortEvent(e) {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: function createColumn(column, table) {\n    return {\n      getAutoSortingFn: function getAutoSortingFn() {\n        var firstRows = table.getFilteredRowModel().flatRows.slice(10);\n        var isString = false;\n\n        var _iterator2 = _createForOfIteratorHelper(firstRows),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var row = _step2.value;\n            var value = row == null ? void 0 : row.getValue(column.id);\n\n            if (Object.prototype.toString.call(value) === '[object Date]') {\n              return sortingFns.datetime;\n            }\n\n            if (typeof value === 'string') {\n              isString = true;\n\n              if (value.split(reSplitAlphaNumeric).length > 1) {\n                return sortingFns.alphanumeric;\n              }\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        if (isString) {\n          return sortingFns.text;\n        }\n\n        return sortingFns.basic;\n      },\n      getAutoSortDir: function getAutoSortDir() {\n        var firstRow = table.getFilteredRowModel().flatRows[0];\n        var value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'string') {\n          return 'asc';\n        }\n\n        return 'desc';\n      },\n      getSortingFn: function getSortingFn() {\n        var _table$options$sortin, _table$options$sortin2;\n\n        if (!column) {\n          throw new Error();\n        }\n\n        return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n      },\n      toggleSorting: function toggleSorting(desc, multi) {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        var nextSortingOrder = column.getNextSortingOrder();\n        var hasManualValue = typeof desc !== 'undefined' && desc !== null;\n        table.setSorting(function (old) {\n          // Find any existing sorting for this column\n          var existingSorting = old == null ? void 0 : old.find(function (d) {\n            return d.id === column.id;\n          });\n          var existingIndex = old == null ? void 0 : old.findIndex(function (d) {\n            return d.id === column.id;\n          });\n          var newSorting = []; // What should we do with this sort action?\n\n          var sortAction;\n          var nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'; // Multi-mode\n\n          if (old != null && old.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'add';\n            }\n          } else {\n            // Normal mode\n            if (old != null && old.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace';\n            } else if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'replace';\n            }\n          } // Handle toggle states that will remove the sorting\n\n\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove';\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            var _table$options$maxMul;\n\n            newSorting = [].concat(_toConsumableArray(old), [{\n              id: column.id,\n              desc: nextDesc\n            }]); // Take latest n columns\n\n            newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(function (d) {\n              if (d.id === column.id) {\n                return _objectSpread(_objectSpread({}, d), {}, {\n                  desc: nextDesc\n                });\n              }\n\n              return d;\n            });\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(function (d) {\n              return d.id !== column.id;\n            });\n          } else {\n            newSorting = [{\n              id: column.id,\n              desc: nextDesc\n            }];\n          }\n\n          return newSorting;\n        });\n      },\n      getFirstSortDir: function getFirstSortDir() {\n        var _ref, _column$columnDef$sor;\n\n        var sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n        return sortDescFirst ? 'desc' : 'asc';\n      },\n      getNextSortingOrder: function getNextSortingOrder(multi) {\n        var _table$options$enable, _table$options$enable2;\n\n        var firstSortDirection = column.getFirstSortDir();\n        var isSorted = column.getIsSorted();\n\n        if (!isSorted) {\n          return firstSortDirection;\n        }\n\n        if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && ( // If enableSortRemove, enable in general\n        multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false;\n        }\n\n        return isSorted === 'desc' ? 'asc' : 'desc';\n      },\n      getCanSort: function getCanSort() {\n        var _column$columnDef$ena, _table$options$enable3;\n\n        return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n      },\n      getCanMultiSort: function getCanMultiSort() {\n        var _ref2, _column$columnDef$ena2;\n\n        return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n      },\n      getIsSorted: function getIsSorted() {\n        var _table$getState$sorti;\n\n        var columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(function (d) {\n          return d.id === column.id;\n        });\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n      },\n      getSortIndex: function getSortIndex() {\n        var _table$getState$sorti2, _table$getState$sorti3;\n\n        return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(function (d) {\n          return d.id === column.id;\n        })) != null ? _table$getState$sorti2 : -1;\n      },\n      clearSorting: function clearSorting() {\n        //clear sorting for just 1 column\n        table.setSorting(function (old) {\n          return old != null && old.length ? old.filter(function (d) {\n            return d.id !== column.id;\n          }) : [];\n        });\n      },\n      getToggleSortingHandler: function getToggleSortingHandler() {\n        var canSort = column.getCanSort();\n        return function (e) {\n          if (!canSort) return;\n          e.persist == null ? void 0 : e.persist();\n          column.toggleSorting == null ? void 0 : column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n        };\n      }\n    };\n  },\n  createTable: function createTable(table) {\n    return {\n      setSorting: function setSorting(updater) {\n        return table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater);\n      },\n      resetSorting: function resetSorting(defaultState) {\n        var _table$initialState$s, _table$initialState;\n\n        table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n      },\n      getPreSortedRowModel: function getPreSortedRowModel() {\n        return table.getGroupedRowModel();\n      },\n      getSortedRowModel: function getSortedRowModel() {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table);\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel();\n        }\n\n        return table._getSortedRowModel();\n      }\n    };\n  }\n}; //\n\nvar Visibility = {\n  getInitialState: function getInitialState(state) {\n    return _objectSpread({\n      columnVisibility: {}\n    }, state);\n  },\n  getDefaultOptions: function getDefaultOptions(table) {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: function createColumn(column, table) {\n    return {\n      toggleVisibility: function toggleVisibility(value) {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(function (old) {\n            return _objectSpread(_objectSpread({}, old), {}, _defineProperty({}, column.id, value != null ? value : !column.getIsVisible()));\n          });\n        }\n      },\n      getIsVisible: function getIsVisible() {\n        var _table$getState$colum, _table$getState$colum2;\n\n        return (_table$getState$colum = (_table$getState$colum2 = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum2[column.id]) != null ? _table$getState$colum : true;\n      },\n      getCanHide: function getCanHide() {\n        var _column$columnDef$ena, _table$options$enable;\n\n        return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n      },\n      getToggleVisibilityHandler: function getToggleVisibilityHandler() {\n        return function (e) {\n          column.toggleVisibility == null ? void 0 : column.toggleVisibility(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: function createRow(row, table) {\n    return {\n      _getAllVisibleCells: memo(function () {\n        return [row.getAllCells(), table.getState().columnVisibility];\n      }, function (cells) {\n        return cells.filter(function (cell) {\n          return cell.column.getIsVisible();\n        });\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: function debug() {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getVisibleCells: memo(function () {\n        return [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()];\n      }, function (left, center, right) {\n        return [].concat(_toConsumableArray(left), _toConsumableArray(center), _toConsumableArray(right));\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: function debug() {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: function createTable(table) {\n    var makeVisibleColumnsMethod = function makeVisibleColumnsMethod(key, getColumns) {\n      return memo(function () {\n        return [getColumns(), getColumns().filter(function (d) {\n          return d.getIsVisible();\n        }).map(function (d) {\n          return d.id;\n        }).join('_')];\n      }, function (columns) {\n        return columns.filter(function (d) {\n          return d.getIsVisible == null ? void 0 : d.getIsVisible();\n        });\n      }, {\n        key: key,\n        debug: function debug() {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n        }\n      });\n    };\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod('getVisibleFlatColumns', function () {\n        return table.getAllFlatColumns();\n      }),\n      getVisibleLeafColumns: makeVisibleColumnsMethod('getVisibleLeafColumns', function () {\n        return table.getAllLeafColumns();\n      }),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod('getLeftVisibleLeafColumns', function () {\n        return table.getLeftLeafColumns();\n      }),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod('getRightVisibleLeafColumns', function () {\n        return table.getRightLeafColumns();\n      }),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod('getCenterVisibleLeafColumns', function () {\n        return table.getCenterLeafColumns();\n      }),\n      setColumnVisibility: function setColumnVisibility(updater) {\n        return table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater);\n      },\n      resetColumnVisibility: function resetColumnVisibility(defaultState) {\n        var _table$initialState$c;\n\n        table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n      },\n      toggleAllColumnsVisible: function toggleAllColumnsVisible(value) {\n        var _value;\n\n        value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n        table.setColumnVisibility(table.getAllLeafColumns().reduce(function (obj, column) {\n          return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, column.id, !value ? !(column.getCanHide != null && column.getCanHide()) : value));\n        }, {}));\n      },\n      getIsAllColumnsVisible: function getIsAllColumnsVisible() {\n        return !table.getAllLeafColumns().some(function (column) {\n          return !(column.getIsVisible != null && column.getIsVisible());\n        });\n      },\n      getIsSomeColumnsVisible: function getIsSomeColumnsVisible() {\n        return table.getAllLeafColumns().some(function (column) {\n          return column.getIsVisible == null ? void 0 : column.getIsVisible();\n        });\n      },\n      getToggleAllColumnsVisibilityHandler: function getToggleAllColumnsVisibilityHandler() {\n        return function (e) {\n          var _target;\n\n          table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\nvar features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing]; //\n\nfunction createTable(options) {\n  var _options$initialState;\n\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...');\n  }\n\n  var table = {\n    _features: features\n  };\n\n  var defaultOptions = table._features.reduce(function (obj, feature) {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n\n  var mergeOptions = function mergeOptions(options) {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n\n    return _objectSpread(_objectSpread({}, defaultOptions), options);\n  };\n\n  var coreInitialState = {};\n\n  var initialState = _objectSpread(_objectSpread({}, coreInitialState), (_options$initialState = options.initialState) != null ? _options$initialState : {});\n\n  table._features.forEach(function (feature) {\n    var _feature$getInitialSt;\n\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n\n  var queued = [];\n  var queuedTimeout = false;\n  var coreInstance = {\n    _features: features,\n    options: _objectSpread(_objectSpread({}, defaultOptions), options),\n    initialState: initialState,\n    _queue: function _queue(cb) {\n      queued.push(cb);\n\n      if (!queuedTimeout) {\n        queuedTimeout = true; // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n\n        Promise.resolve().then(function () {\n          while (queued.length) {\n            queued.shift()();\n          }\n\n          queuedTimeout = false;\n        }).catch(function (error) {\n          return setTimeout(function () {\n            throw error;\n          });\n        });\n      }\n    },\n    reset: function reset() {\n      table.setState(table.initialState);\n    },\n    setOptions: function setOptions(updater) {\n      var newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: function getState() {\n      return table.options.state;\n    },\n    setState: function setState(updater) {\n      table.options.onStateChange == null ? void 0 : table.options.onStateChange(updater);\n    },\n    _getRowId: function _getRowId(row, index, parent) {\n      var _table$options$getRow;\n\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : \"\".concat(parent ? [parent.id, index].join('.') : index);\n    },\n    getCoreRowModel: function getCoreRowModel() {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n    getRowModel: function getRowModel() {\n      return table.getPaginationRowModel();\n    },\n    getRow: function getRow(id) {\n      var row = table.getRowModel().rowsById[id];\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\"getRow expected an ID, but got \".concat(id));\n        }\n\n        throw new Error();\n      }\n\n      return row;\n    },\n    _getDefaultColumnDef: memo(function () {\n      return [table.options.defaultColumn];\n    }, function (defaultColumn) {\n      var _defaultColumn;\n\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return _objectSpread(_objectSpread({\n        header: function header(props) {\n          var resolvedColumnDef = props.header.column.columnDef;\n\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: function cell(props) {\n          var _props$renderValue$to, _props$renderValue;\n\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null ? void 0 : _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        }\n      }, table._features.reduce(function (obj, feature) {\n        return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n      }, {})), defaultColumn);\n    }, {\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      },\n      key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef'\n    }),\n    _getColumnDefs: function _getColumnDefs() {\n      return table.options.columns;\n    },\n    getAllColumns: memo(function () {\n      return [table._getColumnDefs()];\n    }, function (columnDefs) {\n      var recurseColumns = function recurseColumns(columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n\n        return columnDefs.map(function (columnDef) {\n          var column = createColumn(table, columnDef, depth, parent);\n          var groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n\n      return recurseColumns(columnDefs);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n      debug: function debug() {\n        var _table$options$debugA2;\n\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    }),\n    getAllFlatColumns: memo(function () {\n      return [table.getAllColumns()];\n    }, function (allColumns) {\n      return allColumns.flatMap(function (column) {\n        return column.getFlatColumns();\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n      debug: function debug() {\n        var _table$options$debugA3;\n\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n      }\n    }),\n    _getAllFlatColumnsById: memo(function () {\n      return [table.getAllFlatColumns()];\n    }, function (flatColumns) {\n      return flatColumns.reduce(function (acc, column) {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n      debug: function debug() {\n        var _table$options$debugA4;\n\n        return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n      }\n    }),\n    getAllLeafColumns: memo(function () {\n      return [table.getAllColumns(), table._getOrderColumnsFn()];\n    }, function (allColumns, orderColumns) {\n      var leafColumns = allColumns.flatMap(function (column) {\n        return column.getLeafColumns();\n      });\n      return orderColumns(leafColumns);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n      debug: function debug() {\n        var _table$options$debugA5;\n\n        return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n      }\n    }),\n    getColumn: function getColumn(columnId) {\n      var column = table._getAllFlatColumnsById()[columnId];\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\"[Table] Column with id \".concat(columnId, \" does not exist.\"));\n        }\n\n        throw new Error();\n      }\n\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n\n  table._features.forEach(function (feature) {\n    return Object.assign(table, feature.createTable == null ? void 0 : feature.createTable(table));\n  });\n\n  return table;\n}\n\nfunction createCell(table, row, column, columnId) {\n  var getRenderValue = function getRenderValue() {\n    var _cell$getValue;\n\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n\n  var cell = {\n    id: \"\".concat(row.id, \"_\").concat(column.id),\n    row: row,\n    column: column,\n    getValue: function getValue() {\n      return row.getValue(columnId);\n    },\n    renderValue: getRenderValue,\n    getContext: memo(function () {\n      return [table, column, row, cell];\n    }, function (table, column, row, cell) {\n      return {\n        table: table,\n        column: column,\n        row: row,\n        cell: cell,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue\n      };\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n      debug: function debug() {\n        return table.options.debugAll;\n      }\n    })\n  };\n\n  table._features.forEach(function (feature) {\n    Object.assign(cell, feature.createCell == null ? void 0 : feature.createCell(cell, column, row, table));\n  }, {});\n\n  return cell;\n}\n\nvar createRow = function createRow(table, id, original, rowIndex, depth, subRows) {\n  var row = {\n    id: id,\n    index: rowIndex,\n    original: original,\n    depth: depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: function getValue(columnId) {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n\n      var column = table.getColumn(columnId);\n\n      if (!column.accessorFn) {\n        return undefined;\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: function getUniqueValues(columnId) {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n\n      var column = table.getColumn(columnId);\n\n      if (!column.accessorFn) {\n        return undefined;\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: function renderValue(columnId) {\n      var _row$getValue;\n\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: function getLeafRows() {\n      return flattenBy(row.subRows, function (d) {\n        return d.subRows;\n      });\n    },\n    getAllCells: memo(function () {\n      return [table.getAllLeafColumns()];\n    }, function (leafColumns) {\n      return leafColumns.map(function (column) {\n        return createCell(table, row, column, column.id);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n      }\n    }),\n    _getAllCellsByColumnId: memo(function () {\n      return [row.getAllCells()];\n    }, function (allCells) {\n      return allCells.reduce(function (acc, cell) {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n      debug: function debug() {\n        var _table$options$debugA2;\n\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n      }\n    })\n  };\n\n  for (var i = 0; i < table._features.length; i++) {\n    var feature = table._features[i];\n    Object.assign(row, feature == null ? void 0 : feature.createRow == null ? void 0 : feature.createRow(row, table));\n  }\n\n  return row;\n}; // type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n// const helper = createColumnHelper<Person>()\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\n\nfunction createColumnHelper() {\n  return {\n    accessor: function accessor(_accessor, column) {\n      return typeof _accessor === 'function' ? _objectSpread(_objectSpread({}, column), {}, {\n        accessorFn: _accessor\n      }) : _objectSpread(_objectSpread({}, column), {}, {\n        accessorKey: _accessor\n      });\n    },\n    display: function display(column) {\n      return column;\n    },\n    group: function group(column) {\n      return column;\n    }\n  };\n}\n\nfunction getCoreRowModel() {\n  return function (table) {\n    return memo(function () {\n      return [table.options.data];\n    }, function (data) {\n      var rowModel = {\n        rows: [],\n        flatRows: [],\n        rowsById: {}\n      };\n\n      var accessRows = function accessRows(originalRows, depth, parent) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n\n        var rows = [];\n\n        for (var i = 0; i < originalRows.length; i++) {\n          // This could be an expensive check at scale, so we should move it somewhere else, but where?\n          // if (!id) {\n          //   if (process.env.NODE_ENV !== 'production') {\n          //     throw new Error(`getRowId expected an ID, but got ${id}`)\n          //   }\n          // }\n          // Make the row\n          var row = createRow(table, table._getRowId(originalRows[i], i, parent), originalRows[i], i, depth); // Keep track of every row in a flat array\n\n          rowModel.flatRows.push(row); // Also keep track of every row by its ID\n\n          rowModel.rowsById[row.id] = row; // Push table row into parent\n\n          rows.push(row); // Get the original subrows\n\n          if (table.options.getSubRows) {\n            var _row$originalSubRows;\n\n            row.originalSubRows = table.options.getSubRows(originalRows[i], i); // Then recursively access them\n\n            if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n              row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n            }\n          }\n        }\n\n        return rows;\n      };\n\n      rowModel.rows = accessRows(data);\n      return rowModel;\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getRowModel',\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n      },\n      onChange: function onChange() {\n        table._autoResetPageIndex();\n      }\n    });\n  };\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\n\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n\n  var newFilteredFlatRows = [];\n  var newFilteredRowsById = {};\n  var maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n\n  var recurseFilterRows = function recurseFilterRows(rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n\n    var rows = []; // Filter from children up first\n\n    for (var i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n\n      var row = rowsToFilter[i];\n      var newRow = createRow(table, row.id, row.original, row.index, row.depth);\n      newRow.columnFilters = row.columnFilters;\n\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n      } else {\n        row = newRow;\n\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n        }\n      }\n    }\n\n    return rows;\n  };\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n\n  var newFilteredFlatRows = [];\n  var newFilteredRowsById = {};\n  var maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100; // Filters top level and nested rows\n\n  var recurseFilterRows = function recurseFilterRows(rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    } // Filter from parents downward first\n\n\n    var rows = []; // Apply the filter to any subRows\n\n    for (var i = 0; i < rowsToFilter.length; i++) {\n      var row = rowsToFilter[i];\n      var pass = filterRow(row);\n\n      if (pass) {\n        var _row$subRows2;\n\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\n          var newRow = createRow(table, row.id, row.original, row.index, row.depth);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n\n    return rows;\n  };\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFilteredRowModel() {\n  return function (table) {\n    return memo(function () {\n      return [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter];\n    }, function (rowModel, columnFilters, globalFilter) {\n      if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n        for (var i = 0; i < rowModel.flatRows.length; i++) {\n          rowModel.flatRows[i].columnFilters = {};\n          rowModel.flatRows[i].columnFiltersMeta = {};\n        }\n\n        return rowModel;\n      }\n\n      var resolvedColumnFilters = [];\n      var resolvedGlobalFilters = [];\n      (columnFilters != null ? columnFilters : []).forEach(function (d) {\n        var _filterFn$resolveFilt;\n\n        var column = table.getColumn(d.id);\n\n        if (!column) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\"Table: Could not find a column to filter with columnId: \".concat(d.id));\n          }\n        }\n\n        var filterFn = column.getFilterFn();\n\n        if (!filterFn) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\"Could not find a valid 'column.filterFn' for column with the ID: \".concat(column.id, \".\"));\n          }\n\n          return;\n        }\n\n        resolvedColumnFilters.push({\n          id: d.id,\n          filterFn: filterFn,\n          resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n        });\n      });\n      var filterableIds = columnFilters.map(function (d) {\n        return d.id;\n      });\n      var globalFilterFn = table.getGlobalFilterFn();\n      var globallyFilterableColumns = table.getAllLeafColumns().filter(function (column) {\n        return column.getCanGlobalFilter();\n      });\n\n      if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n        filterableIds.push('__global__');\n        globallyFilterableColumns.forEach(function (column) {\n          var _globalFilterFn$resol;\n\n          resolvedGlobalFilters.push({\n            id: column.id,\n            filterFn: globalFilterFn,\n            resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n          });\n        });\n      }\n\n      var currentColumnFilter;\n      var currentGlobalFilter; // Flag the prefiltered row model with each filter state\n\n      var _loop2 = function _loop2(j) {\n        var row = rowModel.flatRows[j];\n        row.columnFilters = {};\n\n        if (resolvedColumnFilters.length) {\n          var _loop3 = function _loop3(_i2) {\n            currentColumnFilter = resolvedColumnFilters[_i2];\n            var id = currentColumnFilter.id; // Tag the row with the column filter state\n\n            row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, function (filterMeta) {\n              row.columnFiltersMeta[id] = filterMeta;\n            });\n          };\n\n          for (var _i2 = 0; _i2 < resolvedColumnFilters.length; _i2++) {\n            _loop3(_i2);\n          }\n        }\n\n        if (resolvedGlobalFilters.length) {\n          var _loop4 = function _loop4(_i3) {\n            currentGlobalFilter = resolvedGlobalFilters[_i3];\n            var id = currentGlobalFilter.id; // Tag the row with the first truthy global filter state\n\n            if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, function (filterMeta) {\n              row.columnFiltersMeta[id] = filterMeta;\n            })) {\n              row.columnFilters.__global__ = true;\n              return \"break\";\n            }\n          };\n\n          for (var _i3 = 0; _i3 < resolvedGlobalFilters.length; _i3++) {\n            var _ret = _loop4(_i3);\n\n            if (_ret === \"break\") break;\n          }\n\n          if (row.columnFilters.__global__ !== true) {\n            row.columnFilters.__global__ = false;\n          }\n        }\n      };\n\n      for (var j = 0; j < rowModel.flatRows.length; j++) {\n        _loop2(j);\n      }\n\n      var filterRowsImpl = function filterRowsImpl(row) {\n        // Horizontally filter rows through each column\n        for (var _i = 0; _i < filterableIds.length; _i++) {\n          if (row.columnFilters[filterableIds[_i]] === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }; // Filter final rows using all of the active filters\n\n\n      return filterRows(rowModel.rows, filterRowsImpl, table);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n      },\n      onChange: function onChange() {\n        table._autoResetPageIndex();\n      }\n    });\n  };\n}\n\nfunction getFacetedRowModel() {\n  return function (table, columnId) {\n    return memo(function () {\n      return [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()];\n    }, function (preRowModel, columnFilters, globalFilter) {\n      if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n        return preRowModel;\n      }\n\n      var filterableIds = [].concat(_toConsumableArray(columnFilters.map(function (d) {\n        return d.id;\n      }).filter(function (d) {\n        return d !== columnId;\n      })), [globalFilter ? '__global__' : undefined]).filter(Boolean);\n\n      var filterRowsImpl = function filterRowsImpl(row) {\n        // Horizontally filter rows through each column\n        for (var i = 0; i < filterableIds.length; i++) {\n          if (row.columnFilters[filterableIds[i]] === false) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      return filterRows(preRowModel.rows, filterRowsImpl, table);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getFacetedRowModel_' + columnId,\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n      },\n      onChange: function onChange() {}\n    });\n  };\n}\n\nfunction getFacetedUniqueValues() {\n  return function (table, columnId) {\n    return memo(function () {\n      return [table.getColumn(columnId).getFacetedRowModel()];\n    }, function (facetedRowModel) {\n      var facetedUniqueValues = new Map();\n\n      for (var i = 0; i < facetedRowModel.flatRows.length; i++) {\n        var values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n\n        for (var j = 0; j < values.length; j++) {\n          var value = values[j];\n\n          if (facetedUniqueValues.has(value)) {\n            var _facetedUniqueValues$;\n\n            facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n          } else {\n            facetedUniqueValues.set(value, 1);\n          }\n        }\n      }\n\n      return facetedUniqueValues;\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getFacetedUniqueValues_' + columnId,\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n      },\n      onChange: function onChange() {}\n    });\n  };\n}\n\nfunction getFacetedMinMaxValues() {\n  return function (table, columnId) {\n    return memo(function () {\n      return [table.getColumn(columnId).getFacetedRowModel()];\n    }, function (facetedRowModel) {\n      var _facetedRowModel$flat;\n\n      var firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getUniqueValues(columnId);\n\n      if (typeof firstValue === 'undefined') {\n        return undefined;\n      }\n\n      var facetedMinMaxValues = [firstValue, firstValue];\n\n      for (var i = 0; i < facetedRowModel.flatRows.length; i++) {\n        var values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n\n        for (var j = 0; j < values.length; j++) {\n          var value = values[j];\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value;\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value;\n          }\n        }\n      }\n\n      return facetedMinMaxValues;\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getFacetedMinMaxValues_' + columnId,\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n      },\n      onChange: function onChange() {}\n    });\n  };\n}\n\nfunction getSortedRowModel() {\n  return function (table) {\n    return memo(function () {\n      return [table.getState().sorting, table.getPreSortedRowModel()];\n    }, function (sorting, rowModel) {\n      if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n        return rowModel;\n      }\n\n      var sortingState = table.getState().sorting;\n      var sortedFlatRows = []; // Filter out sortings that correspond to non existing columns\n\n      var availableSorting = sortingState.filter(function (sort) {\n        return table.getColumn(sort.id).getCanSort();\n      });\n      var columnInfoById = {};\n      availableSorting.forEach(function (sortEntry) {\n        var column = table.getColumn(sortEntry.id);\n        columnInfoById[sortEntry.id] = {\n          sortUndefined: column.columnDef.sortUndefined,\n          invertSorting: column.columnDef.invertSorting,\n          sortingFn: column.getSortingFn()\n        };\n      });\n\n      var sortData = function sortData(rows) {\n        // This will also perform a stable sorting using the row index\n        // if needed.\n        var sortedData = _toConsumableArray(rows);\n\n        sortedData.sort(function (rowA, rowB) {\n          for (var i = 0; i < availableSorting.length; i += 1) {\n            var _sortEntry$desc;\n\n            var sortEntry = availableSorting[i];\n            var columnInfo = columnInfoById[sortEntry.id];\n            var isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n\n            if (columnInfo.sortUndefined) {\n              var aValue = rowA.getValue(sortEntry.id);\n              var bValue = rowB.getValue(sortEntry.id);\n              var aUndefined = typeof aValue === 'undefined';\n              var bUndefined = typeof bValue === 'undefined';\n\n              if (aUndefined || bUndefined) {\n                return aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n              }\n            } // This function should always return in ascending order\n\n\n            var sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n\n            if (sortInt !== 0) {\n              if (isDesc) {\n                sortInt *= -1;\n              }\n\n              if (columnInfo.invertSorting) {\n                sortInt *= -1;\n              }\n\n              return sortInt;\n            }\n          }\n\n          return rowA.index - rowB.index;\n        }); // If there are sub-rows, sort them\n\n        sortedData.forEach(function (row) {\n          var _row$subRows;\n\n          sortedFlatRows.push(row);\n\n          if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n            row.subRows = sortData(row.subRows);\n          }\n        });\n        return sortedData;\n      };\n\n      return {\n        rows: sortData(rowModel.rows),\n        flatRows: sortedFlatRows,\n        rowsById: rowModel.rowsById\n      };\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n      },\n      onChange: function onChange() {\n        table._autoResetPageIndex();\n      }\n    });\n  };\n}\n\nfunction getGroupedRowModel() {\n  return function (table) {\n    return memo(function () {\n      return [table.getState().grouping, table.getPreGroupedRowModel()];\n    }, function (grouping, rowModel) {\n      if (!rowModel.rows.length || !grouping.length) {\n        return rowModel;\n      } // Filter the grouping list down to columns that exist\n\n\n      var existingGrouping = grouping.filter(function (columnId) {\n        return table.getColumn(columnId);\n      });\n      var groupedFlatRows = [];\n      var groupedRowsById = {}; // const onlyGroupedFlatRows: Row[] = [];\n      // const onlyGroupedRowsById: Record<RowId, Row> = {};\n      // const nonGroupedFlatRows: Row[] = [];\n      // const nonGroupedRowsById: Record<RowId, Row> = {};\n      // Recursively group the data\n\n      var groupUpRecursively = function groupUpRecursively(rows, depth, parentId) {\n        if (depth === void 0) {\n          depth = 0;\n        } // Grouping depth has been been met\n        // Stop grouping and simply rewrite thd depth and row relationships\n\n\n        if (depth >= existingGrouping.length) {\n          return rows.map(function (row) {\n            row.depth = depth;\n            groupedFlatRows.push(row);\n            groupedRowsById[row.id] = row;\n\n            if (row.subRows) {\n              row.subRows = groupUpRecursively(row.subRows, depth + 1);\n            }\n\n            return row;\n          });\n        }\n\n        var columnId = existingGrouping[depth]; // Group the rows together for this level\n\n        var rowGroupsMap = groupBy(rows, columnId); // Peform aggregations for each group\n\n        var aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(function (_ref, index) {\n          var _ref5 = _slicedToArray(_ref, 2),\n              groupingValue = _ref5[0],\n              groupedRows = _ref5[1];\n\n          var id = \"\".concat(columnId, \":\").concat(groupingValue);\n          id = parentId ? \"\".concat(parentId, \">\").concat(id) : id; // First, Recurse to group sub rows before aggregation\n\n          var subRows = groupUpRecursively(groupedRows, depth + 1, id); // Flatten the leaf rows of the rows in this group\n\n          var leafRows = depth ? flattenBy(groupedRows, function (row) {\n            return row.subRows;\n          }) : groupedRows;\n          var row = createRow(table, id, leafRows[0].original, index, depth);\n          Object.assign(row, {\n            groupingColumnId: columnId,\n            groupingValue: groupingValue,\n            subRows: subRows,\n            leafRows: leafRows,\n            getValue: function getValue(columnId) {\n              // Don't aggregate columns that are in the grouping\n              if (existingGrouping.includes(columnId)) {\n                if (row._valuesCache.hasOwnProperty(columnId)) {\n                  return row._valuesCache[columnId];\n                }\n\n                if (groupedRows[0]) {\n                  var _groupedRows$0$getVal;\n\n                  row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n                }\n\n                return row._valuesCache[columnId];\n              }\n\n              if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                return row._groupingValuesCache[columnId];\n              } // Aggregate the values\n\n\n              var column = table.getColumn(columnId);\n              var aggregateFn = column.getAggregationFn();\n\n              if (aggregateFn) {\n                row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n                return row._groupingValuesCache[columnId];\n              }\n            }\n          });\n          subRows.forEach(function (subRow) {\n            groupedFlatRows.push(subRow);\n            groupedRowsById[subRow.id] = subRow; // if (subRow.getIsGrouped?.()) {\n            //   onlyGroupedFlatRows.push(subRow);\n            //   onlyGroupedRowsById[subRow.id] = subRow;\n            // } else {\n            //   nonGroupedFlatRows.push(subRow);\n            //   nonGroupedRowsById[subRow.id] = subRow;\n            // }\n          });\n          return row;\n        });\n        return aggregatedGroupedRows;\n      };\n\n      var groupedRows = groupUpRecursively(rowModel.rows, 0, '');\n      groupedRows.forEach(function (subRow) {\n        groupedFlatRows.push(subRow);\n        groupedRowsById[subRow.id] = subRow; // if (subRow.getIsGrouped?.()) {\n        //   onlyGroupedFlatRows.push(subRow);\n        //   onlyGroupedRowsById[subRow.id] = subRow;\n        // } else {\n        //   nonGroupedFlatRows.push(subRow);\n        //   nonGroupedRowsById[subRow.id] = subRow;\n        // }\n      });\n      return {\n        rows: groupedRows,\n        flatRows: groupedFlatRows,\n        rowsById: groupedRowsById\n      };\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n      },\n      onChange: function onChange() {\n        table._queue(function () {\n          table._autoResetExpanded();\n\n          table._autoResetPageIndex();\n        });\n      }\n    });\n  };\n}\n\nfunction groupBy(rows, columnId) {\n  var groupMap = new Map();\n  return rows.reduce(function (map, row) {\n    var resKey = \"\".concat(row.getValue(columnId));\n    var previous = map.get(resKey);\n\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n\n    return map;\n  }, groupMap);\n}\n\nfunction getExpandedRowModel() {\n  return function (table) {\n    return memo(function () {\n      return [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows];\n    }, function (expanded, rowModel, paginateExpandedRows) {\n      if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n        return rowModel;\n      }\n\n      if (!paginateExpandedRows) {\n        // Only expand rows at this point if they are being paginated\n        return rowModel;\n      }\n\n      return expandRows(rowModel);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n      }\n    });\n  };\n}\n\nfunction expandRows(rowModel) {\n  var expandedRows = [];\n\n  var handleRow = function handleRow(row) {\n    var _row$subRows;\n\n    expandedRows.push(row);\n\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getPaginationRowModel(opts) {\n  return function (table) {\n    return memo(function () {\n      return [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded];\n    }, function (pagination, rowModel) {\n      if (!rowModel.rows.length) {\n        return rowModel;\n      }\n\n      var pageSize = pagination.pageSize,\n          pageIndex = pagination.pageIndex;\n      var rows = rowModel.rows,\n          flatRows = rowModel.flatRows,\n          rowsById = rowModel.rowsById;\n      var pageStart = pageSize * pageIndex;\n      var pageEnd = pageStart + pageSize;\n      rows = rows.slice(pageStart, pageEnd);\n      var paginatedRowModel;\n\n      if (!table.options.paginateExpandedRows) {\n        paginatedRowModel = expandRows({\n          rows: rows,\n          flatRows: flatRows,\n          rowsById: rowsById\n        });\n      } else {\n        paginatedRowModel = {\n          rows: rows,\n          flatRows: flatRows,\n          rowsById: rowsById\n        };\n      }\n\n      paginatedRowModel.flatRows = [];\n\n      var handleRow = function handleRow(row) {\n        paginatedRowModel.flatRows.push(row);\n\n        if (row.subRows.length) {\n          row.subRows.forEach(handleRow);\n        }\n      };\n\n      paginatedRowModel.rows.forEach(handleRow);\n      return paginatedRowModel;\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n      debug: function debug() {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n      }\n    });\n  };\n}\n\nexport { ColumnSizing, Expanding, Filters, Grouping, Headers, Ordering, Pagination, Pinning, RowSelection, Sorting, Visibility, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getPaginationRowModel, getSortedRowModel, isFunction, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };","map":{"version":3,"mappings":"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","names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","_resolvedColumnDef$id","replace","undefined","_ref","header","accessorFn","includes","originalRow","split","process","env","NODE_ENV","Error","column","columns","getFlatColumns","_column$columns","flatMap","options","debugAll","_table$options$debugA","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","_left$map$filter","rightColumns","_right$map$filter","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_center$","_center$0$headers","_right$","_right$0$headers","_table$options$debugA16","columnsToGroup","headerFamily","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","_headerGroups$","_headerGroups$0$heade","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","_column$columnDef$max","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","_ref2","rest","getCanResize","enableResizing","_column$columnDef$ena","enableColumnResizing","_table$options$enable","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","_table$initialState$c","resetHeaderSizeInfo","getTotalSize","_table$getHeaderGroup2","_table$getHeaderGroup","getLeftTotalSize","_table$getLeftHeaderG2","_table$getLeftHeaderG","getCenterTotalSize","_table$getCenterHeade2","_table$getCenterHeade","getRightTotalSize","_table$getRightHeader2","_table$getRightHeader","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","_table$options$autoRe","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState","_table$initialState$e","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","_expanded","getIsRowExpanded","getRowCanExpand","_table$options$getRow","enableExpanding","subRows","_row$subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","value","getCoreRowModel","_table$getCoreRowMode","_getAllCellsByColumnId","_table$getCoreRowMode2","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","_table$options$filter","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","_table$options$enable2","getCanGlobalFilter","enableGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter4","_table$options$filter3","getAllLeafColumns","updateFn","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_props$getValue","toString","_toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg2","_table$options$aggreg","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","_table$initialState$p3","_table$initialState$p2","resetPageSize","setPageSize","_table$initialState2","_table$initialState2$","_table$initialState$p4","topRowIndex","floor","setPageCount","newPageCount","_table$options$pageCo","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left","_old$right","_old$left2","_old$right2","_old$left3","_old$right3","getCanPin","enablePinning","_d$columnDef$enablePi","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","pinningState","_pinningState$right","_pinningState$positio","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","_table$getState$rowSe","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin2","_table$options$sortin","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","maxMultiSortColCount","_table$options$maxMul","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","_table$getState$sorti","getSortIndex","_table$getState$sorti2","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","defaultOptions","mergeOptions","coreInitialState","_options$initialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","renderValue","_props$renderValue","_props$renderValue$to","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","warn","getRenderValue","_cell$getValue","renderFallbackValue","original","rowIndex","_valuesCache","_uniqueValuesCache","hasOwnProperty","getUniqueValues","_row$getValue","getLeafRows","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","originalSubRows","_row$originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","_table$options$maxLea","recurseFilterRows","newRow","_table$options$maxLea2","pass","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","facetedRowModel","facetedUniqueValues","has","set","get","_facetedUniqueValues$","firstValue","_facetedRowModel$flat","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","_sortEntry$desc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"sources":["/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/utils.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/core/column.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/core/headers.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/features/ColumnSizing.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/features/Expanding.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/filterFns.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/features/Filters.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/aggregationFns.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/features/Grouping.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/features/Ordering.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/features/Pagination.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/features/Pinning.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/features/RowSelection.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/sortingFns.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/features/Sorting.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/features/Visibility.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/core/table.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/core/cell.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/core/row.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/columnHelper.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/utils/filterRowsUtils.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/utils/getFilteredRowModel.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/utils/getFacetedRowModel.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/utils/getFacetedUniqueValues.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/utils/getGroupedRowModel.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts","/mnt/disk2/ionicapps/elearn/node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            throw new Error(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(row.getValue<string>(columnId)?.toLowerCase().includes(search))\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(row.getValue<string>(columnId)?.includes(filterValue))\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows);\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"]},"metadata":{},"sourceType":"module"}