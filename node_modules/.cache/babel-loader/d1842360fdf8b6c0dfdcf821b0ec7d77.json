{"ast":null,"code":"import { __rest } from 'tslib';\nimport { createBrowserHistory, createHashHistory } from 'history';\nimport React from 'react';\nimport { matchPath as matchPath$1, withRouter, Router } from 'react-router-dom';\nimport { ViewStacks, generateId, IonRoute, ViewLifeCycleManager, StackContext, RouteManagerContext, getConfig, LocationHistory, NavManager } from '@ionic/react';\nimport { Route, matchPath, Router as Router$1 } from 'react-router';\n\nclass IonRouteInner extends React.PureComponent {\n  render() {\n    return React.createElement(Route, {\n      path: this.props.path,\n      exact: this.props.exact,\n      render: this.props.render,\n\n      /**\n       * `computedMatch` is a private API in react-router v5 that\n       * has been removed in v6.\n       *\n       * This needs to be removed when we support v6.\n       *\n       * TODO: FW-647\n       */\n      computedMatch: this.props.computedMatch\n    });\n  }\n\n}\n\nclass ReactRouterViewStack extends ViewStacks {\n  constructor() {\n    super();\n    this.createViewItem = this.createViewItem.bind(this);\n    this.findViewItemByRouteInfo = this.findViewItemByRouteInfo.bind(this);\n    this.findLeavingViewItemByRouteInfo = this.findLeavingViewItemByRouteInfo.bind(this);\n    this.getChildrenToRender = this.getChildrenToRender.bind(this);\n    this.findViewItemByPathname = this.findViewItemByPathname.bind(this);\n  }\n\n  createViewItem(outletId, reactElement, routeInfo, page) {\n    const viewItem = {\n      id: generateId('viewItem'),\n      outletId,\n      ionPageElement: page,\n      reactElement,\n      mount: true,\n      ionRoute: false\n    };\n    const matchProps = {\n      exact: reactElement.props.exact,\n      path: reactElement.props.path || reactElement.props.from,\n      component: reactElement.props.component\n    };\n    const match = matchPath(routeInfo.pathname, matchProps);\n\n    if (reactElement.type === IonRoute) {\n      viewItem.ionRoute = true;\n      viewItem.disableIonPageManagement = reactElement.props.disableIonPageManagement;\n    }\n\n    viewItem.routeData = {\n      match,\n      childProps: reactElement.props\n    };\n    return viewItem;\n  }\n\n  getChildrenToRender(outletId, ionRouterOutlet, routeInfo) {\n    const viewItems = this.getViewItemsForOutlet(outletId); // Sync latest routes with viewItems\n\n    React.Children.forEach(ionRouterOutlet.props.children, child => {\n      const viewItem = viewItems.find(v => {\n        return matchComponent$1(child, v.routeData.childProps.path || v.routeData.childProps.from);\n      });\n\n      if (viewItem) {\n        viewItem.reactElement = child;\n      }\n    });\n    const children = viewItems.map(viewItem => {\n      let clonedChild;\n\n      if (viewItem.ionRoute && !viewItem.disableIonPageManagement) {\n        clonedChild = React.createElement(ViewLifeCycleManager, {\n          key: `view-${viewItem.id}`,\n          mount: viewItem.mount,\n          removeView: () => this.remove(viewItem)\n        }, React.cloneElement(viewItem.reactElement, {\n          computedMatch: viewItem.routeData.match\n        }));\n      } else {\n        const match = matchComponent$1(viewItem.reactElement, routeInfo.pathname);\n        clonedChild = React.createElement(ViewLifeCycleManager, {\n          key: `view-${viewItem.id}`,\n          mount: viewItem.mount,\n          removeView: () => this.remove(viewItem)\n        }, React.cloneElement(viewItem.reactElement, {\n          computedMatch: viewItem.routeData.match\n        }));\n\n        if (!match && viewItem.routeData.match) {\n          viewItem.routeData.match = undefined;\n          viewItem.mount = false;\n        }\n      }\n\n      return clonedChild;\n    });\n    return children;\n  }\n\n  findViewItemByRouteInfo(routeInfo, outletId, updateMatch) {\n    const {\n      viewItem,\n      match\n    } = this.findViewItemByPath(routeInfo.pathname, outletId);\n    const shouldUpdateMatch = updateMatch === undefined || updateMatch === true;\n\n    if (shouldUpdateMatch && viewItem && match) {\n      viewItem.routeData.match = match;\n    }\n\n    return viewItem;\n  }\n\n  findLeavingViewItemByRouteInfo(routeInfo, outletId) {\n    let mustBeIonRoute = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const {\n      viewItem\n    } = this.findViewItemByPath(routeInfo.lastPathname, outletId, false, mustBeIonRoute);\n    return viewItem;\n  }\n\n  findViewItemByPathname(pathname, outletId) {\n    const {\n      viewItem\n    } = this.findViewItemByPath(pathname, outletId);\n    return viewItem;\n  }\n\n  findViewItemByPath(pathname, outletId, forceExact, mustBeIonRoute) {\n    let viewItem;\n    let match;\n    let viewStack;\n\n    if (outletId) {\n      viewStack = this.getViewItemsForOutlet(outletId);\n      viewStack.some(matchView);\n\n      if (!viewItem) {\n        viewStack.some(matchDefaultRoute);\n      }\n    } else {\n      const viewItems = this.getAllViewItems();\n      viewItems.some(matchView);\n\n      if (!viewItem) {\n        viewItems.some(matchDefaultRoute);\n      }\n    }\n\n    return {\n      viewItem,\n      match\n    };\n\n    function matchView(v) {\n      if (mustBeIonRoute && !v.ionRoute) {\n        return false;\n      }\n\n      const matchProps = {\n        exact: forceExact ? true : v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component\n      };\n      const myMatch = matchPath(pathname, matchProps);\n\n      if (myMatch) {\n        viewItem = v;\n        match = myMatch;\n        return true;\n      }\n\n      return false;\n    }\n\n    function matchDefaultRoute(v) {\n      // try to find a route that doesn't have a path or from prop, that will be our default route\n      if (!v.routeData.childProps.path && !v.routeData.childProps.from) {\n        match = {\n          path: pathname,\n          url: pathname,\n          isExact: true,\n          params: {}\n        };\n        viewItem = v;\n        return true;\n      }\n\n      return false;\n    }\n  }\n\n}\n\nfunction matchComponent$1(node, pathname, forceExact) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component\n  };\n  const match = matchPath(pathname, matchProps);\n  return match;\n}\n\nfunction clonePageElement(leavingViewHtml) {\n  let html;\n\n  if (typeof leavingViewHtml === 'string') {\n    html = leavingViewHtml;\n  } else {\n    html = leavingViewHtml.outerHTML;\n  }\n\n  if (document) {\n    const newEl = document.createElement('div');\n    newEl.innerHTML = html;\n    newEl.style.zIndex = ''; // Remove an existing back button so the new element doesn't get two of them\n\n    const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n\n    if (ionBackButton[0]) {\n      ionBackButton[0].remove();\n    }\n\n    return newEl.firstChild;\n  }\n\n  return undefined;\n}\n\nconst isViewVisible = el => !el.classList.contains('ion-page-invisible') && !el.classList.contains('ion-page-hidden');\n\nclass StackManager extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.stackContextValue = {\n      registerIonPage: this.registerIonPage.bind(this),\n      isInOutlet: () => true\n    };\n    this.pendingPageTransition = false;\n    this.registerIonPage = this.registerIonPage.bind(this);\n    this.transitionPage = this.transitionPage.bind(this);\n    this.handlePageTransition = this.handlePageTransition.bind(this);\n    this.id = generateId('routerOutlet');\n    this.prevProps = undefined;\n    this.skipTransition = false;\n  }\n\n  componentDidMount() {\n    if (this.clearOutletTimeout) {\n      /**\n       * The clearOutlet integration with React Router is a bit hacky.\n       * It uses a timeout to clear the outlet after a transition.\n       * In React v18, components are mounted and unmounted in development mode\n       * to check for side effects.\n       *\n       * This clearTimeout prevents the outlet from being cleared when the component is re-mounted,\n       * which should only happen in development mode and as a result of a hot reload.\n       */\n      clearTimeout(this.clearOutletTimeout);\n    }\n\n    if (this.routerOutletElement) {\n      this.setupRouterOutlet(this.routerOutletElement);\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      pathname\n    } = this.props.routeInfo;\n    const {\n      pathname: prevPathname\n    } = prevProps.routeInfo;\n\n    if (pathname !== prevPathname) {\n      this.prevProps = prevProps;\n      this.handlePageTransition(this.props.routeInfo);\n    } else if (this.pendingPageTransition) {\n      this.handlePageTransition(this.props.routeInfo);\n      this.pendingPageTransition = false;\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearOutletTimeout = this.context.clearOutlet(this.id);\n  }\n\n  async handlePageTransition(routeInfo) {\n    var _a, _b;\n\n    if (!this.routerOutletElement || !this.routerOutletElement.commit) {\n      /**\n       * The route outlet has not mounted yet. We need to wait for it to render\n       * before we can transition the page.\n       *\n       * Set a flag to indicate that we should transition the page after\n       * the component has updated.\n       */\n      this.pendingPageTransition = true;\n    } else {\n      let enteringViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n      let leavingViewItem = this.context.findLeavingViewItemByRouteInfo(routeInfo, this.id);\n\n      if (!leavingViewItem && routeInfo.prevRouteLastPathname) {\n        leavingViewItem = this.context.findViewItemByPathname(routeInfo.prevRouteLastPathname, this.id);\n      } // Check if leavingViewItem should be unmounted\n\n\n      if (leavingViewItem) {\n        if (routeInfo.routeAction === 'replace') {\n          leavingViewItem.mount = false;\n        } else if (!(routeInfo.routeAction === 'push' && routeInfo.routeDirection === 'forward')) {\n          if (routeInfo.routeDirection !== 'none' && enteringViewItem !== leavingViewItem) {\n            leavingViewItem.mount = false;\n          }\n        } else if ((_a = routeInfo.routeOptions) === null || _a === void 0 ? void 0 : _a.unmount) {\n          leavingViewItem.mount = false;\n        }\n      }\n\n      const enteringRoute = matchRoute((_b = this.ionRouterOutlet) === null || _b === void 0 ? void 0 : _b.props.children, routeInfo);\n\n      if (enteringViewItem) {\n        enteringViewItem.reactElement = enteringRoute;\n      } else if (enteringRoute) {\n        enteringViewItem = this.context.createViewItem(this.id, enteringRoute, routeInfo);\n        this.context.addViewItem(enteringViewItem);\n      }\n\n      if (enteringViewItem && enteringViewItem.ionPageElement) {\n        /**\n         * If the entering view item is the same as the leaving view item,\n         * then we don't need to transition.\n         */\n        if (enteringViewItem === leavingViewItem) {\n          /**\n           * If the entering view item is the same as the leaving view item,\n           * we are either transitioning using parameterized routes to the same view\n           * or a parent router outlet is re-rendering as a result of React props changing.\n           *\n           * If the route data does not match the current path, the parent router outlet\n           * is attempting to transition and we cancel the operation.\n           */\n          if (enteringViewItem.routeData.match.url !== routeInfo.pathname) {\n            return;\n          }\n        }\n        /**\n         * If there isn't a leaving view item, but the route info indicates\n         * that the user has routed from a previous path, then we need\n         * to find the leaving view item to transition between.\n         */\n\n\n        if (!leavingViewItem && this.props.routeInfo.prevRouteLastPathname) {\n          leavingViewItem = this.context.findViewItemByPathname(this.props.routeInfo.prevRouteLastPathname, this.id);\n        }\n        /**\n         * If the entering view is already visible and the leaving view is not, the transition does not need to occur.\n         */\n\n\n        if (isViewVisible(enteringViewItem.ionPageElement) && leavingViewItem !== undefined && !isViewVisible(leavingViewItem.ionPageElement)) {\n          return;\n        }\n        /**\n         * The view should only be transitioned in the following cases:\n         * 1. Performing a replace or pop action, such as a swipe to go back gesture\n         * to animation the leaving view off the screen.\n         *\n         * 2. Navigating between top-level router outlets, such as /page-1 to /page-2;\n         * or navigating within a nested outlet, such as /tabs/tab-1 to /tabs/tab-2.\n         *\n         * 3. The entering view is an ion-router-outlet containing a page\n         * matching the current route and that hasn't already transitioned in.\n         *\n         * This should only happen when navigating directly to a nested router outlet\n         * route or on an initial page load (i.e. refreshing). In cases when loading\n         * /tabs/tab-1, we need to transition the /tabs page element into the view.\n         */\n\n\n        this.transitionPage(routeInfo, enteringViewItem, leavingViewItem);\n      } else if (leavingViewItem && !enteringRoute && !enteringViewItem) {\n        // If we have a leavingView but no entering view/route, we are probably leaving to\n        // another outlet, so hide this leavingView. We do it in a timeout to give time for a\n        // transition to finish.\n        // setTimeout(() => {\n        if (leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        } // }, 250);\n\n      }\n\n      this.forceUpdate();\n    }\n  }\n\n  registerIonPage(page, routeInfo) {\n    const foundView = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n\n    if (foundView) {\n      const oldPageElement = foundView.ionPageElement;\n      foundView.ionPageElement = page;\n      foundView.ionRoute = true;\n      /**\n       * React 18 will unmount and remount IonPage\n       * elements in development mode when using createRoot.\n       * This can cause duplicate page transitions to occur.\n       */\n\n      if (oldPageElement === page) {\n        return;\n      }\n    }\n\n    this.handlePageTransition(routeInfo);\n  }\n\n  async setupRouterOutlet(routerOutlet) {\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n\n      if (!swipeEnabled) {\n        return false;\n      }\n\n      const {\n        routeInfo\n      } = this.props;\n      const propsToUse = this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute ? this.prevProps.routeInfo : {\n        pathname: routeInfo.pushedByRoute || ''\n      };\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n      return !!enteringViewItem &&\n      /**\n       * The root url '/' is treated as\n       * the first view item (but is never mounted),\n       * so we do not want to swipe back to the\n       * root url.\n       */\n      enteringViewItem.mount &&\n      /**\n       * When on the first page (whatever view\n       * you land on after the root url) it\n       * is possible for findViewItemByRouteInfo to\n       * return the exact same view you are currently on.\n       * Make sure that we are not swiping back to the same\n       * instances of a view.\n       */\n      enteringViewItem.routeData.match.path !== routeInfo.pathname;\n    };\n\n    const onStart = async () => {\n      const {\n        routeInfo\n      } = this.props;\n      const propsToUse = this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute ? this.prevProps.routeInfo : {\n        pathname: routeInfo.pushedByRoute || ''\n      };\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n      const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n      /**\n       * When the gesture starts, kick off\n       * a transition that is controlled\n       * via a swipe gesture.\n       */\n\n      if (enteringViewItem && leavingViewItem) {\n        await this.transitionPage(routeInfo, enteringViewItem, leavingViewItem, 'back', true);\n      }\n\n      return Promise.resolve();\n    };\n\n    const onEnd = shouldContinue => {\n      if (shouldContinue) {\n        this.skipTransition = true;\n        this.context.goBack();\n      } else {\n        /**\n         * In the event that the swipe\n         * gesture was aborted, we should\n         * re-hide the page that was going to enter.\n         */\n        const {\n          routeInfo\n        } = this.props;\n        const propsToUse = this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute ? this.prevProps.routeInfo : {\n          pathname: routeInfo.pushedByRoute || ''\n        };\n        const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n        const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n        /**\n         * Ionic React has a design defect where it\n         * a) Unmounts the leaving view item when using parameterized routes\n         * b) Considers the current view to be the entering view when using\n         * parameterized routes\n         *\n         * As a result, we should not hide the view item here\n         * as it will cause the current view to be hidden.\n         */\n\n        if (enteringViewItem !== leavingViewItem && (enteringViewItem === null || enteringViewItem === void 0 ? void 0 : enteringViewItem.ionPageElement) !== undefined) {\n          const {\n            ionPageElement\n          } = enteringViewItem;\n          ionPageElement.setAttribute('aria-hidden', 'true');\n          ionPageElement.classList.add('ion-page-hidden');\n        }\n      }\n    };\n\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd\n    };\n  }\n\n  async transitionPage(routeInfo, enteringViewItem, leavingViewItem, direction) {\n    let progressAnimation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    const runCommit = async (enteringEl, leavingEl) => {\n      const skipTransition = this.skipTransition;\n      /**\n       * If the transition was handled\n       * via the swipe to go back gesture,\n       * then we do not want to perform\n       * another transition.\n       *\n       * We skip adding ion-page or ion-page-invisible\n       * because the entering view already exists in the DOM.\n       * If we added the classes, there would be a flicker where\n       * the view would be briefly hidden.\n       */\n\n      if (skipTransition) {\n        /**\n         * We need to reset skipTransition before\n         * we call routerOutlet.commit otherwise\n         * the transition triggered by the swipe\n         * to go back gesture would reset it. In\n         * that case you would see a duplicate\n         * transition triggered by handlePageTransition\n         * in componentDidUpdate.\n         */\n        this.skipTransition = false;\n      } else {\n        enteringEl.classList.add('ion-page');\n        enteringEl.classList.add('ion-page-invisible');\n      }\n\n      await routerOutlet.commit(enteringEl, leavingEl, {\n        deepWait: true,\n        duration: skipTransition || directionToUse === undefined ? 0 : undefined,\n        direction: directionToUse,\n        showGoBack: !!routeInfo.pushedByRoute,\n        progressAnimation,\n        animationBuilder: routeInfo.routeAnimation\n      });\n    };\n\n    const routerOutlet = this.routerOutletElement;\n    const routeInfoFallbackDirection = routeInfo.routeDirection === 'none' || routeInfo.routeDirection === 'root' ? undefined : routeInfo.routeDirection;\n    const directionToUse = direction !== null && direction !== void 0 ? direction : routeInfoFallbackDirection;\n\n    if (enteringViewItem && enteringViewItem.ionPageElement && this.routerOutletElement) {\n      if (leavingViewItem && leavingViewItem.ionPageElement && enteringViewItem === leavingViewItem) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n        const match = matchComponent(leavingViewItem.reactElement, routeInfo.pathname, true);\n\n        if (match) {\n          const newLeavingElement = clonePageElement(leavingViewItem.ionPageElement.outerHTML);\n\n          if (newLeavingElement) {\n            this.routerOutletElement.appendChild(newLeavingElement);\n            await runCommit(enteringViewItem.ionPageElement, newLeavingElement);\n            this.routerOutletElement.removeChild(newLeavingElement);\n          }\n        } else {\n          await runCommit(enteringViewItem.ionPageElement, undefined);\n        }\n      } else {\n        await runCommit(enteringViewItem.ionPageElement, leavingViewItem === null || leavingViewItem === void 0 ? void 0 : leavingViewItem.ionPageElement);\n\n        if (leavingViewItem && leavingViewItem.ionPageElement && !progressAnimation) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    const ionRouterOutlet = React.Children.only(children);\n    this.ionRouterOutlet = ionRouterOutlet;\n    const components = this.context.getChildrenToRender(this.id, this.ionRouterOutlet, this.props.routeInfo, () => {\n      this.forceUpdate();\n    });\n    return React.createElement(StackContext.Provider, {\n      value: this.stackContextValue\n    }, React.cloneElement(ionRouterOutlet, {\n      ref: node => {\n        if (ionRouterOutlet.props.setRef) {\n          ionRouterOutlet.props.setRef(node);\n        }\n\n        if (ionRouterOutlet.props.forwardedRef) {\n          ionRouterOutlet.props.forwardedRef.current = node;\n        }\n\n        this.routerOutletElement = node;\n        const {\n          ref\n        } = ionRouterOutlet;\n\n        if (typeof ref === 'function') {\n          ref(node);\n        }\n      }\n    }, components));\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n\n}\n\nfunction matchRoute(node, routeInfo) {\n  let matchedNode;\n  React.Children.forEach(node, child => {\n    const matchProps = {\n      exact: child.props.exact,\n      path: child.props.path || child.props.from,\n      component: child.props.component\n    };\n    const match = matchPath$1(routeInfo.pathname, matchProps);\n\n    if (match) {\n      matchedNode = child;\n    }\n  });\n\n  if (matchedNode) {\n    return matchedNode;\n  } // If we haven't found a node\n  // try to find one that doesn't have a path or from prop, that will be our not found route\n\n\n  React.Children.forEach(node, child => {\n    if (!(child.props.path || child.props.from)) {\n      matchedNode = child;\n    }\n  });\n  return matchedNode;\n}\n\nfunction matchComponent(node, pathname, forceExact) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component\n  };\n  const match = matchPath$1(pathname, matchProps);\n  return match;\n}\n\nclass IonRouterInner extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.exitViewFromOtherOutletHandlers = [];\n    this.locationHistory = new LocationHistory();\n    this.viewStack = new ReactRouterViewStack();\n    this.routeMangerContextState = {\n      canGoBack: () => this.locationHistory.canGoBack(),\n      clearOutlet: this.viewStack.clear,\n      findViewItemByPathname: this.viewStack.findViewItemByPathname,\n      getChildrenToRender: this.viewStack.getChildrenToRender,\n      goBack: () => this.handleNavigateBack(),\n      createViewItem: this.viewStack.createViewItem,\n      findViewItemByRouteInfo: this.viewStack.findViewItemByRouteInfo,\n      findLeavingViewItemByRouteInfo: this.viewStack.findLeavingViewItemByRouteInfo,\n      addViewItem: this.viewStack.add,\n      unMountViewItem: this.viewStack.remove\n    };\n    const routeInfo = {\n      id: generateId('routeInfo'),\n      pathname: this.props.location.pathname,\n      search: this.props.location.search\n    };\n    this.locationHistory.add(routeInfo);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n    this.handleResetTab = this.handleResetTab.bind(this);\n    this.handleNativeBack = this.handleNativeBack.bind(this);\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.handleNavigateBack = this.handleNavigateBack.bind(this);\n    this.props.registerHistoryListener(this.handleHistoryChange.bind(this));\n    this.handleSetCurrentTab = this.handleSetCurrentTab.bind(this);\n    this.state = {\n      routeInfo\n    };\n  }\n\n  handleChangeTab(tab, path, routeOptions) {\n    if (!path) {\n      return;\n    }\n\n    const routeInfo = this.locationHistory.getCurrentRouteInfoForTab(tab);\n    const [pathname, search] = path.split('?');\n\n    if (routeInfo) {\n      this.incomingRouteParams = Object.assign(Object.assign({}, routeInfo), {\n        routeAction: 'push',\n        routeDirection: 'none'\n      });\n\n      if (routeInfo.pathname === pathname) {\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(routeInfo.pathname + (routeInfo.search || ''));\n      } else {\n        this.incomingRouteParams.pathname = pathname;\n        this.incomingRouteParams.search = search ? '?' + search : undefined;\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(pathname + (search ? '?' + search : ''));\n      }\n    } else {\n      this.handleNavigate(pathname, 'push', 'none', undefined, routeOptions, tab);\n    }\n  }\n\n  handleHistoryChange(location, action) {\n    var _a, _b, _c;\n\n    let leavingLocationInfo;\n\n    if (this.incomingRouteParams) {\n      if (this.incomingRouteParams.routeAction === 'replace') {\n        leavingLocationInfo = this.locationHistory.previous();\n      } else {\n        leavingLocationInfo = this.locationHistory.current();\n      }\n    } else {\n      leavingLocationInfo = this.locationHistory.current();\n    }\n\n    const leavingUrl = leavingLocationInfo.pathname + leavingLocationInfo.search;\n\n    if (leavingUrl !== location.pathname) {\n      if (!this.incomingRouteParams) {\n        if (action === 'REPLACE') {\n          this.incomingRouteParams = {\n            routeAction: 'replace',\n            routeDirection: 'none',\n            tab: this.currentTab\n          };\n        }\n\n        if (action === 'POP') {\n          const currentRoute = this.locationHistory.current();\n\n          if (currentRoute && currentRoute.pushedByRoute) {\n            const prevInfo = this.locationHistory.findLastLocation(currentRoute);\n            this.incomingRouteParams = Object.assign(Object.assign({}, prevInfo), {\n              routeAction: 'pop',\n              routeDirection: 'back'\n            });\n          } else {\n            this.incomingRouteParams = {\n              routeAction: 'pop',\n              routeDirection: 'none',\n              tab: this.currentTab\n            };\n          }\n        }\n\n        if (!this.incomingRouteParams) {\n          this.incomingRouteParams = {\n            routeAction: 'push',\n            routeDirection: ((_a = location.state) === null || _a === void 0 ? void 0 : _a.direction) || 'forward',\n            routeOptions: (_b = location.state) === null || _b === void 0 ? void 0 : _b.routerOptions,\n            tab: this.currentTab\n          };\n        }\n      }\n\n      let routeInfo;\n\n      if ((_c = this.incomingRouteParams) === null || _c === void 0 ? void 0 : _c.id) {\n        routeInfo = Object.assign(Object.assign({}, this.incomingRouteParams), {\n          lastPathname: leavingLocationInfo.pathname\n        });\n        this.locationHistory.add(routeInfo);\n      } else {\n        const isPushed = this.incomingRouteParams.routeAction === 'push' && this.incomingRouteParams.routeDirection === 'forward';\n        routeInfo = Object.assign(Object.assign({\n          id: generateId('routeInfo')\n        }, this.incomingRouteParams), {\n          lastPathname: leavingLocationInfo.pathname,\n          pathname: location.pathname,\n          search: location.search,\n          params: this.props.match.params,\n          prevRouteLastPathname: leavingLocationInfo.lastPathname\n        });\n\n        if (isPushed) {\n          routeInfo.tab = leavingLocationInfo.tab;\n          routeInfo.pushedByRoute = leavingLocationInfo.pathname;\n        } else if (routeInfo.routeAction === 'pop') {\n          const r = this.locationHistory.findLastLocation(routeInfo);\n          routeInfo.pushedByRoute = r === null || r === void 0 ? void 0 : r.pushedByRoute;\n        } else if (routeInfo.routeAction === 'push' && routeInfo.tab !== leavingLocationInfo.tab) {\n          // If we are switching tabs grab the last route info for the tab and use its pushedByRoute\n          const lastRoute = this.locationHistory.getCurrentRouteInfoForTab(routeInfo.tab);\n          routeInfo.pushedByRoute = lastRoute === null || lastRoute === void 0 ? void 0 : lastRoute.pushedByRoute;\n        } else if (routeInfo.routeAction === 'replace') {\n          // Make sure to set the lastPathname, etc.. to the current route so the page transitions out\n          const currentRouteInfo = this.locationHistory.current();\n          /**\n           * If going from /home to /child, then replacing from\n           * /child to /home, we don't want the route info to\n           * say that /home was pushed by /home which is not correct.\n           */\n\n          const currentPushedBy = currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.pushedByRoute;\n          const pushedByRoute = currentPushedBy !== undefined && currentPushedBy !== routeInfo.pathname ? currentPushedBy : routeInfo.pushedByRoute;\n          routeInfo.lastPathname = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.pathname) || routeInfo.lastPathname;\n          routeInfo.prevRouteLastPathname = currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.lastPathname;\n          routeInfo.pushedByRoute = pushedByRoute;\n          routeInfo.routeDirection = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.routeDirection) || routeInfo.routeDirection;\n          routeInfo.routeAnimation = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.routeAnimation) || routeInfo.routeAnimation;\n        }\n\n        this.locationHistory.add(routeInfo);\n      }\n\n      this.setState({\n        routeInfo\n      });\n    }\n\n    this.incomingRouteParams = undefined;\n  }\n  /**\n   * history@4.x uses goBack(), history@5.x uses back()\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just\n   * assume back() is available.\n   */\n\n\n  handleNativeBack() {\n    const history = this.props.history;\n    const goBack = history.goBack || history.back;\n    goBack();\n  }\n\n  handleNavigate(path, routeAction, routeDirection, routeAnimation, routeOptions, tab) {\n    this.incomingRouteParams = Object.assign(this.incomingRouteParams || {}, {\n      routeAction,\n      routeDirection,\n      routeOptions,\n      routeAnimation,\n      tab\n    });\n\n    if (routeAction === 'push') {\n      this.props.history.push(path);\n    } else {\n      this.props.history.replace(path);\n    }\n  }\n\n  handleNavigateBack() {\n    let defaultHref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n    let routeAnimation = arguments.length > 1 ? arguments[1] : undefined;\n    const config = getConfig();\n    defaultHref = defaultHref ? defaultHref : config && config.get('backButtonDefaultHref');\n    const routeInfo = this.locationHistory.current();\n\n    if (routeInfo && routeInfo.pushedByRoute) {\n      const prevInfo = this.locationHistory.findLastLocation(routeInfo);\n\n      if (prevInfo) {\n        this.incomingRouteParams = Object.assign(Object.assign({}, prevInfo), {\n          routeAction: 'pop',\n          routeDirection: 'back',\n          routeAnimation: routeAnimation || routeInfo.routeAnimation\n        });\n\n        if (routeInfo.lastPathname === routeInfo.pushedByRoute ||\n        /**\n         * We need to exclude tab switches/tab\n         * context changes here because tabbed\n         * navigation is not linear, but router.back()\n         * will go back in a linear fashion.\n         */\n        prevInfo.pathname === routeInfo.pushedByRoute && routeInfo.tab === '' && prevInfo.tab === '') {\n          /**\n           * history@4.x uses goBack(), history@5.x uses back()\n           * TODO: If support for React Router <=5 is dropped\n           * this logic is no longer needed. We can just\n           * assume back() is available.\n           */\n          const history = this.props.history;\n          const goBack = history.goBack || history.back;\n          goBack();\n        } else {\n          this.handleNavigate(prevInfo.pathname + (prevInfo.search || ''), 'pop', 'back');\n        }\n      } else {\n        this.handleNavigate(defaultHref, 'pop', 'back');\n      }\n    } else {\n      this.handleNavigate(defaultHref, 'pop', 'back');\n    }\n  }\n\n  handleResetTab(tab, originalHref, originalRouteOptions) {\n    const routeInfo = this.locationHistory.getFirstRouteInfoForTab(tab);\n\n    if (routeInfo) {\n      const newRouteInfo = Object.assign({}, routeInfo);\n      newRouteInfo.pathname = originalHref;\n      newRouteInfo.routeOptions = originalRouteOptions;\n      this.incomingRouteParams = Object.assign(Object.assign({}, newRouteInfo), {\n        routeAction: 'pop',\n        routeDirection: 'back'\n      });\n      this.props.history.push(newRouteInfo.pathname + (newRouteInfo.search || ''));\n    }\n  }\n\n  handleSetCurrentTab(tab) {\n    this.currentTab = tab;\n    const ri = Object.assign({}, this.locationHistory.current());\n\n    if (ri.tab !== tab) {\n      ri.tab = tab;\n      this.locationHistory.update(ri);\n    }\n  }\n\n  render() {\n    return React.createElement(RouteManagerContext.Provider, {\n      value: this.routeMangerContextState\n    }, React.createElement(NavManager, {\n      ionRoute: IonRouteInner,\n      ionRedirect: {},\n      stackManager: StackManager,\n      routeInfo: this.state.routeInfo,\n      onNativeBack: this.handleNativeBack,\n      onNavigateBack: this.handleNavigateBack,\n      onNavigate: this.handleNavigate,\n      onSetCurrentTab: this.handleSetCurrentTab,\n      onChangeTab: this.handleChangeTab,\n      onResetTab: this.handleResetTab,\n      locationHistory: this.locationHistory\n    }, this.props.children));\n  }\n\n}\n\nconst IonRouter = withRouter(IonRouterInner);\nIonRouter.displayName = 'IonRouter';\n\nclass IonReactRouter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const {\n      history\n    } = props,\n          rest = __rest(props, [\"history\"]);\n\n    this.history = history || createBrowserHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n\n\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children\n    } = _a,\n          props = __rest(_a, [\"children\"]);\n\n    return React.createElement(Router, Object.assign({\n      history: this.history\n    }, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n\n}\n\nclass IonReactMemoryRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.history = props.history;\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n\n\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children\n    } = _a,\n          props = __rest(_a, [\"children\"]);\n\n    return React.createElement(Router$1, Object.assign({}, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n\n}\n\nclass IonReactHashRouter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const {\n      history\n    } = props,\n          rest = __rest(props, [\"history\"]);\n\n    this.history = history || createHashHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n\n\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children\n    } = _a,\n          props = __rest(_a, [\"children\"]);\n\n    return React.createElement(Router, Object.assign({\n      history: this.history\n    }, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n\n}\n\nexport { IonReactHashRouter, IonReactMemoryRouter, IonReactRouter };","map":{"version":3,"mappings":"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","names":["IonRouteInner","React","PureComponent","render","Route","path","props","exact","computedMatch","ReactRouterViewStack","ViewStacks","constructor","createViewItem","bind","findViewItemByRouteInfo","findLeavingViewItemByRouteInfo","getChildrenToRender","findViewItemByPathname","outletId","reactElement","routeInfo","page","viewItem","id","generateId","ionPageElement","mount","ionRoute","matchProps","from","component","match","matchPath","pathname","type","IonRoute","disableIonPageManagement","routeData","childProps","ionRouterOutlet","viewItems","getViewItemsForOutlet","Children","forEach","children","child","find","v","matchComponent","map","clonedChild","ViewLifeCycleManager","key","removeView","remove","cloneElement","undefined","updateMatch","findViewItemByPath","shouldUpdateMatch","mustBeIonRoute","lastPathname","forceExact","viewStack","some","matchView","matchDefaultRoute","getAllViewItems","myMatch","url","isExact","params","node","clonePageElement","leavingViewHtml","html","outerHTML","document","newEl","createElement","innerHTML","style","zIndex","ionBackButton","getElementsByTagName","firstChild","isViewVisible","el","classList","contains","StackManager","registerIonPage","isInOutlet","transitionPage","handlePageTransition","prevProps","skipTransition","componentDidMount","clearOutletTimeout","clearTimeout","routerOutletElement","setupRouterOutlet","componentDidUpdate","prevPathname","pendingPageTransition","componentWillUnmount","context","clearOutlet","commit","enteringViewItem","leavingViewItem","prevRouteLastPathname","routeAction","routeDirection","routeOptions","_a","unmount","enteringRoute","matchRoute","_b","addViewItem","add","setAttribute","forceUpdate","foundView","oldPageElement","routerOutlet","canStart","config","getConfig","swipeEnabled","get","mode","propsToUse","pushedByRoute","onStart","Promise","resolve","onEnd","shouldContinue","goBack","swipeHandler","direction","progressAnimation","runCommit","enteringEl","leavingEl","deepWait","duration","directionToUse","showGoBack","animationBuilder","routeAnimation","routeInfoFallbackDirection","newLeavingElement","appendChild","removeChild","only","components","StackContext","Provider","value","stackContextValue","ref","setRef","forwardedRef","current","contextType","RouteManagerContext","matchedNode","IonRouterInner","LocationHistory","canGoBack","locationHistory","clear","handleNavigateBack","unMountViewItem","location","search","handleChangeTab","handleResetTab","handleNativeBack","handleNavigate","registerHistoryListener","handleHistoryChange","handleSetCurrentTab","state","tab","getCurrentRouteInfoForTab","split","incomingRouteParams","Object","history","push","action","leavingLocationInfo","previous","leavingUrl","currentTab","currentRoute","prevInfo","findLastLocation","routerOptions","_c","isPushed","r","lastRoute","currentRouteInfo","currentPushedBy","setState","back","assign","replace","defaultHref","originalHref","originalRouteOptions","getFirstRouteInfoForTab","newRouteInfo","ri","update","routeMangerContextState","NavManager","ionRedirect","stackManager","onNativeBack","onNavigateBack","onNavigate","onSetCurrentTab","onChangeTab","onResetTab","IonRouter","withRouter","displayName","IonReactRouter","Component","rest","createHistory","listen","locationValue","actionValue","historyListenHandler","cb","Router","IonReactMemoryRouter","IonReactHashRouter"],"sources":["/mnt/disk2/ionicapps/elearn/node_modules/@ionic/react-router/src/ReactRouter/IonRouteInner.tsx","/mnt/disk2/ionicapps/elearn/node_modules/@ionic/react-router/src/ReactRouter/ReactRouterViewStack.tsx","/mnt/disk2/ionicapps/elearn/node_modules/@ionic/react-router/src/ReactRouter/clonePageElement.ts","/mnt/disk2/ionicapps/elearn/node_modules/@ionic/react-router/src/ReactRouter/StackManager.tsx","/mnt/disk2/ionicapps/elearn/node_modules/@ionic/react-router/src/ReactRouter/IonRouter.tsx","/mnt/disk2/ionicapps/elearn/node_modules/@ionic/react-router/src/ReactRouter/IonReactRouter.tsx","/mnt/disk2/ionicapps/elearn/node_modules/@ionic/react-router/src/ReactRouter/IonReactMemoryRouter.tsx","/mnt/disk2/ionicapps/elearn/node_modules/@ionic/react-router/src/ReactRouter/IonReactHashRouter.tsx"],"sourcesContent":["import { IonRouteProps } from '@ionic/react';\nimport React from 'react';\nimport { Route } from 'react-router';\n\nexport class IonRouteInner extends React.PureComponent<IonRouteProps> {\n  render() {\n    return (\n      <Route\n        path={this.props.path}\n        exact={this.props.exact}\n        render={this.props.render}\n        /**\n         * `computedMatch` is a private API in react-router v5 that\n         * has been removed in v6.\n         *\n         * This needs to be removed when we support v6.\n         *\n         * TODO: FW-647\n         */\n        computedMatch={(this.props as any).computedMatch}\n      />\n    );\n  }\n}\n","import {\n  IonRoute,\n  RouteInfo,\n  ViewItem,\n  ViewLifeCycleManager,\n  ViewStacks,\n  generateId,\n} from '@ionic/react';\nimport React from 'react';\nimport { matchPath } from 'react-router';\n\nexport class ReactRouterViewStack extends ViewStacks {\n  constructor() {\n    super();\n    this.createViewItem = this.createViewItem.bind(this);\n    this.findViewItemByRouteInfo = this.findViewItemByRouteInfo.bind(this);\n    this.findLeavingViewItemByRouteInfo = this.findLeavingViewItemByRouteInfo.bind(this);\n    this.getChildrenToRender = this.getChildrenToRender.bind(this);\n    this.findViewItemByPathname = this.findViewItemByPathname.bind(this);\n  }\n\n  createViewItem(\n    outletId: string,\n    reactElement: React.ReactElement,\n    routeInfo: RouteInfo,\n    page?: HTMLElement\n  ) {\n    const viewItem: ViewItem = {\n      id: generateId('viewItem'),\n      outletId,\n      ionPageElement: page,\n      reactElement,\n      mount: true,\n      ionRoute: false,\n    };\n\n    const matchProps = {\n      exact: reactElement.props.exact,\n      path: reactElement.props.path || reactElement.props.from,\n      component: reactElement.props.component,\n    };\n\n    const match = matchPath(routeInfo.pathname, matchProps);\n\n    if (reactElement.type === IonRoute) {\n      viewItem.ionRoute = true;\n      viewItem.disableIonPageManagement = reactElement.props.disableIonPageManagement;\n    }\n\n    viewItem.routeData = {\n      match,\n      childProps: reactElement.props,\n    };\n\n    return viewItem;\n  }\n\n  getChildrenToRender(outletId: string, ionRouterOutlet: React.ReactElement, routeInfo: RouteInfo) {\n    const viewItems = this.getViewItemsForOutlet(outletId);\n\n    // Sync latest routes with viewItems\n    React.Children.forEach(ionRouterOutlet.props.children, (child: React.ReactElement) => {\n      const viewItem = viewItems.find((v) => {\n        return matchComponent(child, v.routeData.childProps.path || v.routeData.childProps.from);\n      });\n      if (viewItem) {\n        viewItem.reactElement = child;\n      }\n    });\n\n    const children = viewItems.map((viewItem) => {\n      let clonedChild;\n      if (viewItem.ionRoute && !viewItem.disableIonPageManagement) {\n        clonedChild = (\n          <ViewLifeCycleManager\n            key={`view-${viewItem.id}`}\n            mount={viewItem.mount}\n            removeView={() => this.remove(viewItem)}\n          >\n            {React.cloneElement(viewItem.reactElement, {\n              computedMatch: viewItem.routeData.match,\n            })}\n          </ViewLifeCycleManager>\n        );\n      } else {\n        const match = matchComponent(viewItem.reactElement, routeInfo.pathname);\n        clonedChild = (\n          <ViewLifeCycleManager\n            key={`view-${viewItem.id}`}\n            mount={viewItem.mount}\n            removeView={() => this.remove(viewItem)}\n          >\n            {React.cloneElement(viewItem.reactElement, {\n              computedMatch: viewItem.routeData.match,\n            })}\n          </ViewLifeCycleManager>\n        );\n\n        if (!match && viewItem.routeData.match) {\n          viewItem.routeData.match = undefined;\n          viewItem.mount = false;\n        }\n      }\n\n      return clonedChild;\n    });\n    return children;\n  }\n\n  findViewItemByRouteInfo(routeInfo: RouteInfo, outletId?: string, updateMatch?: boolean) {\n    const { viewItem, match } = this.findViewItemByPath(routeInfo.pathname, outletId);\n    const shouldUpdateMatch = updateMatch === undefined || updateMatch === true;\n    if (shouldUpdateMatch && viewItem && match) {\n      viewItem.routeData.match = match;\n    }\n    return viewItem;\n  }\n\n  findLeavingViewItemByRouteInfo(routeInfo: RouteInfo, outletId?: string, mustBeIonRoute = true) {\n    const { viewItem } = this.findViewItemByPath(\n      routeInfo.lastPathname!,\n      outletId,\n      false,\n      mustBeIonRoute\n    );\n    return viewItem;\n  }\n\n  findViewItemByPathname(pathname: string, outletId?: string) {\n    const { viewItem } = this.findViewItemByPath(pathname, outletId);\n    return viewItem;\n  }\n\n  private findViewItemByPath(\n    pathname: string,\n    outletId?: string,\n    forceExact?: boolean,\n    mustBeIonRoute?: boolean\n  ) {\n    let viewItem: ViewItem | undefined;\n    let match: ReturnType<typeof matchPath> | undefined;\n    let viewStack: ViewItem[];\n\n    if (outletId) {\n      viewStack = this.getViewItemsForOutlet(outletId);\n      viewStack.some(matchView);\n      if (!viewItem) {\n        viewStack.some(matchDefaultRoute);\n      }\n    } else {\n      const viewItems = this.getAllViewItems();\n      viewItems.some(matchView);\n      if (!viewItem) {\n        viewItems.some(matchDefaultRoute);\n      }\n    }\n\n    return { viewItem, match };\n\n    function matchView(v: ViewItem) {\n      if (mustBeIonRoute && !v.ionRoute) {\n        return false;\n      }\n      const matchProps = {\n        exact: forceExact ? true : v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component,\n      };\n      const myMatch = matchPath(pathname, matchProps);\n      if (myMatch) {\n        viewItem = v;\n        match = myMatch;\n        return true;\n      }\n      return false;\n    }\n\n    function matchDefaultRoute(v: ViewItem) {\n      // try to find a route that doesn't have a path or from prop, that will be our default route\n      if (!v.routeData.childProps.path && !v.routeData.childProps.from) {\n        match = {\n          path: pathname,\n          url: pathname,\n          isExact: true,\n          params: {},\n        };\n        viewItem = v;\n        return true;\n      }\n      return false;\n    }\n  }\n}\n\nfunction matchComponent(node: React.ReactElement, pathname: string, forceExact?: boolean) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component,\n  };\n  const match = matchPath(pathname, matchProps);\n\n  return match;\n}\n","export function clonePageElement(leavingViewHtml: string | HTMLElement) {\n  let html: string;\n  if (typeof leavingViewHtml === 'string') {\n    html = leavingViewHtml;\n  } else {\n    html = leavingViewHtml.outerHTML;\n  }\n  if (document) {\n    const newEl = document.createElement('div');\n    newEl.innerHTML = html;\n    newEl.style.zIndex = '';\n    // Remove an existing back button so the new element doesn't get two of them\n    const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n    if (ionBackButton[0]) {\n      ionBackButton[0].remove();\n    }\n    return newEl.firstChild as HTMLElement;\n  }\n  return undefined;\n}\n","import {\n  RouteInfo,\n  RouteManagerContext,\n  StackContext,\n  StackContextState,\n  ViewItem,\n  generateId,\n  getConfig,\n} from '@ionic/react';\nimport React from 'react';\nimport { matchPath } from 'react-router-dom';\n\nimport { clonePageElement } from './clonePageElement';\n\ninterface StackManagerProps {\n  routeInfo: RouteInfo;\n}\n\ninterface StackManagerState {}\n\nconst isViewVisible = (el: HTMLElement) =>\n  !el.classList.contains('ion-page-invisible') && !el.classList.contains('ion-page-hidden');\n\nexport class StackManager extends React.PureComponent<StackManagerProps, StackManagerState> {\n  id: string;\n  context!: React.ContextType<typeof RouteManagerContext>;\n  ionRouterOutlet?: React.ReactElement;\n  routerOutletElement: HTMLIonRouterOutletElement | undefined;\n  prevProps?: StackManagerProps;\n  skipTransition: boolean;\n\n  stackContextValue: StackContextState = {\n    registerIonPage: this.registerIonPage.bind(this),\n    isInOutlet: () => true,\n  };\n\n  private clearOutletTimeout: any;\n  private pendingPageTransition = false;\n\n  constructor(props: StackManagerProps) {\n    super(props);\n    this.registerIonPage = this.registerIonPage.bind(this);\n    this.transitionPage = this.transitionPage.bind(this);\n    this.handlePageTransition = this.handlePageTransition.bind(this);\n    this.id = generateId('routerOutlet');\n    this.prevProps = undefined;\n    this.skipTransition = false;\n  }\n\n  componentDidMount() {\n    if (this.clearOutletTimeout) {\n      /**\n       * The clearOutlet integration with React Router is a bit hacky.\n       * It uses a timeout to clear the outlet after a transition.\n       * In React v18, components are mounted and unmounted in development mode\n       * to check for side effects.\n       *\n       * This clearTimeout prevents the outlet from being cleared when the component is re-mounted,\n       * which should only happen in development mode and as a result of a hot reload.\n       */\n      clearTimeout(this.clearOutletTimeout);\n    }\n    if (this.routerOutletElement) {\n      this.setupRouterOutlet(this.routerOutletElement);\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n\n  componentDidUpdate(prevProps: StackManagerProps) {\n    const { pathname } = this.props.routeInfo;\n    const { pathname: prevPathname } = prevProps.routeInfo;\n\n    if (pathname !== prevPathname) {\n      this.prevProps = prevProps;\n      this.handlePageTransition(this.props.routeInfo);\n    } else if (this.pendingPageTransition) {\n      this.handlePageTransition(this.props.routeInfo);\n      this.pendingPageTransition = false;\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearOutletTimeout = this.context.clearOutlet(this.id);\n  }\n\n  async handlePageTransition(routeInfo: RouteInfo) {\n    if (!this.routerOutletElement || !this.routerOutletElement.commit) {\n      /**\n       * The route outlet has not mounted yet. We need to wait for it to render\n       * before we can transition the page.\n       *\n       * Set a flag to indicate that we should transition the page after\n       * the component has updated.\n       */\n      this.pendingPageTransition = true;\n    } else {\n      let enteringViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n      let leavingViewItem = this.context.findLeavingViewItemByRouteInfo(routeInfo, this.id);\n\n      if (!leavingViewItem && routeInfo.prevRouteLastPathname) {\n        leavingViewItem = this.context.findViewItemByPathname(\n          routeInfo.prevRouteLastPathname,\n          this.id\n        );\n      }\n\n      // Check if leavingViewItem should be unmounted\n      if (leavingViewItem) {\n        if (routeInfo.routeAction === 'replace') {\n          leavingViewItem.mount = false;\n        } else if (!(routeInfo.routeAction === 'push' && routeInfo.routeDirection === 'forward')) {\n          if (routeInfo.routeDirection !== 'none' && enteringViewItem !== leavingViewItem) {\n            leavingViewItem.mount = false;\n          }\n        } else if (routeInfo.routeOptions?.unmount) {\n          leavingViewItem.mount = false;\n        }\n      }\n\n      const enteringRoute = matchRoute(\n        this.ionRouterOutlet?.props.children,\n        routeInfo\n      ) as React.ReactElement;\n\n      if (enteringViewItem) {\n        enteringViewItem.reactElement = enteringRoute;\n      } else if (enteringRoute) {\n        enteringViewItem = this.context.createViewItem(this.id, enteringRoute, routeInfo);\n        this.context.addViewItem(enteringViewItem);\n      }\n\n      if (enteringViewItem && enteringViewItem.ionPageElement) {\n        /**\n         * If the entering view item is the same as the leaving view item,\n         * then we don't need to transition.\n         */\n        if (enteringViewItem === leavingViewItem) {\n          /**\n           * If the entering view item is the same as the leaving view item,\n           * we are either transitioning using parameterized routes to the same view\n           * or a parent router outlet is re-rendering as a result of React props changing.\n           *\n           * If the route data does not match the current path, the parent router outlet\n           * is attempting to transition and we cancel the operation.\n           */\n          if (enteringViewItem.routeData.match.url !== routeInfo.pathname) {\n            return;\n          }\n        }\n\n        /**\n         * If there isn't a leaving view item, but the route info indicates\n         * that the user has routed from a previous path, then we need\n         * to find the leaving view item to transition between.\n         */\n        if (!leavingViewItem && this.props.routeInfo.prevRouteLastPathname) {\n          leavingViewItem = this.context.findViewItemByPathname(\n            this.props.routeInfo.prevRouteLastPathname,\n            this.id\n          );\n        }\n\n        /**\n         * If the entering view is already visible and the leaving view is not, the transition does not need to occur.\n         */\n        if (\n          isViewVisible(enteringViewItem.ionPageElement) &&\n          leavingViewItem !== undefined &&\n          !isViewVisible(leavingViewItem.ionPageElement!)\n        ) {\n          return;\n        }\n\n        /**\n         * The view should only be transitioned in the following cases:\n         * 1. Performing a replace or pop action, such as a swipe to go back gesture\n         * to animation the leaving view off the screen.\n         *\n         * 2. Navigating between top-level router outlets, such as /page-1 to /page-2;\n         * or navigating within a nested outlet, such as /tabs/tab-1 to /tabs/tab-2.\n         *\n         * 3. The entering view is an ion-router-outlet containing a page\n         * matching the current route and that hasn't already transitioned in.\n         *\n         * This should only happen when navigating directly to a nested router outlet\n         * route or on an initial page load (i.e. refreshing). In cases when loading\n         * /tabs/tab-1, we need to transition the /tabs page element into the view.\n         */\n        this.transitionPage(routeInfo, enteringViewItem, leavingViewItem);\n      } else if (leavingViewItem && !enteringRoute && !enteringViewItem) {\n        // If we have a leavingView but no entering view/route, we are probably leaving to\n        // another outlet, so hide this leavingView. We do it in a timeout to give time for a\n        // transition to finish.\n        // setTimeout(() => {\n        if (leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n        // }, 250);\n      }\n\n      this.forceUpdate();\n    }\n  }\n\n  registerIonPage(page: HTMLElement, routeInfo: RouteInfo) {\n    const foundView = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n    if (foundView) {\n      const oldPageElement = foundView.ionPageElement;\n      foundView.ionPageElement = page;\n      foundView.ionRoute = true;\n\n      /**\n       * React 18 will unmount and remount IonPage\n       * elements in development mode when using createRoot.\n       * This can cause duplicate page transitions to occur.\n       */\n      if (oldPageElement === page) {\n        return;\n      }\n    }\n    this.handlePageTransition(routeInfo);\n  }\n\n  async setupRouterOutlet(routerOutlet: HTMLIonRouterOutletElement) {\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n      if (!swipeEnabled) {\n        return false;\n      }\n\n      const { routeInfo } = this.props;\n\n      const propsToUse =\n        this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute\n          ? this.prevProps.routeInfo\n          : ({ pathname: routeInfo.pushedByRoute || '' } as any);\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n\n      return (\n        !!enteringViewItem &&\n        /**\n         * The root url '/' is treated as\n         * the first view item (but is never mounted),\n         * so we do not want to swipe back to the\n         * root url.\n         */\n        enteringViewItem.mount &&\n        /**\n         * When on the first page (whatever view\n         * you land on after the root url) it\n         * is possible for findViewItemByRouteInfo to\n         * return the exact same view you are currently on.\n         * Make sure that we are not swiping back to the same\n         * instances of a view.\n         */\n        enteringViewItem.routeData.match.path !== routeInfo.pathname\n      );\n    };\n\n    const onStart = async () => {\n      const { routeInfo } = this.props;\n\n      const propsToUse =\n        this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute\n          ? this.prevProps.routeInfo\n          : ({ pathname: routeInfo.pushedByRoute || '' } as any);\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n      const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n\n      /**\n       * When the gesture starts, kick off\n       * a transition that is controlled\n       * via a swipe gesture.\n       */\n      if (enteringViewItem && leavingViewItem) {\n        await this.transitionPage(routeInfo, enteringViewItem, leavingViewItem, 'back', true);\n      }\n\n      return Promise.resolve();\n    };\n    const onEnd = (shouldContinue: boolean) => {\n      if (shouldContinue) {\n        this.skipTransition = true;\n\n        this.context.goBack();\n      } else {\n        /**\n         * In the event that the swipe\n         * gesture was aborted, we should\n         * re-hide the page that was going to enter.\n         */\n        const { routeInfo } = this.props;\n\n        const propsToUse =\n          this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute\n            ? this.prevProps.routeInfo\n            : ({ pathname: routeInfo.pushedByRoute || '' } as any);\n        const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n        const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n\n        /**\n         * Ionic React has a design defect where it\n         * a) Unmounts the leaving view item when using parameterized routes\n         * b) Considers the current view to be the entering view when using\n         * parameterized routes\n         *\n         * As a result, we should not hide the view item here\n         * as it will cause the current view to be hidden.\n         */\n        if (\n          enteringViewItem !== leavingViewItem &&\n          enteringViewItem?.ionPageElement !== undefined\n        ) {\n          const { ionPageElement } = enteringViewItem;\n          ionPageElement.setAttribute('aria-hidden', 'true');\n          ionPageElement.classList.add('ion-page-hidden');\n        }\n      }\n    };\n\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd,\n    };\n  }\n\n  async transitionPage(\n    routeInfo: RouteInfo,\n    enteringViewItem: ViewItem,\n    leavingViewItem?: ViewItem,\n    direction?: 'forward' | 'back',\n    progressAnimation = false\n  ) {\n    const runCommit = async (enteringEl: HTMLElement, leavingEl?: HTMLElement) => {\n      const skipTransition = this.skipTransition;\n\n      /**\n       * If the transition was handled\n       * via the swipe to go back gesture,\n       * then we do not want to perform\n       * another transition.\n       *\n       * We skip adding ion-page or ion-page-invisible\n       * because the entering view already exists in the DOM.\n       * If we added the classes, there would be a flicker where\n       * the view would be briefly hidden.\n       */\n      if (skipTransition) {\n        /**\n         * We need to reset skipTransition before\n         * we call routerOutlet.commit otherwise\n         * the transition triggered by the swipe\n         * to go back gesture would reset it. In\n         * that case you would see a duplicate\n         * transition triggered by handlePageTransition\n         * in componentDidUpdate.\n         */\n        this.skipTransition = false;\n      } else {\n        enteringEl.classList.add('ion-page');\n        enteringEl.classList.add('ion-page-invisible');\n      }\n\n      await routerOutlet.commit(enteringEl, leavingEl, {\n        deepWait: true,\n        duration: skipTransition || directionToUse === undefined ? 0 : undefined,\n        direction: directionToUse,\n        showGoBack: !!routeInfo.pushedByRoute,\n        progressAnimation,\n        animationBuilder: routeInfo.routeAnimation,\n      });\n    };\n\n    const routerOutlet = this.routerOutletElement!;\n\n    const routeInfoFallbackDirection =\n      routeInfo.routeDirection === 'none' || routeInfo.routeDirection === 'root'\n        ? undefined\n        : routeInfo.routeDirection;\n    const directionToUse = direction ?? routeInfoFallbackDirection;\n\n    if (enteringViewItem && enteringViewItem.ionPageElement && this.routerOutletElement) {\n      if (\n        leavingViewItem &&\n        leavingViewItem.ionPageElement &&\n        enteringViewItem === leavingViewItem\n      ) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n\n        const match = matchComponent(leavingViewItem.reactElement, routeInfo.pathname, true);\n        if (match) {\n          const newLeavingElement = clonePageElement(leavingViewItem.ionPageElement.outerHTML);\n          if (newLeavingElement) {\n            this.routerOutletElement.appendChild(newLeavingElement);\n            await runCommit(enteringViewItem.ionPageElement, newLeavingElement);\n            this.routerOutletElement.removeChild(newLeavingElement);\n          }\n        } else {\n          await runCommit(enteringViewItem.ionPageElement, undefined);\n        }\n      } else {\n        await runCommit(enteringViewItem.ionPageElement, leavingViewItem?.ionPageElement);\n        if (leavingViewItem && leavingViewItem.ionPageElement && !progressAnimation) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const ionRouterOutlet = React.Children.only(children) as React.ReactElement;\n    this.ionRouterOutlet = ionRouterOutlet;\n\n    const components = this.context.getChildrenToRender(\n      this.id,\n      this.ionRouterOutlet,\n      this.props.routeInfo,\n      () => {\n        this.forceUpdate();\n      }\n    );\n\n    return (\n      <StackContext.Provider value={this.stackContextValue}>\n        {React.cloneElement(\n          ionRouterOutlet as any,\n          {\n            ref: (node: HTMLIonRouterOutletElement) => {\n              if (ionRouterOutlet.props.setRef) {\n                ionRouterOutlet.props.setRef(node);\n              }\n              if (ionRouterOutlet.props.forwardedRef) {\n                ionRouterOutlet.props.forwardedRef.current = node;\n              }\n              this.routerOutletElement = node;\n              const { ref } = ionRouterOutlet as any;\n              if (typeof ref === 'function') {\n                ref(node);\n              }\n            },\n          },\n          components\n        )}\n      </StackContext.Provider>\n    );\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\n\nexport default StackManager;\n\nfunction matchRoute(node: React.ReactNode, routeInfo: RouteInfo) {\n  let matchedNode: React.ReactNode;\n  React.Children.forEach(node as React.ReactElement, (child: React.ReactElement) => {\n    const matchProps = {\n      exact: child.props.exact,\n      path: child.props.path || child.props.from,\n      component: child.props.component,\n    };\n    const match = matchPath(routeInfo.pathname, matchProps);\n    if (match) {\n      matchedNode = child;\n    }\n  });\n\n  if (matchedNode) {\n    return matchedNode;\n  }\n  // If we haven't found a node\n  // try to find one that doesn't have a path or from prop, that will be our not found route\n  React.Children.forEach(node as React.ReactElement, (child: React.ReactElement) => {\n    if (!(child.props.path || child.props.from)) {\n      matchedNode = child;\n    }\n  });\n\n  return matchedNode;\n}\n\nfunction matchComponent(node: React.ReactElement, pathname: string, forceExact?: boolean) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component,\n  };\n  const match = matchPath(pathname, matchProps);\n\n  return match;\n}\n","import {\n  AnimationBuilder,\n  LocationHistory,\n  NavManager,\n  RouteAction,\n  RouteInfo,\n  RouteManagerContext,\n  RouteManagerContextState,\n  RouterDirection,\n  ViewItem,\n  generateId,\n  getConfig,\n} from '@ionic/react';\nimport { Action as HistoryAction, Location as HistoryLocation } from 'history';\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { IonRouteInner } from './IonRouteInner';\nimport { ReactRouterViewStack } from './ReactRouterViewStack';\nimport StackManager from './StackManager';\n\nexport interface LocationState {\n  direction?: RouterDirection;\n  routerOptions?: { as?: string; unmount?: boolean };\n}\n\ninterface IonRouteProps extends RouteComponentProps<{}, {}, LocationState> {\n  registerHistoryListener: (\n    cb: (location: HistoryLocation<any>, action: HistoryAction) => void\n  ) => void;\n}\n\ninterface IonRouteState {\n  routeInfo: RouteInfo;\n}\n\nclass IonRouterInner extends React.PureComponent<IonRouteProps, IonRouteState> {\n  currentTab?: string;\n  exitViewFromOtherOutletHandlers: ((pathname: string) => ViewItem | undefined)[] = [];\n  incomingRouteParams?: Partial<RouteInfo>;\n  locationHistory = new LocationHistory();\n  viewStack = new ReactRouterViewStack();\n  routeMangerContextState: RouteManagerContextState = {\n    canGoBack: () => this.locationHistory.canGoBack(),\n    clearOutlet: this.viewStack.clear,\n    findViewItemByPathname: this.viewStack.findViewItemByPathname,\n    getChildrenToRender: this.viewStack.getChildrenToRender,\n    goBack: () => this.handleNavigateBack(),\n    createViewItem: this.viewStack.createViewItem,\n    findViewItemByRouteInfo: this.viewStack.findViewItemByRouteInfo,\n    findLeavingViewItemByRouteInfo: this.viewStack.findLeavingViewItemByRouteInfo,\n    addViewItem: this.viewStack.add,\n    unMountViewItem: this.viewStack.remove,\n  };\n\n  constructor(props: IonRouteProps) {\n    super(props);\n\n    const routeInfo = {\n      id: generateId('routeInfo'),\n      pathname: this.props.location.pathname,\n      search: this.props.location.search,\n    };\n\n    this.locationHistory.add(routeInfo);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n    this.handleResetTab = this.handleResetTab.bind(this);\n    this.handleNativeBack = this.handleNativeBack.bind(this);\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.handleNavigateBack = this.handleNavigateBack.bind(this);\n    this.props.registerHistoryListener(this.handleHistoryChange.bind(this));\n    this.handleSetCurrentTab = this.handleSetCurrentTab.bind(this);\n\n    this.state = {\n      routeInfo,\n    };\n  }\n\n  handleChangeTab(tab: string, path?: string, routeOptions?: any) {\n    if (!path) { return; }\n\n    const routeInfo = this.locationHistory.getCurrentRouteInfoForTab(tab);\n    const [pathname, search] = path.split('?');\n    if (routeInfo) {\n      this.incomingRouteParams = { ...routeInfo, routeAction: 'push', routeDirection: 'none' };\n      if (routeInfo.pathname === pathname) {\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(routeInfo.pathname + (routeInfo.search || ''));\n      } else {\n        this.incomingRouteParams.pathname = pathname;\n        this.incomingRouteParams.search = search ? '?' + search : undefined;\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(pathname + (search ? '?' + search : ''));\n      }\n    } else {\n      this.handleNavigate(pathname, 'push', 'none', undefined, routeOptions, tab);\n    }\n  }\n\n  handleHistoryChange(location: HistoryLocation<LocationState>, action: HistoryAction) {\n    let leavingLocationInfo: RouteInfo;\n    if (this.incomingRouteParams) {\n      if (this.incomingRouteParams.routeAction === 'replace') {\n        leavingLocationInfo = this.locationHistory.previous();\n      } else {\n        leavingLocationInfo = this.locationHistory.current();\n      }\n    } else {\n      leavingLocationInfo = this.locationHistory.current();\n    }\n\n    const leavingUrl = leavingLocationInfo.pathname + leavingLocationInfo.search;\n    if (leavingUrl !== location.pathname) {\n      if (!this.incomingRouteParams) {\n        if (action === 'REPLACE') {\n          this.incomingRouteParams = {\n            routeAction: 'replace',\n            routeDirection: 'none',\n            tab: this.currentTab, // TODO this isn't legit if replacing to a page that is not in the tabs\n          };\n        }\n        if (action === 'POP') {\n          const currentRoute = this.locationHistory.current();\n          if (currentRoute && currentRoute.pushedByRoute) {\n            const prevInfo = this.locationHistory.findLastLocation(currentRoute);\n            this.incomingRouteParams = { ...prevInfo, routeAction: 'pop', routeDirection: 'back' };\n          } else {\n            this.incomingRouteParams = {\n              routeAction: 'pop',\n              routeDirection: 'none',\n              tab: this.currentTab,\n            };\n          }\n        }\n        if (!this.incomingRouteParams) {\n          this.incomingRouteParams = {\n            routeAction: 'push',\n            routeDirection: location.state?.direction || 'forward',\n            routeOptions: location.state?.routerOptions,\n            tab: this.currentTab,\n          };\n        }\n      }\n\n      let routeInfo: RouteInfo;\n\n      if (this.incomingRouteParams?.id) {\n        routeInfo = {\n          ...(this.incomingRouteParams as RouteInfo),\n          lastPathname: leavingLocationInfo.pathname,\n        };\n        this.locationHistory.add(routeInfo);\n      } else {\n        const isPushed =\n          this.incomingRouteParams.routeAction === 'push' &&\n          this.incomingRouteParams.routeDirection === 'forward';\n        routeInfo = {\n          id: generateId('routeInfo'),\n          ...this.incomingRouteParams,\n          lastPathname: leavingLocationInfo.pathname,\n          pathname: location.pathname,\n          search: location.search,\n          params: this.props.match.params,\n          prevRouteLastPathname: leavingLocationInfo.lastPathname,\n        };\n        if (isPushed) {\n          routeInfo.tab = leavingLocationInfo.tab;\n          routeInfo.pushedByRoute = leavingLocationInfo.pathname;\n        } else if (routeInfo.routeAction === 'pop') {\n          const r = this.locationHistory.findLastLocation(routeInfo);\n          routeInfo.pushedByRoute = r?.pushedByRoute;\n        } else if (routeInfo.routeAction === 'push' && routeInfo.tab !== leavingLocationInfo.tab) {\n          // If we are switching tabs grab the last route info for the tab and use its pushedByRoute\n          const lastRoute = this.locationHistory.getCurrentRouteInfoForTab(routeInfo.tab);\n          routeInfo.pushedByRoute = lastRoute?.pushedByRoute;\n        } else if (routeInfo.routeAction === 'replace') {\n          // Make sure to set the lastPathname, etc.. to the current route so the page transitions out\n          const currentRouteInfo = this.locationHistory.current();\n\n          /**\n           * If going from /home to /child, then replacing from\n           * /child to /home, we don't want the route info to\n           * say that /home was pushed by /home which is not correct.\n           */\n          const currentPushedBy = currentRouteInfo?.pushedByRoute;\n          const pushedByRoute = (currentPushedBy !== undefined && currentPushedBy !== routeInfo.pathname) ? currentPushedBy : routeInfo.pushedByRoute;\n\n          routeInfo.lastPathname = currentRouteInfo?.pathname || routeInfo.lastPathname;\n          routeInfo.prevRouteLastPathname = currentRouteInfo?.lastPathname;\n          routeInfo.pushedByRoute = pushedByRoute;\n          routeInfo.routeDirection = currentRouteInfo?.routeDirection || routeInfo.routeDirection;\n          routeInfo.routeAnimation = currentRouteInfo?.routeAnimation || routeInfo.routeAnimation;\n        }\n\n        this.locationHistory.add(routeInfo);\n      }\n\n      this.setState({\n        routeInfo,\n      });\n    }\n\n    this.incomingRouteParams = undefined;\n  }\n\n  /**\n   * history@4.x uses goBack(), history@5.x uses back()\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just\n   * assume back() is available.\n   */\n  handleNativeBack() {\n    const history = this.props.history as any;\n    const goBack = history.goBack || history.back;\n    goBack();\n  }\n\n  handleNavigate(\n    path: string,\n    routeAction: RouteAction,\n    routeDirection?: RouterDirection,\n    routeAnimation?: AnimationBuilder,\n    routeOptions?: any,\n    tab?: string\n  ) {\n    this.incomingRouteParams = Object.assign(this.incomingRouteParams || {}, {\n      routeAction,\n      routeDirection,\n      routeOptions,\n      routeAnimation,\n      tab,\n    });\n\n    if (routeAction === 'push') {\n      this.props.history.push(path);\n    } else {\n      this.props.history.replace(path);\n    }\n  }\n\n  handleNavigateBack(defaultHref: string | RouteInfo = '/', routeAnimation?: AnimationBuilder) {\n    const config = getConfig();\n    defaultHref = defaultHref ? defaultHref : config && config.get('backButtonDefaultHref' as any);\n    const routeInfo = this.locationHistory.current();\n    if (routeInfo && routeInfo.pushedByRoute) {\n      const prevInfo = this.locationHistory.findLastLocation(routeInfo);\n      if (prevInfo) {\n        this.incomingRouteParams = {\n          ...prevInfo,\n          routeAction: 'pop',\n          routeDirection: 'back',\n          routeAnimation: routeAnimation || routeInfo.routeAnimation,\n        };\n        if (\n          routeInfo.lastPathname === routeInfo.pushedByRoute ||\n          (\n            /**\n             * We need to exclude tab switches/tab\n             * context changes here because tabbed\n             * navigation is not linear, but router.back()\n             * will go back in a linear fashion.\n             */\n            prevInfo.pathname === routeInfo.pushedByRoute &&\n            routeInfo.tab === '' && prevInfo.tab === ''\n          )\n        ) {\n          /**\n           * history@4.x uses goBack(), history@5.x uses back()\n           * TODO: If support for React Router <=5 is dropped\n           * this logic is no longer needed. We can just\n           * assume back() is available.\n           */\n          const history = this.props.history as any;\n          const goBack = history.goBack || history.back;\n          goBack();\n        } else {\n          this.handleNavigate(prevInfo.pathname + (prevInfo.search || ''), 'pop', 'back');\n        }\n      } else {\n        this.handleNavigate(defaultHref as string, 'pop', 'back');\n      }\n    } else {\n      this.handleNavigate(defaultHref as string, 'pop', 'back');\n    }\n  }\n\n  handleResetTab(tab: string, originalHref: string, originalRouteOptions: any) {\n    const routeInfo = this.locationHistory.getFirstRouteInfoForTab(tab);\n    if (routeInfo) {\n      const newRouteInfo = { ...routeInfo };\n      newRouteInfo.pathname = originalHref;\n      newRouteInfo.routeOptions = originalRouteOptions;\n      this.incomingRouteParams = { ...newRouteInfo, routeAction: 'pop', routeDirection: 'back' };\n      this.props.history.push(newRouteInfo.pathname + (newRouteInfo.search || ''));\n    }\n  }\n\n  handleSetCurrentTab(tab: string) {\n    this.currentTab = tab;\n    const ri = { ...this.locationHistory.current() };\n    if (ri.tab !== tab) {\n      ri.tab = tab;\n      this.locationHistory.update(ri);\n    }\n  }\n\n  render() {\n    return (\n      <RouteManagerContext.Provider value={this.routeMangerContextState}>\n        <NavManager\n          ionRoute={IonRouteInner}\n          ionRedirect={{}}\n          stackManager={StackManager}\n          routeInfo={this.state.routeInfo!}\n          onNativeBack={this.handleNativeBack}\n          onNavigateBack={this.handleNavigateBack}\n          onNavigate={this.handleNavigate}\n          onSetCurrentTab={this.handleSetCurrentTab}\n          onChangeTab={this.handleChangeTab}\n          onResetTab={this.handleResetTab}\n          locationHistory={this.locationHistory}\n        >\n          {this.props.children}\n        </NavManager>\n      </RouteManagerContext.Provider>\n    );\n  }\n}\n\nexport const IonRouter = withRouter(IonRouterInner);\nIonRouter.displayName = 'IonRouter';\n","import {\n  Action as HistoryAction,\n  History,\n  Location as HistoryLocation,\n  createBrowserHistory as createHistory,\n} from 'history';\nimport React from 'react';\nimport { BrowserRouterProps, Router } from 'react-router-dom';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactRouterProps extends BrowserRouterProps {\n  history?: History;\n}\n\nexport class IonReactRouter extends React.Component<IonReactRouterProps> {\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n  history: History;\n\n  constructor(props: IonReactRouterProps) {\n    super(props);\n    const { history, ...rest } = props;\n    this.history = history || createHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n /**\n  * history@4.x passes separate location and action\n  * params. history@5.x passes location and action\n  * together as a single object.\n  * TODO: If support for React Router <=5 is dropped\n  * this logic is no longer needed. We can just assume\n  * a single object with both location and action.\n  */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n   const locationValue = (location as any).location || location;\n   const actionValue = (location as any).action || action;\n   if (this.historyListenHandler) {\n     this.historyListenHandler(locationValue, actionValue);\n   }\n }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router history={this.history} {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n","import { Action as HistoryAction, Location as HistoryLocation, MemoryHistory } from 'history';\nimport React from 'react';\nimport { MemoryRouterProps, Router } from 'react-router';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactMemoryRouterProps extends MemoryRouterProps {\n  history: MemoryHistory;\n}\n\nexport class IonReactMemoryRouter extends React.Component<IonReactMemoryRouterProps> {\n  history: MemoryHistory;\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n\n  constructor(props: IonReactMemoryRouterProps) {\n    super(props);\n    this.history = props.history;\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    const locationValue = (location as any).location || location;\n    const actionValue = (location as any).action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n","import {\n  Action as HistoryAction,\n  History,\n  Location as HistoryLocation,\n  createHashHistory as createHistory,\n} from 'history';\nimport React from 'react';\nimport { BrowserRouterProps, Router } from 'react-router-dom';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactHashRouterProps extends BrowserRouterProps {\n  history?: History;\n}\n\nexport class IonReactHashRouter extends React.Component<IonReactHashRouterProps> {\n  history: History;\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n\n  constructor(props: IonReactHashRouterProps) {\n    super(props);\n    const { history, ...rest } = props;\n    this.history = history || createHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    const locationValue = (location as any).location || location;\n    const actionValue = (location as any).action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router history={this.history} {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}