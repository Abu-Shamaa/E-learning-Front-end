{"ast":null,"code":"var _jsxFileName = \"/home/shama/webapps/ionicblog/src/pages/user/ucourse/QuizQuestion.tsx\",\n    _s2 = $RefreshSig$();\n\nimport { IonContent, IonItem, IonButton, IonCardContent, IonCard, IonCardHeader, IonCardTitle, IonLabel, IonList, IonRadio, IonRadioGroup, IonInput } from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport baseUrl, { api } from '../../Urls';\nimport '../../../pages/Style.css';\nimport ReactPaginate from \"react-paginate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuizQuestion = props => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const [question, setQuestion] = useState([]);\n  const [isAns, setIsAns] = useState([]);\n  const [test_end, setTest_end] = useState(format(new Date(), 'yyyy-MM-dd HH:mm:ss'));\n  const [quizId, setQuizId] = useState('');\n  const [isAttempt, setIsAttempt] = useState(''); ///////////////////////////////////////////\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(1);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - question.length) : 0; //const [selected, setSelected] = useState(0);\n\n  const [pageNumber, setPageNumber] = useState(0);\n  const questionPerPage = 2;\n  const pagesVisited = pageNumber * questionPerPage;\n  const pageCount = Math.ceil(question.length / questionPerPage); //console.log('pg', pageNumber)\n  //console.log('pv', pagesVisited)\n  ////\n\n  useEffect(() => {\n    return history.listen(() => {\n      // listen\n      if (history.action === \"POP\") {\n        history.replace(`/dashboard/mycourse/${localStorage.getItem(\"course_id\")}/quiz/${localStorage.getItem(\"quiz_id\")}`);\n      }\n    });\n  }, [history]);\n  useEffect(() => {\n    fetch(`${baseUrl}${api.viewQuiz}${id}`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    }).then(resp => resp.json()).then(result => {\n      setQuestion(result.question);\n      setTest_end(result.question[0].test_end);\n      setQuizId(result.question.map(item => item.quiz_id));\n      setIsAttempt(result.quiz.map(item => item.is_attempt)); //localStorage.setItem('quiz_id', result.question[0].quiz_id)\n      //localStorage.setItem('test_end', result.question[0].test_end)\n      //history.replace(`/dashboard/mycourse/${props.courseId}/quiz/${localStorage.getItem(\"quiz_id\")}`)\n    });\n  }, []); //console.log(question)\n\n  let attempt = {};\n  question.map((q, i) => {\n    attempt = { ...attempt,\n      [q.id]: isAns[i]\n    };\n  });\n\n  const handleChange = (e, i) => {\n    const inputdata = [...isAns];\n    inputdata[pagesVisited + i] = e.target.value;\n    console.log('ans', inputdata);\n    setIsAns(inputdata); //console.log('page No', [pagesVisited + i])\n  }; //console.log('ans', attempt)\n\n\n  const submit = () => {\n    if (quizId && attempt) {\n      let data = {\n        'attemptans': attempt,\n        'quiz_id': quizId\n      };\n      fetch(`${baseUrl}${api.quizAttempt}`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify(data)\n      }).then(response => {\n        if (response.status === 200) {\n          //window.confirm('Want to submit?')\n          window.location.href = `/dashboard/mycourse/${props.courseId}/quiz/result`;\n        } else {\n          throw Error([response.status, response.statusText].join(' '));\n        }\n      }).catch(error => console.log('error', error));\n    }\n  };\n\n  const changePage = _ref => {\n    let {\n      selected\n    } = _ref;\n    setPageNumber(selected);\n  }; ///////////////////////////\n\n\n  const st = format(new Date(), 'yyyy-MM-dd HH:mm:ss');\n  const etm = localStorage.getItem(\"test_end\");\n  const et = format(new Date(etm), 'yyyy-MM-dd HH:mm:ss');\n  const end = new Date(et).getTime();\n  const start = new Date(st).getTime();\n  const ddd = end - start;\n  const [deadline] = useState(new Date(Date.now() + ddd));\n\n  const useCountdown = deadline => {\n    _s();\n\n    // Time is in seconds\n    const [time, setTime] = useState(Math.max(0, Math.floor((deadline.getTime() - Date.now()) / 1000)));\n\n    const decrement = () => setTime(prevTime => {\n      return prevTime === 0 ? 0 : prevTime - 1;\n    });\n\n    useEffect(() => {\n      //const ids = setInterval(decrement, 1000);\n      const ids = setInterval(() => {\n        decrement();\n\n        if (time == 0) {\n          submit();\n        }\n      }, 1000);\n      return () => clearInterval(ids);\n    }, [time]);\n\n    const format = num => {\n      return num < 10 ? '0' + num : num.toString();\n    };\n\n    return {\n      //days: format(Math.floor(time / (3600 * 24))),\n      hours: format(Math.floor(time / 3600 % 24)),\n      minutes: format(Math.floor(time / 60 % 60)),\n      seconds: format(time % 60)\n    };\n  };\n\n  _s(useCountdown, \"Dv/bKuRD4Z/f7cu4v2rBgyTcrkI=\");\n\n  const timer = useCountdown(deadline);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(IonContent, {\n      children: isAttempt != '1' ? /*#__PURE__*/_jsxDEV(IonCard, {\n        children: [/*#__PURE__*/_jsxDEV(IonCardHeader, {\n          children: /*#__PURE__*/_jsxDEV(IonCardTitle, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center mt-3\",\n              children: [\"Total Question -- \", question.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center mt-3 mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"bi bi-alarm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 72\n              }, this), \" \", timer.hours, \":\", timer.minutes, \":\", timer.seconds]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(IonCardContent, {\n          children: [question.slice(pagesVisited, pagesVisited + questionPerPage).map((qstn, i) => /*#__PURE__*/_jsxDEV(IonCard, {\n            children: /*#__PURE__*/_jsxDEV(IonCardHeader, {\n              children: /*#__PURE__*/_jsxDEV(IonCardTitle, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-2\",\n                  children: [pagesVisited + i + 1, \" / \", question.length, \" -- \", qstn.title]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  dangerouslySetInnerHTML: {\n                    __html: qstn.q_content\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: qstn.question_type != 'MCQ' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: /*#__PURE__*/_jsxDEV(IonItem, {\n                      children: /*#__PURE__*/_jsxDEV(IonInput, {\n                        name: \"isAns\",\n                        value: isAns[pagesVisited + i],\n                        placeholder: \"enter answer\",\n                        onIonChange: e => handleChange(e, i) //onIonChange={(e) => setIsAns(e.target.value)}\n\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 237,\n                        columnNumber: 69\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 236,\n                      columnNumber: 65\n                    }, this)\n                  }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: /*#__PURE__*/_jsxDEV(IonList, {\n                      children: /*#__PURE__*/_jsxDEV(IonRadioGroup, {\n                        name: \"isAns\" //checked={isAns[pagesVisited + i]}\n                        ,\n                        value: isAns[pagesVisited + i],\n                        onIonChange: e => handleChange(e, i) //onIonChange={(e) => setIsAns(e.target.value)}\n                        ,\n                        children: qstn.option.map((op, index) => {\n                          //console.log('ans', [index])\n                          return /*#__PURE__*/_jsxDEV(IonItem, {\n                            children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n                              children: op.option\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 264,\n                              columnNumber: 85\n                            }, this), /*#__PURE__*/_jsxDEV(IonRadio, {\n                              slot: \"start\",\n                              value: op.option\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 265,\n                              columnNumber: 85\n                            }, this)]\n                          }, `option-${index}`, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 263,\n                            columnNumber: 81\n                          }, this);\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 252,\n                        columnNumber: 69\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 250,\n                      columnNumber: 65\n                    }, this)\n                  }, void 0, false)\n                }, void 0, false)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 41\n            }, this)\n          }, i.toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 37\n          }, this)), pageNumber + 1 == pageCount ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center mt-3 mb-5\",\n            children: /*#__PURE__*/_jsxDEV(IonButton, {\n              id: \"quiz_submit\",\n              fill: \"outline\",\n              onClick: submit,\n              children: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 33\n          }, this) : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n          previousLabel: \"Previous\",\n          nextLabel: \"Next\",\n          pageCount: pageCount,\n          onPageChange: changePage,\n          containerClassName: \"paginationBttns\",\n          previousLinkClassName: \"previousBttn\",\n          nextLinkClassName: \"nextBttn\",\n          disabledClassName: \"paginationDisabled\",\n          activeClassName: \"paginationActive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(IonCard, {\n        children: [/*#__PURE__*/_jsxDEV(IonCardHeader, {\n          children: /*#__PURE__*/_jsxDEV(IonCardTitle, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center mt-3 mb-5\",\n              children: \"You Already Finished your Quiz\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(IonCardContent, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center mt-3 mb-5\",\n            children: /*#__PURE__*/_jsxDEV(IonButton, {\n              fill: \"outline\",\n              href: `/dashboard/mycourse/${props.courseId}`,\n              children: \"Back to Course\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s2(QuizQuestion, \"YUAkGIggQ9qsC0T8THviz5f9t3Q=\", true, function () {\n  return [useParams, useHistory];\n});\n\n_c = QuizQuestion;\nexport default QuizQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizQuestion\");","map":{"version":3,"names":["IonContent","IonItem","IonButton","IonCardContent","IonCard","IonCardHeader","IonCardTitle","IonLabel","IonList","IonRadio","IonRadioGroup","IonInput","React","useState","useEffect","useHistory","useParams","format","baseUrl","api","ReactPaginate","QuizQuestion","props","id","history","question","setQuestion","isAns","setIsAns","test_end","setTest_end","Date","quizId","setQuizId","isAttempt","setIsAttempt","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","emptyRows","Math","max","length","pageNumber","setPageNumber","questionPerPage","pagesVisited","pageCount","ceil","listen","action","replace","localStorage","getItem","fetch","viewQuiz","method","headers","Accept","then","resp","json","result","map","item","quiz_id","quiz","is_attempt","attempt","q","i","handleChange","e","inputdata","console","log","submit","data","quizAttempt","body","JSON","stringify","response","status","window","location","href","courseId","Error","statusText","join","catch","error","changePage","selected","st","etm","et","end","getTime","start","ddd","deadline","now","useCountdown","time","setTime","floor","decrement","prevTime","ids","setInterval","clearInterval","num","toString","hours","minutes","seconds","timer","slice","qstn","title","__html","q_content","question_type","option","op","index"],"sources":["/home/shama/webapps/ionicblog/src/pages/user/ucourse/QuizQuestion.tsx"],"sourcesContent":["import {\n    IonContent,\n    IonItem,\n    IonButton,\n    IonCardContent,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonLabel, IonList, IonRadio, IonRadioGroup, IonInput, IonCheckbox\n} from '@ionic/react';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useHistory, useParams, useLocation } from 'react-router-dom';\nimport { format } from 'date-fns'\nimport baseUrl, { api } from '../../Urls';\nimport '../../../pages/Style.css';\nimport ReactPaginate from \"react-paginate\";\n\n\nconst QuizQuestion: React.FC<{\n    courseId: string,\n\n}> = (props) => {\n    type QuizQuestion = {\n        id: string;\n    };\n    const { id } = useParams<QuizQuestion>();\n    const history = useHistory();\n    const [question, setQuestion] = useState([]);\n    const [isAns, setIsAns]: any[] = useState([]);\n    const [test_end, setTest_end] = useState(format(new Date(), 'yyyy-MM-dd HH:mm:ss'));\n    const [quizId, setQuizId] = useState('');\n    const [isAttempt, setIsAttempt] = useState('');\n    ///////////////////////////////////////////\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(1);\n    const handleChangePage = (event: any, newPage: any) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: any) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - question.length) : 0;\n    //const [selected, setSelected] = useState(0);\n    const [pageNumber, setPageNumber] = useState(0);\n    const questionPerPage = 2;\n    const pagesVisited = pageNumber * questionPerPage;\n    const pageCount = Math.ceil(question.length / questionPerPage);\n\n    //console.log('pg', pageNumber)\n    //console.log('pv', pagesVisited)\n\n\n\n    ////\n    useEffect(() => {\n        return history.listen(() => { // listen\n            if (history.action === \"POP\") {\n                history.replace(`/dashboard/mycourse/${localStorage.getItem(\"course_id\")}/quiz/${localStorage.getItem(\"quiz_id\")}`);\n            }\n        });\n    }, [history]);\n\n    useEffect(() => {\n\n\n        fetch(`${baseUrl}${api.viewQuiz}${id}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\n            }\n        })\n            .then(resp => resp.json())\n            .then(result => {\n                setQuestion(result.question)\n                setTest_end(result.question[0].test_end)\n                setQuizId(result.question.map((item: any) => (item.quiz_id)))\n                setIsAttempt(result.quiz.map((item: any) => (item.is_attempt)))\n                //localStorage.setItem('quiz_id', result.question[0].quiz_id)\n                //localStorage.setItem('test_end', result.question[0].test_end)\n                //history.replace(`/dashboard/mycourse/${props.courseId}/quiz/${localStorage.getItem(\"quiz_id\")}`)\n            })\n\n\n    }, []);\n\n    //console.log(question)\n    let attempt = {};\n    question.map((q: any, i) => {\n        attempt = { ...attempt, [q.id]: isAns[i] }\n    })\n    const handleChange = (e: any, i: any) => {\n        const inputdata = [...isAns];\n        inputdata[pagesVisited + i] = e.target.value;\n        console.log('ans', inputdata)\n        setIsAns(inputdata)\n\n        //console.log('page No', [pagesVisited + i])\n\n\n    };\n    //console.log('ans', attempt)\n\n    const submit = () => {\n        if (quizId && attempt) {\n            let data = {\n\n                'attemptans': attempt,\n                'quiz_id': quizId,\n\n            }\n\n            fetch(`${baseUrl}${api.quizAttempt}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(data),\n            })\n\n                .then(response => {\n                    if (response.status === 200) {\n                        //window.confirm('Want to submit?')\n                        window.location.href = `/dashboard/mycourse/${props.courseId}/quiz/result`;\n\n                    }\n                    else {\n                        throw Error([response.status, response.statusText].join(' '));\n                    }\n                })\n\n                .catch(error => console.log('error', error));\n\n\n        }\n\n    };\n\n\n    const changePage = ({ selected }: any) => {\n        setPageNumber(selected);\n    };\n\n    ///////////////////////////\n\n    const st = format(new Date(), 'yyyy-MM-dd HH:mm:ss');\n    const etm: any = localStorage.getItem(\"test_end\");\n    const et = format(new Date(etm), 'yyyy-MM-dd HH:mm:ss');\n    const end = new Date(et).getTime();\n    const start = new Date(st).getTime();\n    const ddd = end - start;\n\n    const [deadline] = useState(new Date(Date.now() + ddd));\n\n    const useCountdown = (deadline: Date) => {\n        // Time is in seconds\n        const [time, setTime] = useState(\n            Math.max(0, Math.floor((deadline.getTime() - Date.now()) / 1000))\n        );\n\n        const decrement = () =>\n            setTime((prevTime) => {\n                return prevTime === 0 ? 0 : prevTime - 1;\n            });\n\n        useEffect(() => {\n            //const ids = setInterval(decrement, 1000);\n            const ids = setInterval(() => {\n                decrement()\n                if (time == 0) {\n                    submit()\n                }\n\n            }, 1000);\n            return () => clearInterval(ids);\n        }, [time]);\n\n        const format = (num: number): string => {\n            return num < 10 ? '0' + num : num.toString();\n        };\n\n        return {\n            //days: format(Math.floor(time / (3600 * 24))),\n            hours: format(Math.floor((time / 3600) % 24)),\n            minutes: format(Math.floor((time / 60) % 60)),\n            seconds: format(time % 60),\n        };\n    };\n\n    const timer = useCountdown(deadline);\n\n    return (\n\n        <>\n\n            <IonContent>\n\n                {isAttempt != '1' ?\n\n                    <IonCard>\n                        <IonCardHeader>\n                            <IonCardTitle>\n\n                                <div className='text-center mt-3'>Total Question -- {question.length}</div>\n\n                                <div className='text-center mt-3 mb-3'><i className=\"bi bi-alarm\"></i> {timer.hours}:{timer.minutes}:{timer.seconds}</div>\n\n                            </IonCardTitle>\n                        </IonCardHeader>\n\n                        <IonCardContent>\n\n                            {question.slice(pagesVisited, pagesVisited + questionPerPage)\n                                .map((qstn: any, i: any) =>\n\n                                    <IonCard key={i.toString()}>\n                                        <IonCardHeader>\n                                            <IonCardTitle>\n                                                <div className='mb-2'>\n                                                    {pagesVisited + i + 1} / {question.length} -- {qstn.title}\n                                                </div>\n\n\n                                                <h2 dangerouslySetInnerHTML={{ __html: qstn.q_content }}></h2>\n\n                                                <>\n                                                    {\n                                                        (qstn.question_type != 'MCQ') ?\n                                                            <>\n                                                                <IonItem>\n                                                                    <IonInput name='isAns'\n                                                                        value={isAns[pagesVisited + i]}\n                                                                        placeholder=\"enter answer\"\n                                                                        onIonChange={(e) => handleChange(e, i)}\n                                                                    //onIonChange={(e) => setIsAns(e.target.value)}\n\n                                                                    >\n\n                                                                    </IonInput>\n\n                                                                </IonItem>\n                                                            </> :\n                                                            <>\n                                                                <IonList>\n\n                                                                    <IonRadioGroup name='isAns'\n                                                                        //checked={isAns[pagesVisited + i]}\n\n                                                                        value={isAns[pagesVisited + i]}\n                                                                        onIonChange={(e) => handleChange(e, i)}\n                                                                    //onIonChange={(e) => setIsAns(e.target.value)}\n                                                                    >\n                                                                        {qstn.option.map((op: any, index: any) => {\n                                                                            //console.log('ans', [index])\n                                                                            return (\n\n                                                                                <IonItem key={`option-${index}`}>\n                                                                                    <IonLabel >{op.option}</IonLabel>\n                                                                                    <IonRadio slot=\"start\" value={op.option} >\n                                                                                    </IonRadio>\n\n                                                                                </IonItem>\n\n                                                                            );\n                                                                        })}\n                                                                    </IonRadioGroup>\n                                                                </IonList>\n                                                            </>\n                                                    }\n\n\n                                                </>\n                                            </IonCardTitle>\n                                        </IonCardHeader>\n                                    </IonCard>\n\n\n                                )}\n\n                            {pageNumber + 1 == pageCount ?\n                                <div className='text-center mt-3 mb-5'>\n                                    <IonButton id=\"quiz_submit\" fill=\"outline\" onClick={submit}>submit</IonButton>\n                                </div> : ''\n                            }\n\n\n                        </IonCardContent>\n                        <ReactPaginate\n                            previousLabel={\"Previous\"}\n                            nextLabel={\"Next\"}\n                            pageCount={pageCount}\n                            onPageChange={changePage}\n                            containerClassName={\"paginationBttns\"}\n                            previousLinkClassName={\"previousBttn\"}\n                            nextLinkClassName={\"nextBttn\"}\n                            disabledClassName={\"paginationDisabled\"}\n                            activeClassName={\"paginationActive\"}\n                        />\n\n                    </IonCard>\n\n\n                    :\n                    <IonCard>\n                        <IonCardHeader>\n                            <IonCardTitle>\n                                <div className='text-center mt-3 mb-5'>\n                                    You Already Finished your Quiz\n                                </div>\n                            </IonCardTitle>\n                        </IonCardHeader>\n\n                        <IonCardContent>\n                            <div className='text-center mt-3 mb-5'>\n                                <IonButton fill=\"outline\" href={`/dashboard/mycourse/${props.courseId}`}>Back to Course</IonButton>\n                            </div>\n                        </IonCardContent>\n                    </IonCard>\n                }\n\n            </IonContent>\n        </>\n    );\n};\n\n\nexport default QuizQuestion;"],"mappings":"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"},"metadata":{},"sourceType":"module"}