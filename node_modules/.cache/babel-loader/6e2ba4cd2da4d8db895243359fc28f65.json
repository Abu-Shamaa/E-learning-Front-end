{"ast":null,"code":"/**\n * virtual-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction memo(getDeps, fn, opts) {\n  var deps = [];\n  var result;\n  return function () {\n    var depTime;\n    if (opts.key && opts.debug != null && opts.debug()) depTime = Date.now();\n    var newDeps = getDeps();\n    var depsChanged = newDeps.length !== deps.length || newDeps.some(function (dep, index) {\n      return deps[index] !== dep;\n    });\n\n    if (!depsChanged) {\n      return result;\n    }\n\n    deps = newDeps;\n    var resultTime;\n    if (opts.key && opts.debug != null && opts.debug()) resultTime = Date.now();\n    result = fn.apply(void 0, newDeps);\n    opts == null ? void 0 : opts.onChange == null ? void 0 : opts.onChange(result);\n\n    if (opts.key && opts.debug != null && opts.debug()) {\n      var depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n      var resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n      var resultFpsPercentage = resultEndTime / 16;\n\n      var pad = function pad(str, num) {\n        str = String(str);\n\n        while (str.length < num) {\n          str = ' ' + str;\n        }\n\n        return str;\n      };\n\n      console.info(\"%c\\u23F1 \" + pad(resultEndTime, 5) + \" /\" + pad(depEndTime, 5) + \" ms\", \"\\n            font-size: .6rem;\\n            font-weight: bold;\\n            color: hsl(\" + Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120)) + \"deg 100% 31%);\", opts == null ? void 0 : opts.key);\n    }\n\n    return result;\n  };\n}\n\nexport { memo };","map":{"version":3,"mappings":";;;;;;;;;;AAIO,SAASA,IAAT,CACLC,OADK,EAELC,EAFK,EAGLC,IAHK,EAQU;EACf,IAAIC,IAAW,GAAG,EAAlB;EACA,IAAIC,MAAJ;EAEA,OAAO,YAAM;IACX,IAAIC,OAAJ;IACA,IAAIH,IAAI,CAACI,GAALJ,IAAYA,IAAI,CAACK,KAALL,QAAZA,IAAYA,IAAI,CAACK,KAALL,EAAhB,EAAgCG,OAAO,GAAGG,IAAI,CAACC,GAALD,EAAVH;IAEhC,IAAMK,OAAO,GAAGV,OAAO,EAAvB;IAEA,IAAMW,WAAW,GACfD,OAAO,CAACE,MAARF,KAAmBP,IAAI,CAACS,MAAxBF,IACAA,OAAO,CAACG,IAARH,CAAa,UAACI,GAAD,EAAWC,KAAX,EAAwB;MAAA,OAAKZ,IAAI,CAACY,KAAD,CAAJZ,KAAgBW,GAArB;IAAyB,CAA9DJ,CAFF;;IAIA,IAAI,CAACC,WAAL,EAAkB;MAChB,OAAOP,MAAP;IACF;;IAEAD,IAAI,GAAGO,OAAPP;IAEA,IAAIa,UAAJ;IACA,IAAId,IAAI,CAACI,GAALJ,IAAYA,IAAI,CAACK,KAALL,QAAZA,IAAYA,IAAI,CAACK,KAALL,EAAhB,EAAgCc,UAAU,GAAGR,IAAI,CAACC,GAALD,EAAbQ;IAEhCZ,MAAM,GAAGH,EAAE,CAAIS,KAANT,CAAMS,MAANT,EAAMS,OAANT,CAATG;IACAF,IAAI,QAAJA,GAAI,MAAJA,OAAI,CAAEe,QAANf,IAAc,IAAdA,GAAc,MAAdA,OAAI,CAAEe,QAANf,CAAiBE,MAAjBF;;IAEA,IAAIA,IAAI,CAACI,GAALJ,IAAYA,IAAI,CAACK,KAALL,IAAU,IAAtBA,IAAYA,IAAI,CAACK,KAALL,EAAhB,EAAgC;MAC9B,IAAMgB,UAAU,GAAGC,IAAI,CAACC,KAALD,CAAW,CAACX,IAAI,CAACC,GAALD,KAAaH,OAAd,IAA0B,GAArCc,IAA4C,GAA/D;MACA,IAAME,aAAa,GAAGF,IAAI,CAACC,KAALD,CAAW,CAACX,IAAI,CAACC,GAALD,KAAaQ,UAAd,IAA6B,GAAxCG,IAA+C,GAArE;MACA,IAAMG,mBAAmB,GAAGD,aAAa,GAAG,EAA5C;;MAEA,IAAME,GAAG,GAAG,SAANA,GAAM,CAACC,GAAD,EAAuBC,GAAvB,EAAuC;QACjDD,GAAG,GAAGE,MAAM,CAACF,GAAD,CAAZA;;QACA,OAAOA,GAAG,CAACZ,MAAJY,GAAaC,GAApB,EAAyB;UACvBD,GAAG,GAAG,MAAMA,GAAZA;QACF;;QACA,OAAOA,GAAP;MACD,CAND;;MAQAG,OAAO,CAACC,IAARD,CAAY,cACHJ,GAAG,CAACF,aAAD,EAAgB,CAAhB,CADA,GACkB,IADlB,GACuBE,GAAG,CAACL,UAAD,EAAa,CAAb,CAD1B,GAKOC,KALnBQ,EAKmBR,iGAAI,CAACU,GAALV,CACX,CADWA,EAEXA,IAAI,CAACW,GAALX,CAAS,MAAM,MAAMG,mBAArBH,EAA0C,GAA1CA,CAFWA,IAIjBjB,gBATFyB,EASEzB,IAAI,QAAJA,GAAI,MAAJA,OAAI,CAAEI,GATRqB;IAWF;;IAEA,OAAOvB,MAAP;EACD,CAjDD;AAkDF","names":["memo","getDeps","fn","opts","deps","result","depTime","key","debug","Date","now","newDeps","depsChanged","length","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min"],"sources":["/home/shama/elearning/elearnf/node_modules/@tanstack/virtual-core/src/utils.ts"],"sourcesContent":["export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  },\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    return result!\n  }\n}\n"]},"metadata":{},"sourceType":"module"}